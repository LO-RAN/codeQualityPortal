<?xml version="1.0"?>
<ruleset name="Basic Rules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
The Basic Ruleset contains a collection of good practices which everyone should follow.
  </description>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty catch blocks" name="EmptyCatchBlock">
      <description>
  Empty Catch Block finds instances where an exception is caught,
  but nothing is done.  In most circumstances, this swallows an exception
  which should either be acted on or reported.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
    //TryStatement
    [@Catch='true']
    [FormalParameter/Type/ReferenceType/ClassOrInterfaceType
     [@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException']
    ]
    /Block[position() > 1]
    [count(*) = 0]
    [../@Finally='false' or following-sibling::Block]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public void doSomething() {
      try {
        FileInputStream fis = new FileInputStream("/tmp/bugger");
      } catch (IOException ioe) {
          // not good
      }
    }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty 'if' statements" name="EmptyIfStmt">
      <description>
  Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
        <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//IfStatement/Statement/Block[count(*) = 0]]]>
              </value>
          </property>
      </properties>
      <example>
    <![CDATA[if (foo == 0) {
       // why bother checking up on foo?
    }]]>
       </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty 'while' statements" name="EmptyWhileStmt">
       <description>
  Empty While Statement finds all instances where a while statement
  does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
  it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
                  //WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
       <example>
  <![CDATA[while (a == b) {
    // not good
  }]]>
       </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty try blocks" name="EmptyTryBlock">
      <description>
  Avoid empty try blocks - what's the point?
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//TryStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
      } catch (Exception e) {
          e.printStackTrace();
      }
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty finally blocks" name="EmptyFinallyBlock">
      <description>
  Avoid empty finally blocks - these can be deleted.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//TryStatement[@Finally='true']/Block[position() = last()]
      [count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[// this is bad
  public void bar() {
      try {
          int x=2;
      } finally {
      }
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty switch statements" name="EmptySwitchStatements">
      <description>
      Avoid empty switch statements.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SwitchStatement[count(*) = 1]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
   public void bar() {
    int x = 2;
    switch (x) {
     // once there was code here
     // but it's been commented out or something
    }
   }
  }]]>
      </example>
      </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid modifying an outer loop incrementer in an inner loop for update expression" name="JumbledIncrementer">
     <description>
     Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.
     </description>
     <properties>
         <property name="xpath">
             <value>
 <![CDATA[//ForStatement
 [
  ForUpdate/StatementExpressionList/StatementExpression/PostfixExpression/PrimaryExpression/PrimaryPrefix/Name/@Image
  =
  ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image
 ]]]>
             </value>
         </property>
     </properties>
        <priority>3</priority>
     <example>
 <![CDATA[public class JumbledIncrementerRule1 {
  public void foo() {
   for (int i = 0; i < 10; i++) {
    for (int k = 0; k < 20; i++) {
     System.out.println("Hello");
    }
   }
  }
 }]]>
     </example>
     </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="This for loop could be simplified to a while loop" name="ForLoopShouldBeWhileLoop">
      <description>
      Some for loops can be simplified to while loops - this makes them more concise.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
 //ForStatement
  [count(*) > 1]
  [not(ForInit)]
  [not(ForUpdate)]
  [not(Type and Expression and Statement)]
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          for (;true;) true; // No Init or Update part, may as well be: while (true)
      }
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.UnnecessaryConversionTemporary" message="Avoid unnecessary temporaries when converting primitives to Strings" name="UnnecessaryConversionTemporary">
      <description>
      Avoid unnecessary temporaries when converting primitives to Strings
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[public String convert(int x) {
      // this wastes an object
      String foo = new Integer(x).toString();
      // this is better
      return Integer.toString(x);
    }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Ensure you override both equals() and hashCode()" name="OverrideBothEqualsAndHashcode">
      <description>
  Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.
      </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='false']//MethodDeclarator
[(@Image = 'equals' and count(FormalParameters/*) = 1
and not(//MethodDeclarator[count(FormalParameters/*) = 0][@Image = 'hashCode']))
or
(@Image='hashCode' and count(FormalParameters/*) = 0
and
not
(//MethodDeclarator
 [count(
   FormalParameters//Type/ReferenceType/ClassOrInterfaceType
    [@Image = 'Object' or @Image = 'java.lang.Object']) = 1]
    [@Image = 'equals']))]
 ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[// this is bad
  public class Bar {
      public boolean equals(Object o) {
          // do some comparison
      }
  }

  // and so is this
  public class Baz {
      public int hashCode() {
          // return some hash value
      }
  }

  // this is OK
  public class Foo {
      public boolean equals(Object other) {
          // do some comparison
      }
      public int hashCode() {
          // return some hash value
      }
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.DoubleCheckedLocking" message="Double checked locking is not thread safe in Java." name="DoubleCheckedLocking">
      <description>
      Partially created objects can be returned by the Double Checked Locking pattern when used in Java.
      An optimizing JRE may assign a reference to the baz variable before it creates the object the
          reference is intended to point to.  For more details see http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html.
      </description>
        <priority>1</priority>
      <example>
  <![CDATA[public class Foo {
      Object baz;
      Object bar() {
        if(baz == null) { //baz may be non-null yet not fully created
          synchronized(this){
            if(baz == null){
              baz = new Object();
            }
          }
        }
        return baz;
      }
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid returning from a finally block" name="ReturnFromFinallyBlock">
      <description>
  Avoid returning from a finally block - this can discard exceptions.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//TryStatement[@Finally='true']/Block[position() = last()]//ReturnStatement]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Bar {
 public String bugga() {
  try {
   throw new Exception( "My Exception" );
  } catch (Exception e) {
   throw e;
  } finally {
   return "A. O. K."; // Very bad.
  }
 }
}]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid empty synchronized blocks" name="EmptySynchronizedBlock">
      <description>
  Avoid empty synchronized blocks - they're useless.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[//SynchronizedStatement/Block[1][count(*) = 0]]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[// this is bad
  public void bar() {
      synchronized (this) {}
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid unnecessary return statements" name="UnnecessaryReturn">
      <description>
  Avoid unnecessary return statements
      </description>
      <properties>
          <property name="xpath">
              <value>
 <![CDATA[//ReturnStatement
 [parent::Statement
  [parent::BlockStatement
   [parent::Block
    [parent::MethodDeclaration/ResultType[@Void='true']
    ]
   ]
  ] ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
  <![CDATA[// this is bad
  public void bar() {
      int x = 42;
      return;
  }]]>
      </example>
    </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Empty static initializer was found" name="EmptyStaticInitializer">
       <description>
       An empty static initializer was found.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[//ClassOrInterfaceBodyDeclaration/Initializer[@Static='true']/Block[count(*)=0]]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[public class Foo {
  // why are there no statements in this static block?
  static {}
 }]]>
       </example>
     </rule>
    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Do not use 'if' statements that are always true or always false" name="UnconditionalIfStatement">
      <description>
      Do not use "if" statements that are always true or always false.
      </description>
        <properties>
            <property name="xpath">
                <value>
 <![CDATA[//IfStatement/Expression
 [count(PrimaryExpression)=1]
 /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
 public void close() {
  if (true) {
       // ...
   }
 }
}]]>
      </example>
    </rule>
 
    <rule class="net.sourceforge.pmd.rules.XPathRule" message="An empty statement (semicolon) not part of a loop" name="EmptyStatementNotInLoop">
       <description>
       An empty statement (aka a semicolon by itself) that is not used
       as the sole body of a for loop or while loop is probably a bug.  It
       could also be a double semicolon, which is useless and should be
       removed.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
//Statement/EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[public class MyClass {
   public void doit()
   {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
   }
}]]>
       </example>
     </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid instantiating Boolean objects; you can usually invoke Boolean.valueOf() instead." name="BooleanInstantiation">
   <description>
   Avoid instantiating Boolean objects, instead use Boolean.valueOf().
   </description>
      <properties>
          <property name="xpath">
              <value>
<![CDATA[
//AllocationExpression[not (ArrayDimsAndInits)
                       and
                       (ClassOrInterfaceType/@Image='Boolean'
                       or
                       ClassOrInterfaceType/@Image='java.lang.Boolean')]
]]>
              </value>
          </property>
      </properties>
      <priority>2</priority>
   <example>
   <![CDATA[
public class Foo {
 private Boolean bar = new Boolean("true"); // just do a Boolean bar = Boolean.TRUE or Boolean.valueOf(true);
}
   ]]>
   </example>
   </rule>
    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Unnecessary final modifier in final class" name="UnnecessaryFinalModifier">
      <description>
  When a class has the final modifier, all the methods are marked finally.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//ClassOrInterfaceDeclaration[@Final='true' and @Interface='false']
/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>
      <example>
<![CDATA[
public final class Foo {

    // This final modifier is not necessary, since the class is final
    // and thus, all methods are final
	private final void foo() {
	}

}

]]>
     </example>
    </rule>

<rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid printStackTrace(); use a logger call instead." name="AvoidPrintStackTrace">
<description>Avoid printStackTrace(); use a logger call instead.</description>
<properties>
<property name="xpath">
<value><![CDATA[//PrimaryExpression
 [PrimaryPrefix/Name[contains(@Image,'printStackTrace')]]
 [PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]]]]></value>
</property>
</properties>
<priority>3</priority>
<example><![CDATA[class Foo {
 void bar() {
  try {
   // do something
  } catch (Exception e) {
   e.printStackTrace();
  }
 }
}]]></example>
</rule>

<rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid throwing a NullPointerException" name="AvoidThrowingNullPointerException">
<description>Avoid throwing a NullPointerException - it's confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer initiated exception.</description>
<properties>
<property name="xpath">
<value><![CDATA[//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']]]></value>
</property>
</properties>
<priority>1</priority>
<example><![CDATA[public class Foo {
 void bar() {
  throw new NullPointerException();
 }
}]]></example>
</rule>

<rule class="net.sourceforge.pmd.rules.XPathRule" message="Avoid throwing certain exception types" name="AvoidThrowingRawExceptionTypes">
<description>Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.</description>
<properties>
<property name="xpath">
<value><![CDATA[//AllocationExpression
 /ClassOrInterfaceType[
 @Image='Throwable' or
 @Image='Exception' or
 @Image='Error' or
 @Image='RuntimeException']]]></value>
</property>
</properties>
<priority>3</priority>
<example><![CDATA[public class Foo {
public void bar() throws Exception {
  throw new Exception();
 }
}]]></example>
</rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="Prefer StringBuffer over += for concatenating strings" name="UseStringBufferForStringAppends">
           <description>
      Finds usages of += for appending strings.
           </description>
          <properties>
              <property name="xpath">
                  <value>
                      <![CDATA[
//StatementExpression
    [PrimaryExpression/PrimaryPrefix/Name
        [@Image = ancestor::MethodDeclaration//LocalVariableDeclaration
            [./Type//ClassOrInterfaceType[@Image =
'String']]/VariableDeclarator/VariableDeclaratorId/@Image]]
    //AssignmentOperator[@Compound='true']
                      ]]>
                  </value>
              </property>
          </properties>
            <priority>3</priority>
           <example>
      <![CDATA[
         String a;

         a = "foo";
         a += " bar";

         // better would be:
         StringBuffer a = new StringBuffer("foo");
         a.append(" bar);
      ]]>
           </example>
        </rule>

    <rule class="net.sourceforge.pmd.rules.XPathRule" message="This call to String.startsWith can be rewritten using String.charAt(0)" name="SimplifyStartsWith">
      <description>
      Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//PrimaryExpression
 [PrimaryPrefix/Name
  [ends-with(@Image, '.startsWith')]]
 [PrimarySuffix/Arguments/ArgumentList
  /Expression/PrimaryExpression/PrimaryPrefix
  /Literal
   [string-length(@Image)=3]
   [starts-with(@Image, '"')]
   [ends-with(@Image, '"')]
 ]
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      boolean checkIt(String x) {
          return x.startsWith("a");
      }
  }]]>
      </example>
    </rule>

</ruleset>
