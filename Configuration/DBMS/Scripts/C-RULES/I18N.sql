-- PMCCABE metrics
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_CSLPCT','en','comments %');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NCSL','en','code lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NL','en','Total lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_CSL','en','comment lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NCSLPCT','en','code %');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_LOC','en','Lines of code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_EVG','en','EV(g)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_VG','en','V(g)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NB_STMT','en','Nb of Statements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_FIRST_LINE','en','First Line');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_CSLPCT','en','% of non code in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NCSL','en','Number of code lines in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NL','en','Total number of lines in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_CSL','en','Number of non code lines in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NCSLPCT','en','% of code in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_LOC','en','Number of lines in function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_EVG','en','Modified McCabe Cyclomatic Complexity');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_VG','en','Traditional McCabe Cyclomatic Complexity');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NB_STMT','en','Number of Statements in function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_FIRST_LINE','en','First line of function');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_CSLPCT','en','Percentage of lines that are not code (can be comment or blank lines) in the file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NCSL','en','Number of lines containing actual code (when comments and blank lines have been removed) in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NL','en','Total number of lines in file, including code, comments and blank lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_CSL','en','Number of lines that are not code (can be comment or blank lines) in the file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NCSLPCT','en','Percentage of lines containing actual code (when comments and blank lines have been removed) in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_LOC','en','number of lines of the function, from the opening curly brace through the line containing the closing curly brace');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_EVG','en','cyclomatic complexity calculated by adding 1 (for the function) to the occurences of for, if, while, switch, &&, ||, and ?. Unlike "normal" McCabe cyclomatic complexity, each case in a switch statement is not counted as additional complexity. This treatment of switch statements and complexity may be more useful than the "normal" measure for judging maintenance effort and code difficulty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_VG','en','cyclomatic complexity calculated in the "usual" way with regard to switch statements. Specifically it is calculated counting each case rather than the switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NB_STMT','en','statement count. It is calculated by adding each occurence of for, if, while, switch, ?, and semicolon within the function. One possible surprise is that for statements have a minimum statement count of 3. This is realistic since for(A; B; C){...} is really shorthand for A; while (B) { ... C;}. The number of statements within a file is the sum of the number of statements for each function implemented within that file, plus one for each of those functions (because functions are statements too), plus one for each other file-scoped statement (usually declarations).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_FIRST_LINE','en','first line number in the function. This is not necessarily the same line on which the function name appears.');

-- Splint metrics
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ABSTRACT','en','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ABSTRACTCOMPARE','en','abstractcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSALL','en','accessall');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSCZECH','en','accessczech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSCZECHOSLOVAK','en','accessczechoslovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSFILE','en','accessfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSMODULE','en','accessmodule');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSSLOVAK','en','accessslovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALIASUNIQUE','en','aliasunique');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALLBLOCK','en','allblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALLEMPTY','en','allempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALLOCMISMATCH','en','allocmismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALWAYSEXITS','en','alwaysexits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ANNOTATIONERROR','en','annotationerror');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ANSI89LIMITS','en','ansi89limits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ASSIGNEXPOSE','en','assignexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BADFLAG','en','badflag');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BITWISESIGNED','en','bitwisesigned');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOOLCOMPARE','en','boolcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOOLINT','en','boolint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOOLOPS','en','boolops');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOUNDS','en','bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOUNDSREAD','en','boundsread');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOUNDSWRITE','en','boundswrite');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BRANCHSTATE','en','branchstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BUFFEROVERFLOW','en','bufferoverflow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BUFFEROVERFLOWHIGH','en','bufferoverflowhigh');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CASEBREAK','en','casebreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CASTEXPOSE','en','castexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CASTFCNPTR','en','castfcnptr');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARINDEX','en','charindex');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARINT','en','charint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARINTLITERAL','en','charintliteral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARUNSIGNEDCHAR','en','charunsignedchar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKEDGLOBALIAS','en','checkedglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKMODGLOBALIAS','en','checkmodglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKPOST','en','checkpost');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKSTRICTGLOBALIAS','en','checkstrictglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMMENTCHAR','en','commentchar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMMENTERROR','en','commenterror');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMPDEF','en','compdef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMPDESTROY','en','compdestroy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMPMEMPASS','en','compmempass');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTMACROS','en','constmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTPREFIX','en','constprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTPREFIXEXCLUDE','en','constprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTUSE','en','constuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONTINUECOMMENT','en','continuecomment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONTROLNESTDEPTH','en','controlnestdepth');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CPPNAMES','en','cppnames');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECH','en','czech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHCONSTS','en','czechconsts');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHFCNS','en','czechfcns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHMACROS','en','czechmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAK','en','czechoslovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKCONSTS','en','czechoslovakconsts');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKFCNS','en','czechoslovakfcns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKMACROS','en','czechoslovakmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKTYPES','en','czechoslovaktypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKVARS','en','czechoslovakvars');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHTYPES','en','czechtypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHVARS','en','czechvars');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEBUGFCNCONSTRAINT','en','debugfcnconstraint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DECLUNDEF','en','declundef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEEPBREAK','en','deepbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEPARRAYS','en','deparrays');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEPENDENTTRANS','en','dependenttrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DISTINCTEXTERNALNAMES','en','distinctexternalnames');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DISTINCTINTERNALNAMES','en','distinctinternalnames');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DUPLICATECASES','en','duplicatecases');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DUPLICATEQUALS','en','duplicatequals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ELSEIFCOMPLETE','en','elseifcomplete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EMPTYRET','en','emptyret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMINDEX','en','enumindex');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMINT','en','enumint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMMEMBERS','en','enummembers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMMEMUSE','en','enummemuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMPREFIX','en','enumprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMPREFIXEXCLUDE','en','enumprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EVALORDER','en','evalorder');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EVALORDERUNCON','en','evalorderuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXITARG','en','exitarg');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTANY','en','exportany');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTCONST','en','exportconst');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTFCN','en','exportfcn');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTHEADER','en','exportheader');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTHEADERVAR','en','exportheadervar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTITER','en','exportiter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTLOCAL','en','exportlocal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTMACRO','en','exportmacro');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTTYPE','en','exporttype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTVAR','en','exportvar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPOSETRANS','en','exposetrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALNAMECASEINSENSITIVE','en','externalnamecaseinsensitive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALNAMELEN','en','externalnamelen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALPREFIX','en','externalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALPREFIXEXCLUDE','en','externalprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNDEREF','en','fcnderef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNMACROS','en','fcnmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNPOST','en','fcnpost');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNUSE','en','fcnuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FIELDUSE','en','fielduse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FILESTATICPREFIX','en','filestaticprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FILESTATICPREFIXEXCLUDE','en','filestaticprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FIRSTCASE','en','firstcase');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FIXEDFORMALARRAY','en','fixedformalarray');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FLOATDOUBLE','en','floatdouble');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORBLOCK','en','forblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORCEHINTS','en','forcehints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FOREMPTY','en','forempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMALARRAY','en','formalarray');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMATCODE','en','formatcode');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMATCONST','en','formatconst');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMATTYPE','en','formattype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FRESHTRANS','en','freshtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FULLINITBLOCK','en','fullinitblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBALIAS','en','globalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBALPREFIX','en','globalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBALPREFIXEXCLUDE','en','globalprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBNOGLOBS','en','globnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBS','en','globs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBSIMPMODSNOTHING','en','globsimpmodsnothing');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBSTATE','en','globstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBUSE','en','globuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GNUEXTENSIONS','en','gnuextensions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IFBLOCK','en','ifblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IFEMPTY','en','ifempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IGNOREQUALS','en','ignorequals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IGNORESIGNS','en','ignoresigns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IMMEDIATETRANS','en','immediatetrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IMPLEMENTATIONOPTIONAL','en','implementationoptional');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IMPTYPE','en','imptype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCLUDENEST','en','includenest');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCOMPLETETYPE','en','incompletetype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCONDEFS','en','incondefs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCONDEFSLIB','en','incondefslib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INFLOOPS','en','infloops');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INFLOOPSUNCON','en','infloopsuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INITALLELEMENTS','en','initallelements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INITSIZE','en','initsize');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALGLOBS','en','internalglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALGLOBSNOGLOBS','en','internalglobsnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALNAMECASEINSENSITIVE','en','internalnamecaseinsensitive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALNAMELEN','en','internalnamelen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALNAMELOOKALIKE','en','internalnamelookalike');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISO99LIMITS','en','iso99limits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISOLIB','en','isolib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISORESERVED','en','isoreserved');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISORESERVEDINTERNAL','en','isoreservedinternal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITERPREFIX','en','iterprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITERPREFIXEXCLUDE','en','iterprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4LOW','en','its4low');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4MODERATE','en','its4moderate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4MOSTRISKY','en','its4mostrisky');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4RISKY','en','its4risky');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4VERYRISKY','en','its4veryrisky');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_KEEPTRANS','en','keeptrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_KEPTTRANS','en','kepttrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LEGACY','en','legacy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIBMACROS','en','libmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOOL','en','likelybool');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOUNDS','en','likelybounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOUNDSREAD','en','likelyboundsread');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOUNDSWRITE','en','likelyboundswrite');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOCALPREFIX','en','localprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOCALPREFIXEXCLUDE','en','localprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGINT','en','longint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGINTEGRAL','en','longintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGSIGNEDINTEGRAL','en','longsignedintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGUNSIGNEDINTEGRAL','en','longunsignedintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGUNSIGNEDUNSIGNEDINTEGRAL','en','longunsignedunsignedintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOOPLOOPBREAK','en','looploopbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOOPLOOPCONTINUE','en','looploopcontinue');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOOPSWITCHBREAK','en','loopswitchbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROASSIGN','en','macroassign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROCONSTDECL','en','macroconstdecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROCONSTDISTANCE','en','macroconstdistance');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACRODECL','en','macrodecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROEMPTY','en','macroempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROFCNDECL','en','macrofcndecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROMATCHNAME','en','macromatchname');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROPARAMS','en','macroparams');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROPARENS','en','macroparens');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROREDEF','en','macroredef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACRORET','en','macroret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROSTMT','en','macrostmt');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROUNRECOG','en','macrounrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROVARPREFIX','en','macrovarprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROVARPREFIXEXCLUDE','en','macrovarprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MAINTYPE','en','maintype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MATCHANYINTEGRAL','en','matchanyintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MATCHFIELDS','en','matchfields');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MAYALIASUNIQUE','en','mayaliasunique');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MEMTRANS','en','memtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MISPLACEDSHAREQUAL','en','misplacedsharequal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MISSCASE','en','misscase');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODGLOBS','en','modglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODGLOBSNOMODS','en','modglobsnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODGLOBSUNCHECKED','en','modglobsunchecked');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODINTERNALSTRICT','en','modinternalstrict');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODNOMODS','en','modnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODOBSERVER','en','modobserver');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODOBSERVERUNCON','en','modobserveruncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODS','en','mods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODSIMPNOGLOBS','en','modsimpnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODSTRICTGLOBSNOMODS','en','modstrictglobsnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODUNCON','en','moduncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODUNCONNOMODS','en','modunconnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MULTITHREADED','en','multithreaded');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTDEFINE','en','mustdefine');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTFREE','en','mustfree');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTFREEFRESH','en','mustfreefresh');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTFREEONLY','en','mustfreeonly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTMOD','en','mustmod');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTNOTALIAS','en','mustnotalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUTREP','en','mutrep');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEEDSPEC','en','needspec');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NESTCOMMENT','en','nestcomment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NESTEDEXTERN','en','nestedextern');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEVERINCLUDE','en','neverinclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEWDECL','en','newdecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEWREFTRANS','en','newreftrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEXTLINEMACROS','en','nextlinemacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NOEFFECT','en','noeffect');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NOEFFECTUNCON','en','noeffectuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NOPARAMS','en','noparams');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NORET','en','noret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULL','en','null');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLASSIGN','en','nullassign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLDEREF','en','nullderef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLINIT','en','nullinit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLPASS','en','nullpass');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLPTRARITH','en','nullptrarith');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLRET','en','nullret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLSTATE','en','nullstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLTERMINATED','en','nullterminated');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACT','en','numabstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTCAST','en','numabstractcast');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTINDEX','en','numabstractindex');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTLIT','en','numabstractlit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTPRINT','en','numabstractprint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMENUMMEMBERS','en','numenummembers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMLITERAL','en','numliteral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMSTRUCTFIELDS','en','numstructfields');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OBSERVERTRANS','en','observertrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OLDSTYLE','en','oldstyle');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ONLYTRANS','en','onlytrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ONLYUNQGLOBALTRANS','en','onlyunqglobaltrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OVERLOAD','en','overload');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OWNEDTRANS','en','ownedtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PARAMUSE','en','paramuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PORTABILITY','en','portability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_POSIXLIB','en','posixlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_POSIXSTRICTLIB','en','posixstrictlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDASSIGN','en','predassign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOL','en','predbool');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOLINT','en','predboolint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOLOTHERS','en','predboolothers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOLPTR','en','predboolptr');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREPROC','en','preproc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMMATCH','en','protoparammatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMNAME','en','protoparamname');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMPREFIX','en','protoparamprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMPREFIXEXCLUDE','en','protoparamprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PTRARITH','en','ptrarith');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PTRCOMPARE','en','ptrcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PTRNEGATE','en','ptrnegate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_READONLYSTRINGS','en','readonlystrings');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_READONLYTRANS','en','readonlytrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REALCOMPARE','en','realcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REALRELATECOMPARE','en','realrelatecompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDECL','en','redecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDEF','en','redef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDUNDANTCONSTRAINTS','en','redundantconstraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDUNDANTSHAREQUAL','en','redundantsharequal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REFCOUNTTRANS','en','refcounttrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RELAXQUALS','en','relaxquals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RELAXTYPES','en','relaxtypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REPEATUNRECOG','en','repeatunrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REPEXPOSE','en','repexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETALIAS','en','retalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETEXPOSE','en','retexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVAL','en','retval');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVALBOOL','en','retvalbool');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVALINT','en','retvalint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVALOTHER','en','retvalother');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SEFPARAMS','en','sefparams');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SEFUNCON','en','sefuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHADOW','en','shadow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHAREDTRANS','en','sharedtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHIFTIMPLEMENTATION','en','shiftimplementation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHIFTNEGATIVE','en','shiftnegative');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHORTINT','en','shortint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SINGLEINCLUDE','en','singleinclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SIZEOFFORMALARRAY','en','sizeofformalarray');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SIZEOFTYPE','en','sizeoftype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLASHSLASHCOMMENT','en','slashslashcomment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAK','en','slovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKCONSTS','en','slovakconsts');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKFCNS','en','slovakfcns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKMACROS','en','slovakmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKTYPES','en','slovaktypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKVARS','en','slovakvars');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SPECUNDECL','en','specundecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SPECUNDEF','en','specundef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STACKREF','en','stackref');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATEMERGE','en','statemerge');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATETRANSFER','en','statetransfer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATICINITTRANS','en','staticinittrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATICTRANS','en','statictrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTBRANCHSTATE','en','strictbranchstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTLIB','en','strictlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTOPS','en','strictops');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTUSERELEASED','en','strictusereleased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALLEN','en','stringliterallen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALNOROOM','en','stringliteralnoroom');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALNOROOMFINALNULL','en','stringliteralnoroomfinalnull');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALSMALLER','en','stringliteralsmaller');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALTOOLONG','en','stringliteraltoolong');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SUPERUSER','en','superuser');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SWITCHLOOPBREAK','en','switchloopbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SWITCHSWITCHBREAK','en','switchswitchbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SYNTAX','en','syntax');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SYSDIRS','en','sysdirs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SYSUNRECOG','en','sysunrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TAGPREFIX','en','tagprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TAGPREFIXEXCLUDE','en','tagprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TEMPTRANS','en','temptrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TOCTOU','en','toctou');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TOPUSE','en','topuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TRYTORECOVER','en','trytorecover');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPE','en','type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPEPREFIX','en','typeprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPEPREFIXEXCLUDE','en','typeprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPEUSE','en','typeuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNCHECKEDGLOBALIAS','en','uncheckedglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNCHECKEDMACROPREFIX','en','uncheckedmacroprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNCHECKEDMACROPREFIXEXCLUDE','en','uncheckedmacroprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIONDEF','en','uniondef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIXLIB','en','unixlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIXSTANDARD','en','unixstandard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIXSTRICTLIB','en','unixstrictlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNQUALIFIEDINITTRANS','en','unqualifiedinittrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNQUALIFIEDTRANS','en','unqualifiedtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNREACHABLE','en','unreachable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOG','en','unrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOGCOMMENTS','en','unrecogcomments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOGDIRECTIVE','en','unrecogdirective');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOGFLAGCOMMENTS','en','unrecogflagcomments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNSIGNEDCOMPARE','en','unsignedcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_USEDEF','en','usedef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_USERELEASED','en','usereleased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_USEVARARGS','en','usevarargs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_VARUSE','en','varuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_VOIDABSTRACT','en','voidabstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNFLAGS','en','warnflags');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNLINTCOMMENTS','en','warnlintcomments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNMISSINGGLOBS','en','warnmissingglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNMISSINGGLOBSNOGLOBS','en','warnmissingglobsnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNPOSIXHEADERS','en','warnposixheaders');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNRC','en','warnrc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNSYSFILES','en','warnsysfiles');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNUNIXLIB','en','warnunixlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNUSE','en','warnuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WHILEBLOCK','en','whileblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WHILEEMPTY','en','whileempty');


INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ABSTRACT','en','data abstraction barriers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ABSTRACTCOMPARE','en','object equality comparison on abstract type operands');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSALL','en','set accessmodule, accessfile and accessczech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSCZECH','en','allow access to abstract types by czech naming convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSCZECHOSLOVAK','en','allow access to abstract types by czechoslovak naming convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSFILE','en','allow access to abstract types by file name convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSMODULE','en','allow access to abstract types in definition module');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSSLOVAK','en','allow access to abstract types by slovak naming convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALIASUNIQUE','en','unique parameter is aliased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALLBLOCK','en','the body of an if, while or for statement is not a block (sets ifblock, whileblock and forblock)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALLEMPTY','en','an if, while or for statement has no body (sets ifempty, whileempty and forempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALLOCMISMATCH','en','type conversion involves storage of non-divisble size');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALWAYSEXITS','en','loop predicate always exits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ANNOTATIONERROR','en','annotation is used in inconsistent location');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ANSI89LIMITS','en','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ANSI89 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ASSIGNEXPOSE','en','abstract representation is exposed (assignments only)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BADFLAG','en','FLG_BADFlag');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BITWISESIGNED','en','a bitwise logical operator does not have unsigned operands');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOOLCOMPARE','en','comparison between bools (dangerous because of multiple true values)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOOLINT','en','bool and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOOLOPS','en','primitive operation (!, && or ||) does not has a boolean argument');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOUNDS','en','memory bounds checking (sets boundsread and boundswrite)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOUNDSREAD','en','possible out of bounds read');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOUNDSWRITE','en','possible buffer overflow from an out of bounds write');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BRANCHSTATE','en','storage has inconsistent states of alternate paths through a branch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BUFFEROVERFLOW','en','possible buffer overflow vulnerability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BUFFEROVERFLOWHIGH','en','likely buffer overflow vulnerability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CASEBREAK','en','non-empty case in a switch without preceding break');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CASTEXPOSE','en','abstract representation is exposed through a cast');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CASTFCNPTR','en','a pointer to a function is cast to a pointer to void (or vice versa)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARINDEX','en','char can be used to index arrays');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARINT','en','char and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARINTLITERAL','en','character constants (e.g., ''a'') can be used as ints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARUNSIGNEDCHAR','en','allow char and unsigned char types to match');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKEDGLOBALIAS','en','function returns with a checked global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKMODGLOBALIAS','en','function returns with a checkmod global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKPOST','en','unable to verify predicate in ensures clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKSTRICTGLOBALIAS','en','function returns with a checkstrict global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMMENTCHAR','en','set marker character for syntactic comments (default is ''@'')');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMMENTERROR','en','inconsistent syntactic comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMPDEF','en','parameter, return value or global completely defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMPDESTROY','en','all only references derivable from void pointer out only parameter are released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMPMEMPASS','en','actual parameter matches alias kind of formal parameter completely ');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTMACROS','en','check all macros without parameter lists as constants');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTPREFIX','en','set namespace prefix for constants');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTPREFIXEXCLUDE','en','the constprefix may not be used for non-constant identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTUSE','en','constant declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONTINUECOMMENT','en','line continuation marker (\) in comment before */ on same line');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONTROLNESTDEPTH','en','set maximum nesting depth of compound statements, iteration control structures, and selection control structures (ANSI89 minimum is 15; ISO99 is 63)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CPPNAMES','en','external or internal name is a C++ keyword or reserved word');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECH','en','czech naming convention (sets accessczech, czechfunctions, czechvars, czechconstants, czechenums, and czechmacros)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHCONSTS','en','czech naming convention violated in a constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHFCNS','en','czech naming convention violated in a function or iterator declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHMACROS','en','czech naming convention violated in an expanded macro name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAK','en','czech or slovak naming convention violated');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKCONSTS','en','czechoslovak naming convention violated in a constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKFCNS','en','czechoslovak naming convention violated in a function or iterator declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKMACROS','en','czechoslovak naming convention violated in an expanded macro name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKTYPES','en','czechoslovak naming convention violated in a user-defined type definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKVARS','en','czechoslovak naming convention violated in a variable declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHTYPES','en','czech naming convention violated in a user-defined type definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHVARS','en','czech naming convention violated in a variable declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEBUGFCNCONSTRAINT','en','debug function constraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DECLUNDEF','en','function or variable declared but never defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEEPBREAK','en','break inside nested while or for or switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEPARRAYS','en','array elements are dependent storage');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEPENDENTTRANS','en','dependent transfer errors');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DISTINCTEXTERNALNAMES','en','external name is not distinguishable from another external name using the number of significant characters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DISTINCTINTERNALNAMES','en','internal name is not distinguishable from another internal name using the number of significant characters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DUPLICATECASES','en','duplicate cases in switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DUPLICATEQUALS','en','report duplicate type qualifiers (e.g., unsigned unsigned)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ELSEIFCOMPLETE','en','if ... else if chains must have final else');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EMPTYRET','en','empty return in function declared to return value');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMINDEX','en','enum can be used to index arrays');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMINT','en','enum and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMMEMBERS','en','enum members must be int values');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMMEMUSE','en','member of an enum type not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMPREFIX','en','set namespace prefix for enum members');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMPREFIXEXCLUDE','en','the enumprefix may not be used for non-enum member identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EVALORDER','en','code has unspecified or implementation-dependent behavior because of order of evaluation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EVALORDERUNCON','en','code involving call to unspecified function has undefined or implementation-dependent behavior');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXITARG','en','argument to exit has implementation defined behavior');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTANY','en','variable, function or type exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTCONST','en','constant exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTFCN','en','function exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTHEADER','en','a declaration is exported but does not appear in a header file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTHEADERVAR','en','a variable declaration is exported but does not appear in a header file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTITER','en','constant exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTLOCAL','en','a declaration is exported but not used outside this module');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTMACRO','en','expanded macro exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTTYPE','en','type definition exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTVAR','en','variable exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPOSETRANS','en','exposure transfer errors');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALNAMECASEINSENSITIVE','en','alphabetic comparisons for external names are case-insensitive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALNAMELEN','en','set the number of significant characters in an external name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALPREFIX','en','set namespace prefix for external identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALPREFIXEXCLUDE','en','the externalprefix may not be used for non-external identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNDEREF','en','dereferencce of a function type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNMACROS','en','check all macros with parameter lists as functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNPOST','en','display function post conditions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNUSE','en','function declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FIELDUSE','en','field of structure type not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FILESTATICPREFIX','en','set namespace prefix for file static declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FILESTATICPREFIXEXCLUDE','en','the filestaticprefix may not be used for identifiers that are not file static');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FIRSTCASE','en','first statement in switch is not a case');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FIXEDFORMALARRAY','en','formal parameter of type array is declared with size');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FLOATDOUBLE','en','float and double are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORBLOCK','en','the body of a for statement is not a block');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORCEHINTS','en','provide a hint for every warnings');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FOREMPTY','en','a for statement has no body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMALARRAY','en','formal parameter is an array');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMATCODE','en','invalid format code in format string for printf or scanf-like function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMATCONST','en','format parameter is not a string constant (hence variable arguments cannot be typechecked)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMATTYPE','en','type-mismatch in parameter corresponding to format code in a printf or scanf-like function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FRESHTRANS','en','fresh storage transferred to non-only reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FULLINITBLOCK','en','initializer sets all fields');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBALIAS','en','function returns with global aliasing external state (sets checkstrictglobalias, checkedglobalias, checkmodglobalias and uncheckedglobalias)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBALPREFIX','en','set namespace prefix for global variables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBALPREFIXEXCLUDE','en','the globalprefix may not be used for non-global identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBNOGLOBS','en','use of checked global in a function with no globals list or specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBS','en','undocumented use of a checked global variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBSIMPMODSNOTHING','en','functions declared with a globals list but no modifies clause are assumed to modify nothing');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBSTATE','en','returns with global in inconsistent state (null or undefined)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBUSE','en','global listed for a function not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GNUEXTENSIONS','en','support some gnu (gcc) language extensions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IFBLOCK','en','the body of an if statement is not a block');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IFEMPTY','en','an if statement has no body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IGNOREQUALS','en','ignore type qualifiers (long, short, unsigned)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IGNORESIGNS','en','ignore signs in type comparisons (unsigned matches signed)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IMMEDIATETRANS','en','an immediate address (result of &) is transferred inconsistently');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IMPLEMENTATIONOPTIONAL','en','declarator is implementation optional (ISO99 does not require an implementation to provide it)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IMPTYPE','en','variable declaration has unknown (implicitly int) type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCLUDENEST','en','set maximum number of nested #include files (ANSI89 minimum is 8; ISO99 is 63)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCOMPLETETYPE','en','formal parameter has an incomplete type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCONDEFS','en','function, variable or constant redefined with inconsistent type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCONDEFSLIB','en','function, variable or constant defined in a library is redefined with inconsistent type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INFLOOPS','en','likely infinite loop is detected');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INFLOOPSUNCON','en','likely infinite loop is detected (may result from unconstrained function)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INITALLELEMENTS','en','initializer defines all array elements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INITSIZE','en','initializer defines extra array elements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALGLOBS','en','use of internalState');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALGLOBSNOGLOBS','en','use of internalState (in function with no globals list)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALNAMECASEINSENSITIVE','en','set whether case is significant an internal names (-internalnamecaseinsensitive means case is significant)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALNAMELEN','en','set the number of significant characters in an internal name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALNAMELOOKALIKE','en','lookalike characters match in internal names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISO99LIMITS','en','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ISO99 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISOLIB','en','use normal standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISORESERVED','en','external name conflicts with name reserved for system or standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISORESERVEDINTERNAL','en','internal name conflicts with name reserved for system or standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITERPREFIX','en','set namespace prefix for iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITERPREFIXEXCLUDE','en','the iterprefix may not be used for non-iter identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4LOW','en','risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4MODERATE','en','moderately risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4MOSTRISKY','en','most risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4RISKY','en','risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4VERYRISKY','en','very risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_KEEPTRANS','en','keep storage transferred inconsistently');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_KEPTTRANS','en','kept storage transferred to non-temporary reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LEGACY','en','legacy declaration in Unix Standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIBMACROS','en','check all macros with declarations in library as functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOOL','en','type name is probably a boolean type but does not match default boolean type name, bool", and alternate name is not set"');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOUNDS','en','memory bounds checking (sets likelyboundsread and likelyboundswrite)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOUNDSREAD','en','likely out of bounds read');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOUNDSWRITE','en','likely buffer overflow from an out of bounds write');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOCALPREFIX','en','set namespace prefix for local variables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOCALPREFIXEXCLUDE','en','the localprefix may not be used for non-local identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGINT','en','long int and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGINTEGRAL','en','allow long type to match an arbitrary integral type (e.g., dev_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGSIGNEDINTEGRAL','en','allow long type to match an arbitrary signed integral type (e.g., ssize_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGUNSIGNEDINTEGRAL','en','allow long unsigned type to match an arbitrary integral type (e.g., dev_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGUNSIGNEDUNSIGNEDINTEGRAL','en','allow long unsigned type to match an arbitrary unsigned integral type (e.g., size_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOOPLOOPBREAK','en','break inside nested while or for');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOOPLOOPCONTINUE','en','continue inside nested loop');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOOPSWITCHBREAK','en','break in switch inside loop');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROASSIGN','en','assignment to a macro parameter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROCONSTDECL','en','non-parameterized macro without prototype or specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROCONSTDISTANCE','en','macro constant name does not match nearby name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACRODECL','en','macro without prototype or specification (sets macrofcndecl and macroconstdecl)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROEMPTY','en','macro definition for is empty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROFCNDECL','en','parameterized macro without prototype or specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROMATCHNAME','en','macro definition does not match iter or constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROPARAMS','en','macro parameter not used exactly once');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROPARENS','en','macro parameter used without parentheses (in potentially dangerous context)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROREDEF','en','macro redefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACRORET','en','return statement in macro body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROSTMT','en','macro definition is syntactically not equivalent to function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROUNRECOG','en','unrecognized identifier in macro');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROVARPREFIX','en','set namespace prefix for variables declared in a macro body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROVARPREFIXEXCLUDE','en','the macrovarprefix may not be used for non-macro variables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MAINTYPE','en','type of main does not match expected type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MATCHANYINTEGRAL','en','allow any intergral type to match an arbitrary integral type (e.g., dev_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MATCHFIELDS','en','struct or enum type redefined with inconsistent fields or members');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MAYALIASUNIQUE','en','unique parameter may be aliased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MEMTRANS','en','memory transfer errors (sets all *trans flags)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MISPLACEDSHAREQUAL','en','declaration of unsharable storage uses sharing annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MISSCASE','en','switch on enum type missing case for some value');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODGLOBS','en','undocumented modification of a checked global variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODGLOBSNOMODS','en','undocumented modification of a checked global variable in a function declared with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODGLOBSUNCHECKED','en','undocumented modification of an unchecked checked global variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODINTERNALSTRICT','en','possible modification of internal storage through function call');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODNOMODS','en','modification in a function with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODOBSERVER','en','possible modification of observer storage');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODOBSERVERUNCON','en','possible modification of observer storage through unconstrained call');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODS','en','unspecified modification of caller-visible state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODSIMPNOGLOBS','en','functions declared with a modifies clause but no globals list are assumed to use no globals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODSTRICTGLOBSNOMODS','en','undocumented modification of a strict checked global variable in a function declared with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODUNCON','en','possible modification through a call to an unconstrained function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODUNCONNOMODS','en','possible modification through a call to an unconstrained function in a function with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MULTITHREADED','en','function is not reentrant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTDEFINE','en','out storage not defined before return or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTFREE','en','fresh or only storage not released before return or scope exit (sets mustfreefresh and mustfreeonly)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTFREEFRESH','en','freshly allocated storage not released before return or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTFREEONLY','en','only storage not released before return or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTMOD','en','specified modification is not detected');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTNOTALIAS','en','temp storage aliased at return point or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUTREP','en','representation of mutable type has sharing semantics');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEEDSPEC','en','information in specifications is not also included in syntactic comments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NESTCOMMENT','en','comment begins inside comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NESTEDEXTERN','en','an extern declaration is inside a function scope');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEVERINCLUDE','en','optimize header inclusion to not include any header files');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEWDECL','en','report new global declarations in source files');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEWREFTRANS','en','new reference transfer to reference counted reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEXTLINEMACROS','en','the line after a constant or iter declaration must be a macro definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NOEFFECT','en','statement with no effect');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NOEFFECTUNCON','en','statement with no effect (except possibly through call to unconstrained function)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NOPARAMS','en','function declaration has no parameter list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NORET','en','path with no return detected in non-void function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULL','en','misuses of null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLASSIGN','en','inconsistent assignment or initialization involving null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLDEREF','en','possible dereferencce of null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLINIT','en','inconsistent initialization involving null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLPASS','en','possibly null pointer passed as formal with no null annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLPTRARITH','en','arithmetic involving possibly null pointer and integer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLRET','en','possibly null pointer returned as result with no null annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLSTATE','en','possibly null pointer reachable from a reference with no null annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLTERMINATED','en','misuse of nullterminated allocation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACT','en','data abstraction barriers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTCAST','en','numeric literal cast to numabstract type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTINDEX','en','a numabstract type can be used to index an array');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTLIT','en','numeric literal can used as numabstract type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTPRINT','en','a numabstract value is printed using %d format code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMENUMMEMBERS','en','set maximum number of members of an enum (ANSI89 minimum is 127; ISO99 is 1023)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMLITERAL','en','int literals can be reals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMSTRUCTFIELDS','en','set maximum number of fields in a struct or union (ANSI89 minimum is 127; ISO99 is 1023)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OBSERVERTRANS','en','observer transfer errors');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OLDSTYLE','en','old style function definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ONLYTRANS','en','only storage transferred to non-only reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ONLYUNQGLOBALTRANS','en','only storage transferred to an unqualified global or static reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OVERLOAD','en','library function overloaded');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OWNEDTRANS','en','owned storage transferred to non-owned reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PARAMUSE','en','function parameter not used ');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PORTABILITY','en','function may have undefined behavior');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_POSIXLIB','en','use POSIX standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_POSIXSTRICTLIB','en','use strict POSIX standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDASSIGN','en','condition test (if, while or for) is an assignment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOL','en','type of condition test (if, while or for) not bool (sets predboolint, predboolptr and predboolothers)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOLINT','en','type of condition test (if, while or for) is an integral type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOLOTHERS','en','type of condition test (if, while or for) not bool, int or pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOLPTR','en','type of condition test (if, while or for) is a pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREPROC','en','preprocessing error');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMMATCH','en','the name of a parameter in a function prototype and corresponding declaration must match (after removing the protoparamprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMNAME','en','a parameter in a function prototype has a name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMPREFIX','en','set namespace prefix for parameters in function prototype declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMPREFIXEXCLUDE','en','the protoparamprefix may not be used for non-declaraction parameter identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PTRARITH','en','arithmetic involving pointer and integer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PTRCOMPARE','en','comparison between pointer and number');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PTRNEGATE','en','allow ! to be used on pointer operand');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_READONLYSTRINGS','en','string literals are read-only (error if one is modified or released)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_READONLYTRANS','en','report memory transfer errors for initializations to read-only string literals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REALCOMPARE','en','dangerous equality comparison between reals (dangerous because of inexact floating point representations)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REALRELATECOMPARE','en','possibly dangerous relational comparison between reals (dangerous because of inexact floating point representations)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDECL','en','function or variable redeclared');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDEF','en','function or variable redefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDUNDANTCONSTRAINTS','en','display seemingly redundant constraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDUNDANTSHAREQUAL','en','declaration uses observer qualifier that is always true');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REFCOUNTTRANS','en','reference counted storage is transferred in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RELAXQUALS','en','report qualifier mismatches only if dangerous');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RELAXTYPES','en','allow all numeric types to match');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REPEATUNRECOG','en','do not suppress repeated unrecognized identifier messages (instead of only reporting the first error)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REPEXPOSE','en','abstract representation is exposed (sets assignexpose, retexpose, and castexpose)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETALIAS','en','function returns alias to parameter or global');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETEXPOSE','en','abstract representation is exposed (return values only)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVAL','en','return value ignored (sets retvalint, retvalbool and retvalother)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVALBOOL','en','return value of manifest type bool ignored');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVALINT','en','return value of type int ignored');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVALOTHER','en','return value of type other than bool or int ignored');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SEFPARAMS','en','a parameter with side-effects is passed as a sef parameter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SEFUNCON','en','a parameter with unconstrained side-effects is passed as a sef parameter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHADOW','en','declaration reuses name visible in outer scope');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHAREDTRANS','en','shared storage transferred to non-shared reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHIFTIMPLEMENTATION','en','a shift left operand may be negative');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHIFTNEGATIVE','en','a shift right operand may be negative');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHORTINT','en','short int and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SINGLEINCLUDE','en','optimize header inclusion to eliminate redundant includes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SIZEOFFORMALARRAY','en','sizeof operator has an array formal parameter argument');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SIZEOFTYPE','en','sizeof operator has a type argument');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLASHSLASHCOMMENT','en','use of // comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAK','en','slovak naming convention violated');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKCONSTS','en','slovak naming convention violated in a constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKFCNS','en','slovak naming convention violated in a function or iterator declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKMACROS','en','slovak naming convention violated in an expanded macro name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKTYPES','en','slovak naming convention violated in a use-defined type definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKVARS','en','slovak naming convention violated in a variable declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SPECUNDECL','en','function or variable specified but never declared in a source file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SPECUNDEF','en','function or variable specified but never defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STACKREF','en','external reference to stack-allocated storage is created');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATEMERGE','en','control paths merge with storage in incompatible states');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATETRANSFER','en','storage has been transfered with invalid state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATICINITTRANS','en','static storage is used as an initial value in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATICTRANS','en','static storage is transferred in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTBRANCHSTATE','en','storage through array fetch has inconsistent states of alternate paths through a branch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTLIB','en','interpret standard library strictly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTOPS','en','primitive operation does not type check strictly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTUSERELEASED','en','element used after it may have been released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALLEN','en','set maximum length of string literals (ANSI89 minimum is 509; ISO99 is 4095)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALNOROOM','en','string literal leaves no room for null terminator');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALNOROOMFINALNULL','en','string literal leaves no room for null terminator');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALSMALLER','en','string literal is smaller than the char array it is assigned to');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALTOOLONG','en','string literal too long for character array');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SUPERUSER','en','function is restricted to superusers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SWITCHLOOPBREAK','en','break in loop inside switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SWITCHSWITCHBREAK','en','break in switch inside switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SYNTAX','en','syntax error in parsing');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SYSDIRS','en','set directories for system files (default /usr/include). Separate directories with path separator (colons in Unix, semi-colons in Windows). Flag settings propagate to files in a system directory. If -sysdirerrors is set, no errors are reported for files in system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SYSUNRECOG','en','report unrecognized identifiers with system (__) prefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TAGPREFIX','en','set namespace prefix for struct, union and enum tags');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TAGPREFIXEXCLUDE','en','the tagprefix may not be used for non-tag identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TEMPTRANS','en','temp storage transferred to non-temporary reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TOCTOU','en','possible time of check, time of use vulnerability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TOPUSE','en','declaration at top level not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TRYTORECOVER','en','try to recover from parse error');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPE','en','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPEPREFIX','en','set namespace prefix for user-defined types');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPEPREFIXEXCLUDE','en','the typeprefix may not be used for identifiers that are not type names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPEUSE','en','type declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNCHECKEDGLOBALIAS','en','function returns with an unchecked global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNCHECKEDMACROPREFIX','en','set namespace prefix for unchecked macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNCHECKEDMACROPREFIXEXCLUDE','en','the uncheckmacroprefix may not be used for identifiers that are not unchecked macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIONDEF','en','at least one field of a union must be defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIXLIB','en','use UNIX (sort-of) standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIXSTANDARD','en','function is not required in Standard UNIX Specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIXSTRICTLIB','en','use strict version of UNIX (sort-of) library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNQUALIFIEDINITTRANS','en','unqualified storage is used as an initial value in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNQUALIFIEDTRANS','en','unqualified storage is transferred in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNREACHABLE','en','unreachable code detected');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOG','en','unrecognized identifier');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOGCOMMENTS','en','stylized comment is unrecognized');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOGDIRECTIVE','en','unrecognized pre-processor directive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOGFLAGCOMMENTS','en','stylized flag comment uses an unrecognized flag');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNSIGNEDCOMPARE','en','comparison using <, <=, >= between an unsigned integral and zero constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_USEDEF','en','use before definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_USERELEASED','en','storage used after release');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_USEVARARGS','en','non-standard <varargs.h> included');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_VARUSE','en','variable declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_VOIDABSTRACT','en','void * matches pointers to abstract types, casting ok (dangerous)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNFLAGS','en','warn when command line sets flag in abnormal way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNLINTCOMMENTS','en','warn when a traditional lint comment is used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNMISSINGGLOBS','en','global variable used in modifies clause is not listed in globals list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNMISSINGGLOBSNOGLOBS','en','global variable used in modifies clause in a function with no globals list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNPOSIXHEADERS','en','a POSIX header is included, but the POSIX library is not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNRC','en','warn when there are problems with reading the initialization files');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNSYSFILES','en','Splint has been run on a system file, by default no errors are reported for system files.  Use +systemdirerrors if you want splint to report errors in system files.  A file is considered a system file if it is in a system directory or a subdirectory of a system directory.  The sysdirs flag can be used to control the directories treated as system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNUNIXLIB','en','warn when the unix library is used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNUSE','en','warn when declaration marked with warn is used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WHILEBLOCK','en','the body of a while statement is not a block');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WHILEEMPTY','en','a while statement has no body');


INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ABSTRACT','en','An abstraction barrier is broken. If necessary, use /*@access <type>@*/ to allow access to an abstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ABSTRACTCOMPARE','en','An object comparison (== or !=) is used on operands of abstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSALL','en','Sets accessmodule, accessfile and accessczech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSCZECH','en','The representation of an abstract type named <t> is accessible in the definition of a function or constant named <t>_<name>');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSCZECHOSLOVAK','en','The representation of an abstract type named <t> is accessible in the definition of a function or constant named <t>_<name> or <t><Name>');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSFILE','en','The representation of an abstract type named <t> is accessible anywhere in a file named <t>.<x>.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSMODULE','en','The representation of an abstract type defined in <M>.<x> is accessible anywhere in a file named <M>.<y>.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSSLOVAK','en','The representation of an abstract type named <t> is accessible in the definition of a function or constant named <t><Name>');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALIASUNIQUE','en','A unique or only parameter is aliased by some other parameter or visible global.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALLBLOCK','en','Body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALLEMPTY','en','an if, while or for statement has no body (sets ifempty, whileempty and forempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALLOCMISMATCH','en','type conversion involves storage of non-divisble size');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALWAYSEXITS','en','loop predicate always exits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ANNOTATIONERROR','en','A declaration uses an invalid annotation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ANSI89LIMITS','en','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ANSI89 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ASSIGNEXPOSE','en','Storage internal to the representation of an abstract type is assigned to an external pointer. This means clients may have access to a pointer into the abstract representation. If the external pointer is a parameter, the exposed qualifier can be used to allow the assignment, however, this is considered dangerous programming practice.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BADFLAG','en','warn about bad command line flags');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BITWISESIGNED','en','An operand to a bitwise operator is not an unsigned values.  This may have unexpected results depending on the signed representations.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOOLCOMPARE','en','Two bool values are compared directly using a C primitive. This may produce unexpected results since all non-zero values are considered true, so different true values may not be equal. The file bool.h (included in splint/lib) provides bool_equal for safe bool comparisons.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOOLINT','en','To make bool and int types equivalent, use +boolint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOOLOPS','en','The operand of a boolean operator is not a boolean. Use +ptrnegate to allow ! to be used on pointers.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOUNDS','en','Memory read or write may be out of bounds of allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOUNDSREAD','en','A memory read references memory beyond the allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOUNDSWRITE','en','A memory write may write to an address beyond the allocated buffer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BRANCHSTATE','en','The state of a variable is different depending on which branch is taken. This means no annotation can sensibly be applied to the storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BUFFEROVERFLOW','en','Use of function that may lead to buffer overflow.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BUFFEROVERFLOWHIGH','en','Use of function that may lead to buffer overflow.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CASEBREAK','en','Execution falls through from the previous case (use /*@fallthrough@*/ to mark fallthrough cases).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CASTEXPOSE','en','Storage internal to the representation of an abstract type is exposed through a type cast. This means clients may have access to a pointer into the abstract representation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CASTFCNPTR','en','A pointer to a function is cast to (or used as) a pointer to void (or vice versa).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARINDEX','en','To allow char types to index arrays, use +charindex.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARINT','en','To make char and int types equivalent, use +charint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARINTLITERAL','en','A character constant is used as an int. Use +charintliteral to allow character constants to be used as ints.  (This is safe since the actual type of a char constant is int.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARUNSIGNEDCHAR','en','To allow char and unsigned char types to match use +charunsignedchar.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKEDGLOBALIAS','en','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKMODGLOBALIAS','en','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKPOST','en','The function implementation may not satisfy a post condition given in an ensures clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKSTRICTGLOBALIAS','en','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMMENTCHAR','en','Set the marker character for syntactic comments. Comments beginning with /*<char> are interpreted by Splint, where <char> is the comment marker character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMMENTERROR','en','A syntactic comment is used inconsistently.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMPDEF','en','Storage derivable from a parameter, return value or global is not defined. Use /*@out@*/ to denote passed or returned storage which need not be defined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMPDESTROY','en','A storage leak due to incomplete deallocation of a structure or deep pointer is suspected. Unshared storage that is reachable from a reference that is being deallocated has not yet been deallocated. Splint assumes when an object is passed as an out only void pointer that the outer object will be deallocated, but the inner objects will not.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMPMEMPASS','en','Storage derivable from a parameter does not match the alias kind expected for the formal parameter.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTMACROS','en','Every non-parameterized macro (not preceded by /*@notfunction@*/) is checked as a constant.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTPREFIX','en','A constant does not start with the constantprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTPREFIXEXCLUDE','en','An identifier that is not a constant starts with the constantprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTUSE','en','A constant is declared but not used. Use unused in the constant declaration to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONTINUECOMMENT','en','A line continuation marker (\) appears inside a comment on the same line as the comment close. Preprocessors should handle this correctly, but it causes problems for some preprocessors.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONTROLNESTDEPTH','en','Maximum number of control levels exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CPPNAMES','en','External name is a C++ keyword or reserved word. This could lead to problems if the code is compiled with a C++ compiler.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECH','en','Name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHCONSTS','en','Constant name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHFCNS','en','Function or iterator name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHMACROS','en','Expanded macro name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAK','en','Name is not consistent with either Czech or Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKCONSTS','en','Constant name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKFCNS','en','Function name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKMACROS','en','Expanded macro name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKTYPES','en','Type name is not consistent with Czechoslovak naming convention. Czechoslovak type names may not include uppercase letters or the underscore character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKVARS','en','Variable name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHTYPES','en','Type name is not consistent with Czech naming convention. Czech type names must not use the underscore character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHVARS','en','Variable name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEBUGFCNCONSTRAINT','en','Perform buffer overflow checking even if the errors would be surpressed.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DECLUNDEF','en','A function or variable is declared, but not defined in any source code file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEEPBREAK','en','A break statement appears inside the body of a nested while, for or switch statement. Sets looploopbreak, loopswitchbreak, switchloopbreak, switchswitchbreak, and looploopcontinue.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEPARRAYS','en','When an element is fetched from an array, Splint analysis is not able to determine if the same element is reused. If +deparrays, Splint will mark local storage assigned from array fetches as dependent.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEPENDENTTRANS','en','Dependent storage is transferred to a non-dependent reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DISTINCTEXTERNALNAMES','en','An external name is not distinguishable from another external name using the number of significant characters. According to ANSI Standard (3.1), an implementation may only consider the first 6 characters significant, and ignore alphabetical case distinctions (ISO C99 requires 31). The +externalnamelen <n> flag may be used to change the number of significant characters, and -externalnamecaseinsensitive to make alphabetical case significant in external names.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DISTINCTINTERNALNAMES','en','An internal name is not distinguishable from another internal name using the number of significant characters. According to ANSI89 Standard (3.1), an implementation may only consider the first 31 characters significant (ISO C99 specified 63). The +internalnamelen <n> flag changes the number of significant characters, -internalnamecaseinsensitive to makes alphabetical case significant, and +internalnamelookalike to make similar-looking characters non-distinct.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DUPLICATECASES','en','Duplicate cases in switch.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DUPLICATEQUALS','en','Duplicate type qualifiers not supported by ISO standard.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ELSEIFCOMPLETE','en','There is no final else following an else if construct.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EMPTYRET','en','empty return in function declared to return value');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMINDEX','en','To allow enum types to index arrays, use +enumindex.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMINT','en','To make enum and int types equivalent, use +enumint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMMEMBERS','en','Type of initial values for enum members must be int.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMMEMUSE','en','A member of an enum type is never used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMPREFIX','en','An enum member does not start with the enumprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMPREFIXEXCLUDE','en','An identifier that is not an enum member starts with the enumprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EVALORDER','en','Code has unspecified behavior. Order of evaluation of function parameters or subexpressions is not defined, so if a value is used and modified in different places not separated by a sequence point constraining evaluation order, then the result of the expression is unspecified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EVALORDERUNCON','en','Code involving a call to function with no modifies or globals clause may have undefined or implementation-dependent behavior (Splint assumes the unconstrained call may modify any reachable state or use any global). Add a specification for the function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXITARG','en','The argument to exit should be 0, EXIT_SUCCESS or EXIT_FAILURE');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTANY','en','A variable, function or type is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTCONST','en','A constant is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTFCN','en','A function is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTHEADER','en','A declaration is exported, but does not appear in a header file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTHEADERVAR','en','A variable declaration is exported, but does not appear in a header file. (Used with exportheader.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTITER','en','A constant is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTLOCAL','en','A declaration is exported, but not used outside this module. Declaration can use static qualifier.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTMACRO','en','A macro is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTTYPE','en','A type is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTVAR','en','A variable is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPOSETRANS','en','Exposed storage is transferred to a non-exposed, non-observer reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALNAMECASEINSENSITIVE','en','Make alphabetic case insignificant in external names. By ANSI89 standard, case need not be significant in an external name. If +distinctexternalnames is not set, sets +distinctexternalnames with unlimited external name length.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALNAMELEN','en','Sets the number of significant characters in an external name (default is 6 for old ANSI89 limit, C99 requires 31). Sets +distinctexternalnames.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALPREFIX','en','An external identifier does not start with the externalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALPREFIXEXCLUDE','en','An identifier that is not external starts with the externalprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNDEREF','en','A function type is dereferenced.  The ANSI standard allows this because of implicit conversion of function designators, however the dereference is unnecessary.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNMACROS','en','Every parameterized macro (not preceded by /*@notfunction@*/) is checked as a function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNPOST','en','Display function post conditions.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNUSE','en','A function is declared but not used. Use /*@unused@*/ in front of function header to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FIELDUSE','en','A field is present in a structure type but never used. Use /*@unused@*/ in front of field declaration to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FILESTATICPREFIX','en','A file-static identifier does not start with the filestaticprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FILESTATICPREFIXEXCLUDE','en','An identifier that is not file static starts with the filestaticprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FIRSTCASE','en','The first statement after a switch is not a case.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FIXEDFORMALARRAY','en','A formal parameter is declared as an array with size.  The size of the array is ignored in this context, since the array formal parameter is treated as a pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FLOATDOUBLE','en','To make float and double types equivalent, use +floatdouble.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORBLOCK','en','Loop body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORCEHINTS','en','Provide a hint for every warning');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FOREMPTY','en','For statement has no body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMALARRAY','en','A formal parameter is declared as an array.  This can be confusing, since a formal array parameter is treated as a pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMATCODE','en','Format code in a format string is not valid.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMATCONST','en','Format parameter is not known at compile-time.  This can lead to security vulnerabilities because the arguments cannot be type checked.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMATTYPE','en','Type of parameter is not consistent with corresponding code in format string.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FRESHTRANS','en','Fresh storage (newly allocated in this function) is transferred in a way that the obligation to release storage is not propagated.  Use the /*@only@*/ annotation to indicate the a return value is the only reference to the returned storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FULLINITBLOCK','en','Initializer does not set every field in the structure.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBALIAS','en','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBALPREFIX','en','A global variable does not start with the globalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBALPREFIXEXCLUDE','en','An identifier that is not a global variable starts with the globalprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBNOGLOBS','en','A specified global variable is used in the function, but not listed in its globals list. Without +globnoglobs, only globals declared with /*@checkedstrict@*/ will produce use errors in functions without globals lists. The /*@globals ... @*/ control comment can be used to give a globals list for an unspecified function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBS','en','A checked global variable is used in the function, but not listed in its globals clause. By default, only globals specified in .lcl files are checked. To check all globals, use +allglobals. To check globals selectively use /*@checked@*/ in the global declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBSIMPMODSNOTHING','en','An implicit modifies nothing clause is assumed for a function declared with a globals list but not modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBSTATE','en','A global variable does not satisfy its annotations when control is transferred.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBUSE','en','A global variable listed in the function''s globals list is not used in the body of the function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GNUEXTENSIONS','en','ANSI C does not allow some language features supported by gcc and other compilers. Use +gnuextensions to allow some of these extensions.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IFBLOCK','en','If body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IFEMPTY','en','If statement has no body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IGNOREQUALS','en','To ignore type qualifiers in type comparisons use +ignorequals.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IGNORESIGNS','en','To ignore signs in type comparisons use +ignoresigns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IMMEDIATETRANS','en','An immediate address (result of & operator) is transferred inconsistently.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IMPLEMENTATIONOPTIONAL','en','Use of a declarator that is implementation optional, not required by ISO99.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IMPTYPE','en','A variable declaration has no explicit type.  The type is implicitly int.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCLUDENEST','en','Maximum number of nested #include files exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCOMPLETETYPE','en','A formal parameter is declared with an incomplete type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCONDEFS','en','A function, variable or constant is redefined with a different type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCONDEFSLIB','en','A function, variable or constant previously defined in a library is redefined with a different type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INFLOOPS','en','This appears to be an infinite loop. Nothing in the body of the loop or the loop test modifies the value of the loop test. Perhaps the specification of a function called in the loop body is missing a modification.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INFLOOPSUNCON','en','This appears to be an infinite loop. Nothing in the body of the loop or the loop test modifies the value of the loop test. There may be a modification through a call to an unconstrained function, or an unconstrained function in the loop test may use a global variable modified by the loop body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INITALLELEMENTS','en','Initializer does not define all elements of a declared array.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INITSIZE','en','Initializer block contains more elements than the size of a declared array.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALGLOBS','en','A called function uses internal state, but the globals list for the function being checked does not include internalState');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALGLOBSNOGLOBS','en','A called function uses internal state, but the function being checked has no globals list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALNAMECASEINSENSITIVE','en','Set whether case is significant an internal names (-internalnamecaseinsensitive means case is significant). By ANSI89 default, case is not significant.  If +distinctinternalnames is not set, sets +distinctinternalnames with unlimited internal name length.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALNAMELEN','en','Sets the number of significant characters in an internal name (ANSI89 default is 31.)  Sets +distinctinternalnames.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALNAMELOOKALIKE','en','Set whether similar looking characters (e.g., 1 and l) match in internal names.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISO99LIMITS','en','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ISO99 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISOLIB','en','Library based on the ISO standard library specification is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISORESERVED','en','External name is reserved for system use by ISO C99 standard.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISORESERVEDINTERNAL','en','Internal name is reserved for system in ISO C99 standard (this should not be necessary unless you are worried about C library implementations that violate the standard and use macros).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITERPREFIX','en','An iter does not start with the iterator prefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITERPREFIXEXCLUDE','en','An identifier that is not a iter starts with the iterprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4LOW','en','Security vulnerability classified as risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4MODERATE','en','Security vulnerability classified as moderate risk in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4MOSTRISKY','en','Security vulnerability classified as most risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4RISKY','en','Security vulnerability classified as risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4VERYRISKY','en','Security vulnerability classified as very risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_KEEPTRANS','en','Keep storage is transferred inconsistently --- either in a way that may add a new alias to it, or release it.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_KEPTTRANS','en','storage is transferred to a non-temporary reference after being passed as keep parameter. The storage may be released or new aliases created.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LEGACY','en','Use of a declarator that is marked as a legacy entry in the Unix Standard.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIBMACROS','en','Every macro declared in the load library is checked.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOOL','en','Use the -booltype, -boolfalse and -booltrue flags to change the name of the default boolean type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOUNDS','en','Memory read or write may be out of bounds of allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOUNDSREAD','en','A memory read references memory beyond the allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOUNDSWRITE','en','A memory write may write to an address beyond the allocated buffer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOCALPREFIX','en','A local variable does not start with the localprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOCALPREFIXEXCLUDE','en','An identifier that is not a local variable starts with the localprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGINT','en','To make long int and int types equivalent, use +longint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGINTEGRAL','en','To allow arbitrary integral types to match long unsigned, use +longintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGSIGNEDINTEGRAL','en','To allow arbitrary signed integral types to match long unsigned, use +longsignedintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGUNSIGNEDINTEGRAL','en','To allow arbitrary integral types to match long unsigned, use +longunsignedintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGUNSIGNEDUNSIGNEDINTEGRAL','en','To allow arbitrary unsigned integral types to match long unsigned, use +longunsignedunsignedintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOOPLOOPBREAK','en','A break statement appears inside the body of a nested while or for statement. This is perfectly reasonable code, but check that the break is intended to break only the inner loop. The break statement may be preceded by /*@innerbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOOPLOOPCONTINUE','en','A continue statement appears inside a loop within a loop. This is perfectly reasonable code, but check that the continue is intended to continue only the inner loop. The continue statement may be preceded by /*@innercontinue@*/ to suppress the message for this continue only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOOPSWITCHBREAK','en','A break statement appears inside a switch statement within a while or for loop. This is perfectly reasonable code, but check that the break is intended to break only the inner loop. The break statement may be preceded by /*@switchbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROASSIGN','en','A macro parameter is used as the left side of an assignment expression. This exhibits behavior that could not be implemented by a function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROCONSTDECL','en','Macro constant has no declaration. Use /*@constant ...@*/ to declare the macro.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROCONSTDISTANCE','en','Macro constant name does matches name of a previous declaration, but they are not near each other.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACRODECL','en','Argument checking cannot be done well for macros without prototypes or specifications, since the types of the arguments are unknown.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROEMPTY','en','A macro definition has no body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROFCNDECL','en','Function macro has no declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROMATCHNAME','en','A iter or constant macro is defined using a different name from the one used in the previous syntactic comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROPARAMS','en','A macro parameter is not used exactly once in all possible invocations of the macro. To behave like a function, each macro parameter must be used exactly once on all invocations of the macro so that parameters with side-effects are evaluated exactly once. Use /*@sef@*/ to denote parameters that must be side-effect free.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROPARENS','en','A macro parameter is used without parentheses. This could be dangerous if the macro is invoked with a complex expression and precedence rules will change the evaluation inside the macro.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROREDEF','en','A macro is defined in more than one place.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACRORET','en','The body of a macro declared as a function uses a return statement. This exhibits behavior that could not be implemented by a function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROSTMT','en','A macro is defined in a way that may cause syntactic problems. If the macro returns a value, use commas to separate expressions; otherwise, use do { <macro body> } while (FALSE) construct.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROUNRECOG','en','An unrecognized identifier appears in a macro. If the identifier is defined before the macro is used, then this is okay.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROVARPREFIX','en','A variable declared in a macro body does not start with the macrovarprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROVARPREFIXEXCLUDE','en','A variable declared outside a macro body starts with the macrovarprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MAINTYPE','en','The function main does not match the expected type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MATCHANYINTEGRAL','en','To allow arbitrary integral types to match any integral type, use +matchanyintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MATCHFIELDS','en','A struct, union or enum type is redefined with inconsistent fields or members.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MAYALIASUNIQUE','en','A unique or only parameter may be aliased by some other parameter or visible global.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MEMTRANS','en','Memory is transferred in a way that violates annotations.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MISPLACEDSHAREQUAL','en','A declaration of an unsharable object uses a sharing annotation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MISSCASE','en','Not all values in an enumeration are present as cases in the switch.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODGLOBS','en','A checked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODGLOBSNOMODS','en','A checked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODGLOBSUNCHECKED','en','An unchecked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODINTERNALSTRICT','en','A function that modifies internalState is called from a function that does not list internalState in its modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODNOMODS','en','An externally-visible object is modified by a function with no /*@modifies@*/ comment. The /*@modifies ... @*/ control comment can be used to give a modifies list for an unspecified function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODOBSERVER','en','Storage declared with observer is possibly modified. Observer storage may not be modified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODOBSERVERUNCON','en','Storage declared with observer may be modified through a call to an unconstrained function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODS','en','An externally-visible object is modified by a function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODSIMPNOGLOBS','en','An implicit empty globals list is assumed for a function declared with a modifies clause but no globals list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODSTRICTGLOBSNOMODS','en','A checked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODUNCON','en','An unconstrained function is called in a function body where modifications are checked. Since the unconstrained function may modify anything, there may be undetected modifications in the checked function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODUNCONNOMODS','en','An unconstrained function is called in a function body where modifications are checked. Since the unconstrained function may modify anything, there may be undetected modifications in the checked function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MULTITHREADED','en','Non-reentrant function should not be used in multithreaded code.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTDEFINE','en','An out parameter or global is not defined before control is transferred.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTFREE','en','A memory leak has been detected.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTFREEFRESH','en','A memory leak has been detected. Storage allocated locally is not released before the last reference to it is lost.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTFREEONLY','en','A memory leak has been detected. Only-qualified storage is not released before the last reference to it is lost.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTMOD','en','An object listed in the modifies clause is not modified by the implementation of the function. The modification may not be detected if it is done through a call to an unspecified function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTNOTALIAS','en','An alias has been added to a temp-qualifier parameter or global that is visible externally when the function returns. If the aliasing is needed, use the /*@shared@*/ annotation to indicate that new aliases to the parameter may be created.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUTREP','en','LCL semantics requires that a mutable type exhibits sharing semantics. In order for objects to be shared a indirection is necessary in the representation. A mutable type may be represented by a pointer or an abstract mutable type. Handles into static data are fine, too, but will generate this error message unless it is suppressed.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEEDSPEC','en','There is information in the specification that is not duplicated in syntactic comments. Normally, this is not an error, but it may be useful to detect it to make sure checking incomplete systems without the specifications will still use this information.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NESTCOMMENT','en','A comment open sequence (/*) appears within a comment.  This usually means an earlier comment was not closed.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NESTEDEXTERN','en','An extern declaration is used inside a function scope.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEVERINCLUDE','en','Ignore header includes. Only works if relevant information is loaded from a library.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEWDECL','en','There is a new declaration that is not declared in a loaded library or earlier file.  (Use this flag to check for consistency against a library.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEWREFTRANS','en','A new reference is transferred to a reference counted reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEXTLINEMACROS','en','A constant or iter declaration is not immediately followed by a macro definition.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NOEFFECT','en','Statement has no visible effect --- no values are modified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NOEFFECTUNCON','en','Statement has no visible effect --- no values are modified. It may modify something through a call to an unconstrained function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NOPARAMS','en','A function declaration does not have a parameter list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NORET','en','There is a path through a function declared to return a value on which there is no return statement. This means the execution may fall through without returning a meaningful result to the caller.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULL','en','A possibly null pointer is misused (sets nullderef, nullpass, nullref, nullassign, and nullstate).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLASSIGN','en','A reference with no null annotation is assigned or initialized to NULL.  Use /*@null@*/ to declare the reference as a possibly null pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLDEREF','en','A possibly null pointer is dereferenced.  Value is either the result of a function which may return null (in which case, code should check it is not null), or a global, parameter or structure field declared with the null qualifier.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLINIT','en','A reference with no null annotation is initialized to NULL.  Use /*@null@*/ to declare the reference as a possibly null pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLPASS','en','A possibly null pointer is passed as a parameter corresponding to a formal parameter with no /*@null@*/ annotation.  If NULL may be used for this parameter, add a /*@null@*/ annotation to the function parameter declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLPTRARITH','en','Pointer arithmetic using a possibly null pointer and integer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLRET','en','Function returns a possibly null pointer, but is not declared using /*@null@*/ annotation of result.  If function may return NULL, add /*@null@*/ annotation to the return value declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLSTATE','en','A possibly null pointer is reachable from a parameter or global variable that is not declared using a /*@null@*/ annotation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLTERMINATED','en','A possibly non-nullterminated string/memory is used/referenced as a nullterminated one.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACT','en','An abstraction barrier involving a numabstract type is broken. If necessary, use /*@access <type>@*/ to allow access to a numabstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTCAST','en','A numeric literal is cast to a numabstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTINDEX','en','To allow numabstract types to index arrays, use +numabstractindex.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTLIT','en','To allow a numeric literal to be used as a numabstract type, use +numabstractlit.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTPRINT','en','A numabstract value is printed usind %d format code in a printf.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMENUMMEMBERS','en','Limit on maximum number of members of an enum is exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMLITERAL','en','An int literal is used as any numeric type (including float and long long). Use +numliteral to allow int literals to be used as any numeric type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMSTRUCTFIELDS','en','Maximum number of fields in a struct or union exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OBSERVERTRANS','en','Observer storage is transferred to a non-observer reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OLDSTYLE','en','Function definition is in old style syntax. Standard prototype syntax is preferred.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ONLYTRANS','en','The only reference to this storage is transferred to another reference (e.g., by returning it) that does not have the only annotation. This may lead to a memory leak, since the new reference is not necessarily released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ONLYUNQGLOBALTRANS','en','The only reference to this storage is transferred to another reference that does not have an aliasing annotation. This may lead to a memory leak, since the new reference is not necessarily released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OVERLOAD','en','A function, variable or constant defined in the library is redefined with a different type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OWNEDTRANS','en','The owned reference to this storage is transferred to another reference (e.g., by returning it) that does not have the owned annotation. This may lead to a memory leak, since the new reference is not necessarily released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PARAMUSE','en','A function parameter is not used in the body of the function. If the argument is needed for type compatibility or future plans, use /*@unused@*/ in the argument declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PORTABILITY','en','Use of function that may have implementation-dependent behavior.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_POSIXLIB','en','POSIX version of the standard library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_POSIXSTRICTLIB','en','POSIX version of the strict standard library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDASSIGN','en','The condition test is an assignment expression. Probably, you mean to use == instead of =. If an assignment is intended, add an extra parentheses nesting (e.g., if ((a = b)) ...) to suppress this message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOL','en','Test expression type is not boolean.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOLINT','en','Test expression type is not boolean or int.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOLOTHERS','en','Test expression type is not boolean.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOLPTR','en','Test expression type is not boolean.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREPROC','en','Preprocessing error.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMMATCH','en','A parameter in a function definition does not have the same name as the corresponding in the declaration of the function after removing the protoparamprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMNAME','en','A parameter in a function prototype has a name.  This is dangerous, since a macro definition could be visible here.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMPREFIX','en','A parameter name in a function prototype declaration does not start with the declaration parameter prefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMPREFIXEXCLUDE','en','An identifier that is not a parameter name in a function prototype starts with the protoparamprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PTRARITH','en','Pointer arithmetic using pointer and integer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PTRCOMPARE','en','A pointer is compared to a number.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PTRNEGATE','en','The operand of ! operator is a pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_READONLYSTRINGS','en','String literals are read-only. An error is reported if a string literal may be modified or released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_READONLYTRANS','en','A read-only string literal is assigned to a non-observer reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REALCOMPARE','en','Two real (float, double, or long double) values are compared directly using == or != primitive. This may produce unexpected results since floating point representations are inexact. Instead, compare the difference to FLT_EPSILON or DBL_EPSILON.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REALRELATECOMPARE','en','Two real (float, double, or long double) values are compared directly using < or >. This may produce unexpected results since floating point representations are inexact. Instead, compare the difference to FLT_EPSILON or DBL_EPSILON.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDECL','en','A function or variable is declared in more than one place. This is not necessarily a problem, since the declarations are consistent.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDEF','en','A function or variable is redefined. One of the declarations should use extern.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDUNDANTCONSTRAINTS','en','Display seemingly redundant constraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDUNDANTSHAREQUAL','en','A declaration of an immutable object uses a redundant observer qualifier.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REFCOUNTTRANS','en','Reference counted storage is transferred in a way that may not be consistent with the reference count.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RELAXQUALS','en','To allow qualifier mismatches that are not dangerous, use +relaxquals.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RELAXTYPES','en','To allow all numeric types to match, use +relaxtypes.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REPEATUNRECOG','en','Identifier used in code has not been declared. (Message repeated for future uses in this file.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REPEXPOSE','en','The internal representation of an abstract type is visible to the caller. This means clients may have access to a pointer into the abstract representation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETALIAS','en','The returned value shares storage with a parameter or global. If a parameter is to be returned, use the returned qualifier. If the result is not modified, use the observer qualifier on the result type. Otherwise, exposed can be used, but limited checking is done.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETEXPOSE','en','The return value shares storage with an instance of an abstract type. This means clients may have access to a pointer into the abstract representation. Use the observer qualifier to return exposed storage that may not be modified by the client. Use the exposed qualifier to return modifiable (but not deallocatable) exposed storage (dangerous).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVAL','en','Result returned by function call is not used. If this is intended, cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVALBOOL','en','Result returned by function call is not used. If this is intended, can cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVALINT','en','Result returned by function call is not used. If this is intended, can cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVALOTHER','en','Result returned by function call is not used. If this is intended, can cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SEFPARAMS','en','An actual parameter corresponding to a sef parameter may have a side-effect.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SEFUNCON','en','An actual parameter corresponding to a sef parameter involves a call to a procedure with no modifies clause that may have a side-effect.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHADOW','en','An outer declaration is shadowed by the local declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHAREDTRANS','en','Shared storage is transferred to a non-shared reference. The other reference may release storage needed by this reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHIFTIMPLEMENTATION','en','The left operand to a shift operator may be negative (behavior is implementation-defined).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHIFTNEGATIVE','en','The right operand to a shift operator may be negative (behavior undefined).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHORTINT','en','To make short int and int types equivalent, use +shortint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SINGLEINCLUDE','en','When checking multiple files, each header file is processed only once. This may change the meaning of the code, if the same header file is included in different contexts (e.g., the header file includes #if directives and the values are different when it is included in different places.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SIZEOFFORMALARRAY','en','Operand of a sizeof operator is a function parameter declared as an array.  The value of sizeof will be the size of a pointer to the element type, not the number of elements in the array.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SIZEOFTYPE','en','Operand of sizeof operator is a type. (Safer to use expression, int *x = sizeof (*x); instead of sizeof (int).)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLASHSLASHCOMMENT','en','A // comment is used.  ISO C99 allows // comments, but earlier standards did not.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAK','en','Name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKCONSTS','en','Constant name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKFCNS','en','Function or iterator name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKMACROS','en','Expanded macro name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKTYPES','en','Type name is not consistent with Slovak naming convention. Slovak type names may not include uppercase letters.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKVARS','en','Variable name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SPECUNDECL','en','A function or variable is declared in an .lcl file, but not declared in any source code file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SPECUNDEF','en','A function or variable is declared in an .lcl file, but not defined in any source code file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STACKREF','en','A stack reference is pointed to by an external reference when the function returns. The stack-allocated storage is destroyed after the call, leaving a dangling reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATEMERGE','en','Control path merge violates user-defined state merge rules.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATETRANSFER','en','Transfer violates user-defined state rules.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATICINITTRANS','en','Static storage is used as an initial value in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATICTRANS','en','Static storage is transferred in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTBRANCHSTATE','en','The state of a variable through an array fetch is different depending on which branch is taken. This means no annotation can sensibly be applied to the storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTLIB','en','Stricter version of the standard library is used. (The default library is standard.lcd;  strict library is strict.lcd.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTOPS','en','A primitive operation does not type check strictly.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTUSERELEASED','en','Memory (through fetch) is used after it may have been released (either by passing as an only param or assigning to an only global).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALLEN','en','Maximum length of string literal exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALNOROOM','en','A string literal is assigned to a char array that is not big enough to hold the null terminator.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALNOROOMFINALNULL','en','A string literal is assigned to a char array that is not big enough to hold the final null terminator.  This may not be a problem because a null character has been explictedly included in the string literal using an escape sequence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALSMALLER','en','A string literal is assigned to a char array that smaller than the string literal needs.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALTOOLONG','en','A string literal is assigned to a char array too small to hold it.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SUPERUSER','en','Call to function restricted to superusers.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SWITCHLOOPBREAK','en','A break statement appears inside the body of a while or for statement within a switch. This is perfectly reasonable code, but check that the break is intended to break only the inner loop. The break statement may be preceded by /*@loopbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SWITCHSWITCHBREAK','en','A break statement appears inside a switch statement within another switch statement. This is perfectly reasonable code, but check that the break is intended to break only the inner switch. The break statement may be preceded by /*@innerbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SYNTAX','en','Code cannot be parsed.  For help on parse errors, see splint -help parseerrors.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SYSDIRS','en','set directories for system files (default /usr/include). Separate directories with path separator (colons in Unix, semi-colons in Windows). Flag settings propagate to files in a system directory. If -sysdirerrors is set, no errors are reported for files in system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SYSUNRECOG','en','Identifier used in code has not been declared. (Message repeated for future uses in this file.)  Use +gnuextensions to make Splint recognize some keywords that are gnu extensions.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TAGPREFIX','en','A tag identifier does not start with the tagprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TAGPREFIXEXCLUDE','en','An identifier that is not a tag starts with the tagprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TEMPTRANS','en','Temp storage (associated with a formal parameter) is transferred to a non-temporary reference. The storage may be released or new aliases created.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TOCTOU','en','Possible time of check, time of use vulnerability.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TOPUSE','en','An external declaration not used in any source file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TRYTORECOVER','en','Try to recover from parse error.  It really means try - this doesn''t usually work.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPE','en','Types are incompatible.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPEPREFIX','en','A user-defined type does not start with the typeprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPEPREFIXEXCLUDE','en','An identifier that is not a type name starts with the typeprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPEUSE','en','A type is declared but not used. Use /*@unused@*/ in front of typedef to suppress messages.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNCHECKEDGLOBALIAS','en','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNCHECKEDMACROPREFIX','en','An unchecked macro name does not start with the uncheckedmacroprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNCHECKEDMACROPREFIXEXCLUDE','en','An identifier that is not the name of an unchecked macro starts with the uncheckedmacroprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIONDEF','en','No field of a union is defined. Generally, one field of a union is expected to be defined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIXLIB','en','UNIX version of the standard library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIXSTANDARD','en','Use of function that need not be provided by UNIX implementations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIXSTRICTLIB','en','strict version of the UNIX library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNQUALIFIEDINITTRANS','en','Unqualified storage is used as an initial value in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNQUALIFIEDTRANS','en','Unqualified storage is transferred in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNREACHABLE','en','This code will never be reached on any possible execution.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOG','en','Identifier used in code has not been declared.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOGCOMMENTS','en','Word after a stylized comment marker does not correspond to a stylized comment.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOGDIRECTIVE','en','Pre-processor directive is not recognized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOGFLAGCOMMENTS','en','Semantic comment attempts to set a flag that is not recognized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNSIGNEDCOMPARE','en','An unsigned value is used in a comparison with zero in a way that is either a bug or confusing.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_USEDEF','en','An rvalue is used that may not be initialized to a value on some execution path.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_USERELEASED','en','Memory is used after it has been released (either by passing as an only param or assigning to an only global).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_USEVARARGS','en','Header <varargs.h> is not part of ANSI Standard. Should use <stdarg.h> instead.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_VARUSE','en','A variable is declared but never used. Use /*@unused@*/ in front of declaration to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_VOIDABSTRACT','en','A pointer to void is cast to a pointer to an abstract type (or vice versa).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNFLAGS','en','Command line sets flag in abnormal way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNLINTCOMMENTS','en','A traditional lint comment is used. Some traditional lint comments are interpreted by Splint to enable easier checking of legacy code. It is preferable to replace these comments with the suggested Splint alternative.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNMISSINGGLOBS','en','A global variable is used in the modifies clause, but it is not listed in the globals list.  The variable will be added to the globals list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNMISSINGGLOBSNOGLOBS','en','A global variable is used in the modifies clause, but the function has no globals list.  The variable will be added to the globals list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNPOSIXHEADERS','en','Header name matches a POSIX header, but the POSIX library is not selected.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNRC','en','There was a problem reading an initialization file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNSYSFILES','en','Splint has been run on a system file, by default no errors are reported for system files.  Use +systemdirerrors if you want splint to report errors in system files.  A file is considered a system file if it is in a system directory or a subdirectory of a system directory.  The sysdirs flag can be used to control the directories treated as system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNUNIXLIB','en','Unix library may not be compatible with all platforms');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNUSE','en','Declaration marked with warn clause is used (can be suppresed by more specific flags).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WHILEBLOCK','en','While body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WHILEEMPTY','en','While statement has no body.');


-- Splint criteria
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_FORMAT','en','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ABSTRACT','en','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALIASING_MEMORY','en','aliasing memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALLUSE_EXPORT','en','Unused export');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALLUSE_PARAMETERS','en','Unused parameters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALLUSE','en','Unused');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_HELP','en','booleans help');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_OPERATIONS','en','Unsafe boolean operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_POINTERS','en','booleans pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_PREDICATES','en','Condition test predicates');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_COMMENTS','en','Comment declared inside another one');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_COMPLETE_SPECIFICATIONS','en','complete specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_CONTROLFLOW_MEMORY','en','control flow memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_CONTROLFLOW','en','control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_DECLARATIONS_LIBRARIES','en','declarations libraries');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_DECLARATIONS','en','declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_DEFINITION','en','definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_EFFECT_CONTROLFLOW','en','effect control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_EXTENSIBLE_MEMORY','en','extensible memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ITERATORS','en','iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_LIBRARIES_ANSI','en','libraries ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MACROS','en','macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_DEFINITION','en','memory definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_IMPLICIT','en','memory implicit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_LEAKS','en','memory leaks');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_RELEASED','en','memory released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY','en','memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORYBOUNDS_MEMORY','en','memory bounds memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MODIFICATION_SPECIFICATIONS','en','modification specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES_ABSTRACT','en','names abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES_ANSI','en','names ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES_PREFIXES','en','names prefixes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES','en','names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NULL_MEMORY','en','null memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_OPERATIONS_POINTERS','en','operations pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_OPERATIONS','en','operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_RETURNVALS_BOOLEANS','en','return vals booleans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_RETURNVALS','en','return vals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_SYSTEMFUNCTIONS_UNDEFINED','en','system functions undefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_SYSTEMFUNCTIONS','en','system functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_TYPEEQUIVALENCE_POINTERS','en','type equivalence pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_TYPEEQUIVALENCE','en','type equivalence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_TYPEMISMATCH','en','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_UNDEFINED_ANSI','en','undefined ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_UNRECOGNIZED_DISPLAY','en','unrecognized display');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_WARNUSE_SECURITY','en','warn use security');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_FORMAT','en','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ABSTRACT','en','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALIASING_MEMORY','en','aliasing memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALLUSE_EXPORT','en','Unused export');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALLUSE_PARAMETERS','en','Unused parameters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALLUSE','en','Unused');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_HELP','en','booleans help');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_OPERATIONS','en','Unsafe boolean operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_POINTERS','en','booleans pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_PREDICATES','en','Condition test predicates');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_COMMENTS','en','Comment declared inside another one');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_COMPLETE_SPECIFICATIONS','en','complete specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_CONTROLFLOW_MEMORY','en','control flow memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_CONTROLFLOW','en','control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_DECLARATIONS_LIBRARIES','en','declarations libraries');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_DECLARATIONS','en','declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_DEFINITION','en','definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_EFFECT_CONTROLFLOW','en','effect control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_EXTENSIBLE_MEMORY','en','extensible memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ITERATORS','en','iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_LIBRARIES_ANSI','en','libraries ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MACROS','en','macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_DEFINITION','en','memory definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_IMPLICIT','en','memory implicit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_LEAKS','en','memory leaks');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_RELEASED','en','memory released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY','en','memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORYBOUNDS_MEMORY','en','memory bounds memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MODIFICATION_SPECIFICATIONS','en','modification specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES_ABSTRACT','en','names abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES_ANSI','en','names ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES_PREFIXES','en','names prefixes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES','en','names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NULL_MEMORY','en','null memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_OPERATIONS_POINTERS','en','operations pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_OPERATIONS','en','operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_RETURNVALS_BOOLEANS','en','return vals booleans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_RETURNVALS','en','return vals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_SYSTEMFUNCTIONS_UNDEFINED','en','system functions undefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_SYSTEMFUNCTIONS','en','system functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_TYPEEQUIVALENCE_POINTERS','en','type equivalence pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_TYPEEQUIVALENCE','en','type equivalence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_TYPEMISMATCH','en','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_UNDEFINED_ANSI','en','undefined ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_UNRECOGNIZED_DISPLAY','en','unrecognized display');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_WARNUSE_SECURITY','en','warn use security');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_FORMAT','en','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ABSTRACT','en','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALIASING_MEMORY','en','aliasing memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALLUSE_EXPORT','en','Unused export');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALLUSE_PARAMETERS','en','Unused parameters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALLUSE','en','Unused');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_HELP','en','booleans help');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_OPERATIONS','en','Unsafe boolean operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_POINTERS','en','booleans pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_PREDICATES','en','Condition test predicates');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_COMMENTS','en','Comment declared inside another one');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_COMPLETE_SPECIFICATIONS','en','complete specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_CONTROLFLOW_MEMORY','en','control flow memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_CONTROLFLOW','en','control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_DECLARATIONS_LIBRARIES','en','declarations libraries');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_DECLARATIONS','en','declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_DEFINITION','en','definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_EFFECT_CONTROLFLOW','en','effect control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_EXTENSIBLE_MEMORY','en','extensible memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ITERATORS','en','iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_LIBRARIES_ANSI','en','libraries ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MACROS','en','macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_DEFINITION','en','memory definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_IMPLICIT','en','memory implicit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_LEAKS','en','memory leaks');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_RELEASED','en','memory released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY','en','memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORYBOUNDS_MEMORY','en','memory bounds memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MODIFICATION_SPECIFICATIONS','en','modification specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES_ABSTRACT','en','names abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES_ANSI','en','names ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES_PREFIXES','en','names prefixes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES','en','names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NULL_MEMORY','en','null memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_OPERATIONS_POINTERS','en','operations pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_OPERATIONS','en','operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_RETURNVALS_BOOLEANS','en','return vals booleans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_RETURNVALS','en','return vals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_SYSTEMFUNCTIONS_UNDEFINED','en','system functions undefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_SYSTEMFUNCTIONS','en','system functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_TYPEEQUIVALENCE_POINTERS','en','type equivalence pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_TYPEEQUIVALENCE','en','type equivalence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_TYPEMISMATCH','en','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_UNDEFINED_ANSI','en','undefined ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_UNRECOGNIZED_DISPLAY','en','unrecognized display');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_WARNUSE_SECURITY','en','warn use security');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('modele','lib','C-RULES','en','C-RULES');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('modele','desc','C-RULES','en','C-RULES');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('modele','compl','C-RULES','en','C-RULES');

commit;

-- PMCCABE metrics
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_CSLPCT','fr','comments %');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NCSL','fr','code lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NL','fr','Total lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_CSL','fr','comment lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NCSLPCT','fr','code %');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_LOC','fr','Lines of code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_EVG','fr','EV(g)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_VG','fr','V(g)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_NB_STMT','fr','Nb of Statements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','PMCCABE_FIRST_LINE','fr','First Line');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_CSLPCT','fr','% of non code in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NCSL','fr','Number of code lines in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NL','fr','Total number of lines in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_CSL','fr','Number of non code lines in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NCSLPCT','fr','% of code in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_LOC','fr','Number of lines in function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_EVG','fr','Modified McCabe Cyclomatic Complexity');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_VG','fr','Traditional McCabe Cyclomatic Complexity');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_NB_STMT','fr','Number of Statements in function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','PMCCABE_FIRST_LINE','fr','First line of function');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_CSLPCT','fr','Percentage of lines that are not code (can be comment or blank lines) in the file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NCSL','fr','Number of lines containing actual code (when comments and blank lines have been removed) in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NL','fr','Total number of lines in file, including code, comments and blank lines');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_CSL','fr','Number of lines that are not code (can be comment or blank lines) in the file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NCSLPCT','fr','Percentage of lines containing actual code (when comments and blank lines have been removed) in file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_LOC','fr','number of lines of the function, from the opening curly brace through the line containing the closing curly brace');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_EVG','fr','cyclomatic complexity calculated by adding 1 (for the function) to the occurences of for, if, while, switch, &&, ||, and ?. Unlike "normal" McCabe cyclomatic complexity, each case in a switch statement is not counted as additional complexity. This treatment of switch statements and complexity may be more useful than the "normal" measure for judging maintenance effort and code difficulty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_VG','fr','cyclomatic complexity calculated in the "usual" way with regard to switch statements. Specifically it is calculated counting each case rather than the switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_NB_STMT','fr','statement count. It is calculated by adding each occurence of for, if, while, switch, ?, and semicolon within the function. One possible surprise is that for statements have a minimum statement count of 3. This is realistic since for(A; B; C){...} is really shorthand for A; while (B) { ... C;}. The number of statements within a file is the sum of the number of statements for each function implemented within that file, plus one for each of those functions (because functions are statements too), plus one for each other file-scoped statement (usually declarations).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','PMCCABE_FIRST_LINE','fr','first line number in the function. This is not necessarily the same line on which the function name appears.');

-- Splint metrics
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ABSTRACT','fr','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ABSTRACTCOMPARE','fr','abstractcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSALL','fr','accessall');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSCZECH','fr','accessczech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSCZECHOSLOVAK','fr','accessczechoslovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSFILE','fr','accessfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSMODULE','fr','accessmodule');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ACCESSSLOVAK','fr','accessslovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALIASUNIQUE','fr','aliasunique');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALLBLOCK','fr','allblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALLEMPTY','fr','allempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALLOCMISMATCH','fr','allocmismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ALWAYSEXITS','fr','alwaysexits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ANNOTATIONERROR','fr','annotationerror');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ANSI89LIMITS','fr','ansi89limits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ASSIGNEXPOSE','fr','assignexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BADFLAG','fr','badflag');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BITWISESIGNED','fr','bitwisesigned');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOOLCOMPARE','fr','boolcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOOLINT','fr','boolint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOOLOPS','fr','boolops');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOUNDS','fr','bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOUNDSREAD','fr','boundsread');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BOUNDSWRITE','fr','boundswrite');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BRANCHSTATE','fr','branchstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BUFFEROVERFLOW','fr','bufferoverflow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_BUFFEROVERFLOWHIGH','fr','bufferoverflowhigh');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CASEBREAK','fr','casebreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CASTEXPOSE','fr','castexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CASTFCNPTR','fr','castfcnptr');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARINDEX','fr','charindex');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARINT','fr','charint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARINTLITERAL','fr','charintliteral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHARUNSIGNEDCHAR','fr','charunsignedchar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKEDGLOBALIAS','fr','checkedglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKMODGLOBALIAS','fr','checkmodglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKPOST','fr','checkpost');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CHECKSTRICTGLOBALIAS','fr','checkstrictglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMMENTCHAR','fr','commentchar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMMENTERROR','fr','commenterror');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMPDEF','fr','compdef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMPDESTROY','fr','compdestroy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_COMPMEMPASS','fr','compmempass');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTMACROS','fr','constmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTPREFIX','fr','constprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTPREFIXEXCLUDE','fr','constprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONSTUSE','fr','constuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONTINUECOMMENT','fr','continuecomment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CONTROLNESTDEPTH','fr','controlnestdepth');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CPPNAMES','fr','cppnames');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECH','fr','czech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHCONSTS','fr','czechconsts');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHFCNS','fr','czechfcns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHMACROS','fr','czechmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAK','fr','czechoslovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKCONSTS','fr','czechoslovakconsts');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKFCNS','fr','czechoslovakfcns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKMACROS','fr','czechoslovakmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKTYPES','fr','czechoslovaktypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHOSLOVAKVARS','fr','czechoslovakvars');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHTYPES','fr','czechtypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_CZECHVARS','fr','czechvars');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEBUGFCNCONSTRAINT','fr','debugfcnconstraint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DECLUNDEF','fr','declundef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEEPBREAK','fr','deepbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEPARRAYS','fr','deparrays');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DEPENDENTTRANS','fr','dependenttrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DISTINCTEXTERNALNAMES','fr','distinctexternalnames');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DISTINCTINTERNALNAMES','fr','distinctinternalnames');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DUPLICATECASES','fr','duplicatecases');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_DUPLICATEQUALS','fr','duplicatequals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ELSEIFCOMPLETE','fr','elseifcomplete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EMPTYRET','fr','emptyret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMINDEX','fr','enumindex');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMINT','fr','enumint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMMEMBERS','fr','enummembers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMMEMUSE','fr','enummemuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMPREFIX','fr','enumprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ENUMPREFIXEXCLUDE','fr','enumprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EVALORDER','fr','evalorder');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EVALORDERUNCON','fr','evalorderuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXITARG','fr','exitarg');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTANY','fr','exportany');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTCONST','fr','exportconst');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTFCN','fr','exportfcn');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTHEADER','fr','exportheader');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTHEADERVAR','fr','exportheadervar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTITER','fr','exportiter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTLOCAL','fr','exportlocal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTMACRO','fr','exportmacro');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTTYPE','fr','exporttype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPORTVAR','fr','exportvar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXPOSETRANS','fr','exposetrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALNAMECASEINSENSITIVE','fr','externalnamecaseinsensitive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALNAMELEN','fr','externalnamelen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALPREFIX','fr','externalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_EXTERNALPREFIXEXCLUDE','fr','externalprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNDEREF','fr','fcnderef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNMACROS','fr','fcnmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNPOST','fr','fcnpost');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FCNUSE','fr','fcnuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FIELDUSE','fr','fielduse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FILESTATICPREFIX','fr','filestaticprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FILESTATICPREFIXEXCLUDE','fr','filestaticprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FIRSTCASE','fr','firstcase');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FIXEDFORMALARRAY','fr','fixedformalarray');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FLOATDOUBLE','fr','floatdouble');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORBLOCK','fr','forblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORCEHINTS','fr','forcehints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FOREMPTY','fr','forempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMALARRAY','fr','formalarray');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMATCODE','fr','formatcode');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMATCONST','fr','formatconst');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FORMATTYPE','fr','formattype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FRESHTRANS','fr','freshtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_FULLINITBLOCK','fr','fullinitblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBALIAS','fr','globalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBALPREFIX','fr','globalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBALPREFIXEXCLUDE','fr','globalprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBNOGLOBS','fr','globnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBS','fr','globs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBSIMPMODSNOTHING','fr','globsimpmodsnothing');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBSTATE','fr','globstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GLOBUSE','fr','globuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_GNUEXTENSIONS','fr','gnuextensions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IFBLOCK','fr','ifblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IFEMPTY','fr','ifempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IGNOREQUALS','fr','ignorequals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IGNORESIGNS','fr','ignoresigns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IMMEDIATETRANS','fr','immediatetrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IMPLEMENTATIONOPTIONAL','fr','implementationoptional');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_IMPTYPE','fr','imptype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCLUDENEST','fr','includenest');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCOMPLETETYPE','fr','incompletetype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCONDEFS','fr','incondefs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INCONDEFSLIB','fr','incondefslib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INFLOOPS','fr','infloops');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INFLOOPSUNCON','fr','infloopsuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INITALLELEMENTS','fr','initallelements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INITSIZE','fr','initsize');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALGLOBS','fr','internalglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALGLOBSNOGLOBS','fr','internalglobsnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALNAMECASEINSENSITIVE','fr','internalnamecaseinsensitive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALNAMELEN','fr','internalnamelen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_INTERNALNAMELOOKALIKE','fr','internalnamelookalike');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISO99LIMITS','fr','iso99limits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISOLIB','fr','isolib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISORESERVED','fr','isoreserved');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ISORESERVEDINTERNAL','fr','isoreservedinternal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITERPREFIX','fr','iterprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITERPREFIXEXCLUDE','fr','iterprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4LOW','fr','its4low');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4MODERATE','fr','its4moderate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4MOSTRISKY','fr','its4mostrisky');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4RISKY','fr','its4risky');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ITS4VERYRISKY','fr','its4veryrisky');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_KEEPTRANS','fr','keeptrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_KEPTTRANS','fr','kepttrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LEGACY','fr','legacy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIBMACROS','fr','libmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOOL','fr','likelybool');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOUNDS','fr','likelybounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOUNDSREAD','fr','likelyboundsread');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LIKELYBOUNDSWRITE','fr','likelyboundswrite');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOCALPREFIX','fr','localprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOCALPREFIXEXCLUDE','fr','localprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGINT','fr','longint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGINTEGRAL','fr','longintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGSIGNEDINTEGRAL','fr','longsignedintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGUNSIGNEDINTEGRAL','fr','longunsignedintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LONGUNSIGNEDUNSIGNEDINTEGRAL','fr','longunsignedunsignedintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOOPLOOPBREAK','fr','looploopbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOOPLOOPCONTINUE','fr','looploopcontinue');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_LOOPSWITCHBREAK','fr','loopswitchbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROASSIGN','fr','macroassign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROCONSTDECL','fr','macroconstdecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROCONSTDISTANCE','fr','macroconstdistance');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACRODECL','fr','macrodecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROEMPTY','fr','macroempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROFCNDECL','fr','macrofcndecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROMATCHNAME','fr','macromatchname');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROPARAMS','fr','macroparams');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROPARENS','fr','macroparens');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROREDEF','fr','macroredef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACRORET','fr','macroret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROSTMT','fr','macrostmt');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROUNRECOG','fr','macrounrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROVARPREFIX','fr','macrovarprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MACROVARPREFIXEXCLUDE','fr','macrovarprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MAINTYPE','fr','maintype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MATCHANYINTEGRAL','fr','matchanyintegral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MATCHFIELDS','fr','matchfields');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MAYALIASUNIQUE','fr','mayaliasunique');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MEMTRANS','fr','memtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MISPLACEDSHAREQUAL','fr','misplacedsharequal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MISSCASE','fr','misscase');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODGLOBS','fr','modglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODGLOBSNOMODS','fr','modglobsnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODGLOBSUNCHECKED','fr','modglobsunchecked');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODINTERNALSTRICT','fr','modinternalstrict');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODNOMODS','fr','modnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODOBSERVER','fr','modobserver');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODOBSERVERUNCON','fr','modobserveruncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODS','fr','mods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODSIMPNOGLOBS','fr','modsimpnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODSTRICTGLOBSNOMODS','fr','modstrictglobsnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODUNCON','fr','moduncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MODUNCONNOMODS','fr','modunconnomods');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MULTITHREADED','fr','multithreaded');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTDEFINE','fr','mustdefine');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTFREE','fr','mustfree');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTFREEFRESH','fr','mustfreefresh');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTFREEONLY','fr','mustfreeonly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTMOD','fr','mustmod');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUSTNOTALIAS','fr','mustnotalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_MUTREP','fr','mutrep');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEEDSPEC','fr','needspec');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NESTCOMMENT','fr','nestcomment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NESTEDEXTERN','fr','nestedextern');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEVERINCLUDE','fr','neverinclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEWDECL','fr','newdecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEWREFTRANS','fr','newreftrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NEXTLINEMACROS','fr','nextlinemacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NOEFFECT','fr','noeffect');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NOEFFECTUNCON','fr','noeffectuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NOPARAMS','fr','noparams');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NORET','fr','noret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULL','fr','null');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLASSIGN','fr','nullassign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLDEREF','fr','nullderef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLINIT','fr','nullinit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLPASS','fr','nullpass');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLPTRARITH','fr','nullptrarith');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLRET','fr','nullret');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLSTATE','fr','nullstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NULLTERMINATED','fr','nullterminated');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACT','fr','numabstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTCAST','fr','numabstractcast');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTINDEX','fr','numabstractindex');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTLIT','fr','numabstractlit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMABSTRACTPRINT','fr','numabstractprint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMENUMMEMBERS','fr','numenummembers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMLITERAL','fr','numliteral');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_NUMSTRUCTFIELDS','fr','numstructfields');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OBSERVERTRANS','fr','observertrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OLDSTYLE','fr','oldstyle');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ONLYTRANS','fr','onlytrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_ONLYUNQGLOBALTRANS','fr','onlyunqglobaltrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OVERLOAD','fr','overload');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_OWNEDTRANS','fr','ownedtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PARAMUSE','fr','paramuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PORTABILITY','fr','portability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_POSIXLIB','fr','posixlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_POSIXSTRICTLIB','fr','posixstrictlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDASSIGN','fr','predassign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOL','fr','predbool');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOLINT','fr','predboolint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOLOTHERS','fr','predboolothers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREDBOOLPTR','fr','predboolptr');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PREPROC','fr','preproc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMMATCH','fr','protoparammatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMNAME','fr','protoparamname');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMPREFIX','fr','protoparamprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PROTOPARAMPREFIXEXCLUDE','fr','protoparamprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PTRARITH','fr','ptrarith');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PTRCOMPARE','fr','ptrcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_PTRNEGATE','fr','ptrnegate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_READONLYSTRINGS','fr','readonlystrings');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_READONLYTRANS','fr','readonlytrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REALCOMPARE','fr','realcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REALRELATECOMPARE','fr','realrelatecompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDECL','fr','redecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDEF','fr','redef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDUNDANTCONSTRAINTS','fr','redundantconstraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REDUNDANTSHAREQUAL','fr','redundantsharequal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REFCOUNTTRANS','fr','refcounttrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RELAXQUALS','fr','relaxquals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RELAXTYPES','fr','relaxtypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REPEATUNRECOG','fr','repeatunrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_REPEXPOSE','fr','repexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETALIAS','fr','retalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETEXPOSE','fr','retexpose');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVAL','fr','retval');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVALBOOL','fr','retvalbool');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVALINT','fr','retvalint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_RETVALOTHER','fr','retvalother');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SEFPARAMS','fr','sefparams');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SEFUNCON','fr','sefuncon');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHADOW','fr','shadow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHAREDTRANS','fr','sharedtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHIFTIMPLEMENTATION','fr','shiftimplementation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHIFTNEGATIVE','fr','shiftnegative');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SHORTINT','fr','shortint');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SINGLEINCLUDE','fr','singleinclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SIZEOFFORMALARRAY','fr','sizeofformalarray');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SIZEOFTYPE','fr','sizeoftype');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLASHSLASHCOMMENT','fr','slashslashcomment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAK','fr','slovak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKCONSTS','fr','slovakconsts');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKFCNS','fr','slovakfcns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKMACROS','fr','slovakmacros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKTYPES','fr','slovaktypes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SLOVAKVARS','fr','slovakvars');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SPECUNDECL','fr','specundecl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SPECUNDEF','fr','specundef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STACKREF','fr','stackref');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATEMERGE','fr','statemerge');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATETRANSFER','fr','statetransfer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATICINITTRANS','fr','staticinittrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STATICTRANS','fr','statictrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTBRANCHSTATE','fr','strictbranchstate');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTLIB','fr','strictlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTOPS','fr','strictops');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRICTUSERELEASED','fr','strictusereleased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALLEN','fr','stringliterallen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALNOROOM','fr','stringliteralnoroom');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALNOROOMFINALNULL','fr','stringliteralnoroomfinalnull');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALSMALLER','fr','stringliteralsmaller');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_STRINGLITERALTOOLONG','fr','stringliteraltoolong');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SUPERUSER','fr','superuser');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SWITCHLOOPBREAK','fr','switchloopbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SWITCHSWITCHBREAK','fr','switchswitchbreak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SYNTAX','fr','syntax');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SYSDIRS','fr','sysdirs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_SYSUNRECOG','fr','sysunrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TAGPREFIX','fr','tagprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TAGPREFIXEXCLUDE','fr','tagprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TEMPTRANS','fr','temptrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TOCTOU','fr','toctou');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TOPUSE','fr','topuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TRYTORECOVER','fr','trytorecover');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPE','fr','type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPEPREFIX','fr','typeprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPEPREFIXEXCLUDE','fr','typeprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_TYPEUSE','fr','typeuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNCHECKEDGLOBALIAS','fr','uncheckedglobalias');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNCHECKEDMACROPREFIX','fr','uncheckedmacroprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNCHECKEDMACROPREFIXEXCLUDE','fr','uncheckedmacroprefixexclude');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIONDEF','fr','uniondef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIXLIB','fr','unixlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIXSTANDARD','fr','unixstandard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNIXSTRICTLIB','fr','unixstrictlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNQUALIFIEDINITTRANS','fr','unqualifiedinittrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNQUALIFIEDTRANS','fr','unqualifiedtrans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNREACHABLE','fr','unreachable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOG','fr','unrecog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOGCOMMENTS','fr','unrecogcomments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOGDIRECTIVE','fr','unrecogdirective');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNRECOGFLAGCOMMENTS','fr','unrecogflagcomments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_UNSIGNEDCOMPARE','fr','unsignedcompare');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_USEDEF','fr','usedef');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_USERELEASED','fr','usereleased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_USEVARARGS','fr','usevarargs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_VARUSE','fr','varuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_VOIDABSTRACT','fr','voidabstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNFLAGS','fr','warnflags');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNLINTCOMMENTS','fr','warnlintcomments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNMISSINGGLOBS','fr','warnmissingglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNMISSINGGLOBSNOGLOBS','fr','warnmissingglobsnoglobs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNPOSIXHEADERS','fr','warnposixheaders');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNRC','fr','warnrc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNSYSFILES','fr','warnsysfiles');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNUNIXLIB','fr','warnunixlib');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WARNUSE','fr','warnuse');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WHILEBLOCK','fr','whileblock');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','SPLINT_WHILEEMPTY','fr','whileempty');


INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ABSTRACT','fr','data abstraction barriers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ABSTRACTCOMPARE','fr','object equality comparison on abstract type operands');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSALL','fr','set accessmodule, accessfile and accessczech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSCZECH','fr','allow access to abstract types by czech naming convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSCZECHOSLOVAK','fr','allow access to abstract types by czechoslovak naming convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSFILE','fr','allow access to abstract types by file name convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSMODULE','fr','allow access to abstract types in definition module');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ACCESSSLOVAK','fr','allow access to abstract types by slovak naming convention');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALIASUNIQUE','fr','unique parameter is aliased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALLBLOCK','fr','the body of an if, while or for statement is not a block (sets ifblock, whileblock and forblock)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALLEMPTY','fr','an if, while or for statement has no body (sets ifempty, whileempty and forempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALLOCMISMATCH','fr','type conversion involves storage of non-divisble size');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ALWAYSEXITS','fr','loop predicate always exits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ANNOTATIONERROR','fr','annotation is used in inconsistent location');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ANSI89LIMITS','fr','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ANSI89 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ASSIGNEXPOSE','fr','abstract representation is exposed (assignments only)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BADFLAG','fr','FLG_BADFlag');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BITWISESIGNED','fr','a bitwise logical operator does not have unsigned operands');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOOLCOMPARE','fr','comparison between bools (dangerous because of multiple true values)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOOLINT','fr','bool and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOOLOPS','fr','primitive operation (!, && or ||) does not has a boolean argument');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOUNDS','fr','memory bounds checking (sets boundsread and boundswrite)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOUNDSREAD','fr','possible out of bounds read');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BOUNDSWRITE','fr','possible buffer overflow from an out of bounds write');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BRANCHSTATE','fr','storage has inconsistent states of alternate paths through a branch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BUFFEROVERFLOW','fr','possible buffer overflow vulnerability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_BUFFEROVERFLOWHIGH','fr','likely buffer overflow vulnerability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CASEBREAK','fr','non-empty case in a switch without preceding break');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CASTEXPOSE','fr','abstract representation is exposed through a cast');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CASTFCNPTR','fr','a pointer to a function is cast to a pointer to void (or vice versa)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARINDEX','fr','char can be used to index arrays');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARINT','fr','char and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARINTLITERAL','fr','character constants (e.g., ''a'') can be used as ints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHARUNSIGNEDCHAR','fr','allow char and unsigned char types to match');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKEDGLOBALIAS','fr','function returns with a checked global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKMODGLOBALIAS','fr','function returns with a checkmod global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKPOST','fr','unable to verify predicate in ensures clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CHECKSTRICTGLOBALIAS','fr','function returns with a checkstrict global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMMENTCHAR','fr','set marker character for syntactic comments (default is ''@'')');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMMENTERROR','fr','inconsistent syntactic comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMPDEF','fr','parameter, return value or global completely defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMPDESTROY','fr','all only references derivable from void pointer out only parameter are released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_COMPMEMPASS','fr','actual parameter matches alias kind of formal parameter completely ');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTMACROS','fr','check all macros without parameter lists as constants');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTPREFIX','fr','set namespace prefix for constants');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTPREFIXEXCLUDE','fr','the constprefix may not be used for non-constant identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONSTUSE','fr','constant declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONTINUECOMMENT','fr','line continuation marker (\) in comment before */ on same line');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CONTROLNESTDEPTH','fr','set maximum nesting depth of compound statements, iteration control structures, and selection control structures (ANSI89 minimum is 15; ISO99 is 63)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CPPNAMES','fr','external or internal name is a C++ keyword or reserved word');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECH','fr','czech naming convention (sets accessczech, czechfunctions, czechvars, czechconstants, czechenums, and czechmacros)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHCONSTS','fr','czech naming convention violated in a constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHFCNS','fr','czech naming convention violated in a function or iterator declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHMACROS','fr','czech naming convention violated in an expanded macro name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAK','fr','czech or slovak naming convention violated');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKCONSTS','fr','czechoslovak naming convention violated in a constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKFCNS','fr','czechoslovak naming convention violated in a function or iterator declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKMACROS','fr','czechoslovak naming convention violated in an expanded macro name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKTYPES','fr','czechoslovak naming convention violated in a user-defined type definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHOSLOVAKVARS','fr','czechoslovak naming convention violated in a variable declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHTYPES','fr','czech naming convention violated in a user-defined type definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_CZECHVARS','fr','czech naming convention violated in a variable declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEBUGFCNCONSTRAINT','fr','debug function constraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DECLUNDEF','fr','function or variable declared but never defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEEPBREAK','fr','break inside nested while or for or switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEPARRAYS','fr','array elements are dependent storage');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DEPENDENTTRANS','fr','dependent transfer errors');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DISTINCTEXTERNALNAMES','fr','external name is not distinguishable from another external name using the number of significant characters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DISTINCTINTERNALNAMES','fr','internal name is not distinguishable from another internal name using the number of significant characters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DUPLICATECASES','fr','duplicate cases in switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_DUPLICATEQUALS','fr','report duplicate type qualifiers (e.g., unsigned unsigned)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ELSEIFCOMPLETE','fr','if ... else if chains must have final else');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EMPTYRET','fr','empty return in function declared to return value');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMINDEX','fr','enum can be used to index arrays');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMINT','fr','enum and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMMEMBERS','fr','enum members must be int values');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMMEMUSE','fr','member of an enum type not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMPREFIX','fr','set namespace prefix for enum members');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ENUMPREFIXEXCLUDE','fr','the enumprefix may not be used for non-enum member identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EVALORDER','fr','code has unspecified or implementation-dependent behavior because of order of evaluation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EVALORDERUNCON','fr','code involving call to unspecified function has undefined or implementation-dependent behavior');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXITARG','fr','argument to exit has implementation defined behavior');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTANY','fr','variable, function or type exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTCONST','fr','constant exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTFCN','fr','function exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTHEADER','fr','a declaration is exported but does not appear in a header file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTHEADERVAR','fr','a variable declaration is exported but does not appear in a header file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTITER','fr','constant exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTLOCAL','fr','a declaration is exported but not used outside this module');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTMACRO','fr','expanded macro exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTTYPE','fr','type definition exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPORTVAR','fr','variable exported but not specified');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXPOSETRANS','fr','exposure transfer errors');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALNAMECASEINSENSITIVE','fr','alphabetic comparisons for external names are case-insensitive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALNAMELEN','fr','set the number of significant characters in an external name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALPREFIX','fr','set namespace prefix for external identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_EXTERNALPREFIXEXCLUDE','fr','the externalprefix may not be used for non-external identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNDEREF','fr','dereferencce of a function type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNMACROS','fr','check all macros with parameter lists as functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNPOST','fr','display function post conditions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FCNUSE','fr','function declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FIELDUSE','fr','field of structure type not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FILESTATICPREFIX','fr','set namespace prefix for file static declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FILESTATICPREFIXEXCLUDE','fr','the filestaticprefix may not be used for identifiers that are not file static');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FIRSTCASE','fr','first statement in switch is not a case');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FIXEDFORMALARRAY','fr','formal parameter of type array is declared with size');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FLOATDOUBLE','fr','float and double are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORBLOCK','fr','the body of a for statement is not a block');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORCEHINTS','fr','provide a hint for every warnings');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FOREMPTY','fr','a for statement has no body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMALARRAY','fr','formal parameter is an array');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMATCODE','fr','invalid format code in format string for printf or scanf-like function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMATCONST','fr','format parameter is not a string constant (hence variable arguments cannot be typechecked)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FORMATTYPE','fr','type-mismatch in parameter corresponding to format code in a printf or scanf-like function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FRESHTRANS','fr','fresh storage transferred to non-only reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_FULLINITBLOCK','fr','initializer sets all fields');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBALIAS','fr','function returns with global aliasing external state (sets checkstrictglobalias, checkedglobalias, checkmodglobalias and uncheckedglobalias)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBALPREFIX','fr','set namespace prefix for global variables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBALPREFIXEXCLUDE','fr','the globalprefix may not be used for non-global identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBNOGLOBS','fr','use of checked global in a function with no globals list or specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBS','fr','undocumented use of a checked global variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBSIMPMODSNOTHING','fr','functions declared with a globals list but no modifies clause are assumed to modify nothing');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBSTATE','fr','returns with global in inconsistent state (null or undefined)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GLOBUSE','fr','global listed for a function not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_GNUEXTENSIONS','fr','support some gnu (gcc) language extensions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IFBLOCK','fr','the body of an if statement is not a block');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IFEMPTY','fr','an if statement has no body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IGNOREQUALS','fr','ignore type qualifiers (long, short, unsigned)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IGNORESIGNS','fr','ignore signs in type comparisons (unsigned matches signed)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IMMEDIATETRANS','fr','an immediate address (result of &) is transferred inconsistently');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IMPLEMENTATIONOPTIONAL','fr','declarator is implementation optional (ISO99 does not require an implementation to provide it)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_IMPTYPE','fr','variable declaration has unknown (implicitly int) type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCLUDENEST','fr','set maximum number of nested #include files (ANSI89 minimum is 8; ISO99 is 63)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCOMPLETETYPE','fr','formal parameter has an incomplete type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCONDEFS','fr','function, variable or constant redefined with inconsistent type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INCONDEFSLIB','fr','function, variable or constant defined in a library is redefined with inconsistent type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INFLOOPS','fr','likely infinite loop is detected');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INFLOOPSUNCON','fr','likely infinite loop is detected (may result from unconstrained function)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INITALLELEMENTS','fr','initializer defines all array elements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INITSIZE','fr','initializer defines extra array elements');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALGLOBS','fr','use of internalState');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALGLOBSNOGLOBS','fr','use of internalState (in function with no globals list)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALNAMECASEINSENSITIVE','fr','set whether case is significant an internal names (-internalnamecaseinsensitive means case is significant)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALNAMELEN','fr','set the number of significant characters in an internal name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_INTERNALNAMELOOKALIKE','fr','lookalike characters match in internal names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISO99LIMITS','fr','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ISO99 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISOLIB','fr','use normal standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISORESERVED','fr','external name conflicts with name reserved for system or standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ISORESERVEDINTERNAL','fr','internal name conflicts with name reserved for system or standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITERPREFIX','fr','set namespace prefix for iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITERPREFIXEXCLUDE','fr','the iterprefix may not be used for non-iter identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4LOW','fr','risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4MODERATE','fr','moderately risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4MOSTRISKY','fr','most risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4RISKY','fr','risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ITS4VERYRISKY','fr','very risky security vulnerabilities (from its4 database)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_KEEPTRANS','fr','keep storage transferred inconsistently');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_KEPTTRANS','fr','kept storage transferred to non-temporary reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LEGACY','fr','legacy declaration in Unix Standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIBMACROS','fr','check all macros with declarations in library as functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOOL','fr','type name is probably a boolean type but does not match default boolean type name, bool", and alternate name is not set"');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOUNDS','fr','memory bounds checking (sets likelyboundsread and likelyboundswrite)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOUNDSREAD','fr','likely out of bounds read');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LIKELYBOUNDSWRITE','fr','likely buffer overflow from an out of bounds write');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOCALPREFIX','fr','set namespace prefix for local variables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOCALPREFIXEXCLUDE','fr','the localprefix may not be used for non-local identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGINT','fr','long int and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGINTEGRAL','fr','allow long type to match an arbitrary integral type (e.g., dev_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGSIGNEDINTEGRAL','fr','allow long type to match an arbitrary signed integral type (e.g., ssize_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGUNSIGNEDINTEGRAL','fr','allow long unsigned type to match an arbitrary integral type (e.g., dev_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LONGUNSIGNEDUNSIGNEDINTEGRAL','fr','allow long unsigned type to match an arbitrary unsigned integral type (e.g., size_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOOPLOOPBREAK','fr','break inside nested while or for');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOOPLOOPCONTINUE','fr','continue inside nested loop');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_LOOPSWITCHBREAK','fr','break in switch inside loop');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROASSIGN','fr','assignment to a macro parameter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROCONSTDECL','fr','non-parameterized macro without prototype or specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROCONSTDISTANCE','fr','macro constant name does not match nearby name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACRODECL','fr','macro without prototype or specification (sets macrofcndecl and macroconstdecl)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROEMPTY','fr','macro definition for is empty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROFCNDECL','fr','parameterized macro without prototype or specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROMATCHNAME','fr','macro definition does not match iter or constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROPARAMS','fr','macro parameter not used exactly once');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROPARENS','fr','macro parameter used without parentheses (in potentially dangerous context)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROREDEF','fr','macro redefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACRORET','fr','return statement in macro body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROSTMT','fr','macro definition is syntactically not equivalent to function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROUNRECOG','fr','unrecognized identifier in macro');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROVARPREFIX','fr','set namespace prefix for variables declared in a macro body');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MACROVARPREFIXEXCLUDE','fr','the macrovarprefix may not be used for non-macro variables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MAINTYPE','fr','type of main does not match expected type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MATCHANYINTEGRAL','fr','allow any intergral type to match an arbitrary integral type (e.g., dev_t)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MATCHFIELDS','fr','struct or enum type redefined with inconsistent fields or members');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MAYALIASUNIQUE','fr','unique parameter may be aliased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MEMTRANS','fr','memory transfer errors (sets all *trans flags)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MISPLACEDSHAREQUAL','fr','declaration of unsharable storage uses sharing annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MISSCASE','fr','switch on enum type missing case for some value');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODGLOBS','fr','undocumented modification of a checked global variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODGLOBSNOMODS','fr','undocumented modification of a checked global variable in a function declared with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODGLOBSUNCHECKED','fr','undocumented modification of an unchecked checked global variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODINTERNALSTRICT','fr','possible modification of internal storage through function call');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODNOMODS','fr','modification in a function with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODOBSERVER','fr','possible modification of observer storage');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODOBSERVERUNCON','fr','possible modification of observer storage through unconstrained call');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODS','fr','unspecified modification of caller-visible state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODSIMPNOGLOBS','fr','functions declared with a modifies clause but no globals list are assumed to use no globals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODSTRICTGLOBSNOMODS','fr','undocumented modification of a strict checked global variable in a function declared with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODUNCON','fr','possible modification through a call to an unconstrained function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MODUNCONNOMODS','fr','possible modification through a call to an unconstrained function in a function with no modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MULTITHREADED','fr','function is not reentrant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTDEFINE','fr','out storage not defined before return or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTFREE','fr','fresh or only storage not released before return or scope exit (sets mustfreefresh and mustfreeonly)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTFREEFRESH','fr','freshly allocated storage not released before return or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTFREEONLY','fr','only storage not released before return or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTMOD','fr','specified modification is not detected');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUSTNOTALIAS','fr','temp storage aliased at return point or scope exit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_MUTREP','fr','representation of mutable type has sharing semantics');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEEDSPEC','fr','information in specifications is not also included in syntactic comments');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NESTCOMMENT','fr','comment begins inside comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NESTEDEXTERN','fr','an extern declaration is inside a function scope');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEVERINCLUDE','fr','optimize header inclusion to not include any header files');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEWDECL','fr','report new global declarations in source files');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEWREFTRANS','fr','new reference transfer to reference counted reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NEXTLINEMACROS','fr','the line after a constant or iter declaration must be a macro definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NOEFFECT','fr','statement with no effect');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NOEFFECTUNCON','fr','statement with no effect (except possibly through call to unconstrained function)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NOPARAMS','fr','function declaration has no parameter list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NORET','fr','path with no return detected in non-void function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULL','fr','misuses of null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLASSIGN','fr','inconsistent assignment or initialization involving null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLDEREF','fr','possible dereferencce of null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLINIT','fr','inconsistent initialization involving null pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLPASS','fr','possibly null pointer passed as formal with no null annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLPTRARITH','fr','arithmetic involving possibly null pointer and integer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLRET','fr','possibly null pointer returned as result with no null annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLSTATE','fr','possibly null pointer reachable from a reference with no null annotation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NULLTERMINATED','fr','misuse of nullterminated allocation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACT','fr','data abstraction barriers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTCAST','fr','numeric literal cast to numabstract type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTINDEX','fr','a numabstract type can be used to index an array');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTLIT','fr','numeric literal can used as numabstract type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMABSTRACTPRINT','fr','a numabstract value is printed using %d format code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMENUMMEMBERS','fr','set maximum number of members of an enum (ANSI89 minimum is 127; ISO99 is 1023)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMLITERAL','fr','int literals can be reals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_NUMSTRUCTFIELDS','fr','set maximum number of fields in a struct or union (ANSI89 minimum is 127; ISO99 is 1023)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OBSERVERTRANS','fr','observer transfer errors');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OLDSTYLE','fr','old style function definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ONLYTRANS','fr','only storage transferred to non-only reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_ONLYUNQGLOBALTRANS','fr','only storage transferred to an unqualified global or static reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OVERLOAD','fr','library function overloaded');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_OWNEDTRANS','fr','owned storage transferred to non-owned reference (memory leak)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PARAMUSE','fr','function parameter not used ');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PORTABILITY','fr','function may have undefined behavior');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_POSIXLIB','fr','use POSIX standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_POSIXSTRICTLIB','fr','use strict POSIX standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDASSIGN','fr','condition test (if, while or for) is an assignment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOL','fr','type of condition test (if, while or for) not bool (sets predboolint, predboolptr and predboolothers)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOLINT','fr','type of condition test (if, while or for) is an integral type');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOLOTHERS','fr','type of condition test (if, while or for) not bool, int or pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREDBOOLPTR','fr','type of condition test (if, while or for) is a pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PREPROC','fr','preprocessing error');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMMATCH','fr','the name of a parameter in a function prototype and corresponding declaration must match (after removing the protoparamprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMNAME','fr','a parameter in a function prototype has a name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMPREFIX','fr','set namespace prefix for parameters in function prototype declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PROTOPARAMPREFIXEXCLUDE','fr','the protoparamprefix may not be used for non-declaraction parameter identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PTRARITH','fr','arithmetic involving pointer and integer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PTRCOMPARE','fr','comparison between pointer and number');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_PTRNEGATE','fr','allow ! to be used on pointer operand');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_READONLYSTRINGS','fr','string literals are read-only (error if one is modified or released)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_READONLYTRANS','fr','report memory transfer errors for initializations to read-only string literals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REALCOMPARE','fr','dangerous equality comparison between reals (dangerous because of inexact floating point representations)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REALRELATECOMPARE','fr','possibly dangerous relational comparison between reals (dangerous because of inexact floating point representations)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDECL','fr','function or variable redeclared');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDEF','fr','function or variable redefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDUNDANTCONSTRAINTS','fr','display seemingly redundant constraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REDUNDANTSHAREQUAL','fr','declaration uses observer qualifier that is always true');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REFCOUNTTRANS','fr','reference counted storage is transferred in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RELAXQUALS','fr','report qualifier mismatches only if dangerous');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RELAXTYPES','fr','allow all numeric types to match');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REPEATUNRECOG','fr','do not suppress repeated unrecognized identifier messages (instead of only reporting the first error)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_REPEXPOSE','fr','abstract representation is exposed (sets assignexpose, retexpose, and castexpose)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETALIAS','fr','function returns alias to parameter or global');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETEXPOSE','fr','abstract representation is exposed (return values only)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVAL','fr','return value ignored (sets retvalint, retvalbool and retvalother)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVALBOOL','fr','return value of manifest type bool ignored');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVALINT','fr','return value of type int ignored');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_RETVALOTHER','fr','return value of type other than bool or int ignored');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SEFPARAMS','fr','a parameter with side-effects is passed as a sef parameter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SEFUNCON','fr','a parameter with unconstrained side-effects is passed as a sef parameter');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHADOW','fr','declaration reuses name visible in outer scope');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHAREDTRANS','fr','shared storage transferred to non-shared reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHIFTIMPLEMENTATION','fr','a shift left operand may be negative');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHIFTNEGATIVE','fr','a shift right operand may be negative');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SHORTINT','fr','short int and int are equivalent');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SINGLEINCLUDE','fr','optimize header inclusion to eliminate redundant includes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SIZEOFFORMALARRAY','fr','sizeof operator has an array formal parameter argument');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SIZEOFTYPE','fr','sizeof operator has a type argument');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLASHSLASHCOMMENT','fr','use of // comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAK','fr','slovak naming convention violated');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKCONSTS','fr','slovak naming convention violated in a constant declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKFCNS','fr','slovak naming convention violated in a function or iterator declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKMACROS','fr','slovak naming convention violated in an expanded macro name');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKTYPES','fr','slovak naming convention violated in a use-defined type definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SLOVAKVARS','fr','slovak naming convention violated in a variable declaration');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SPECUNDECL','fr','function or variable specified but never declared in a source file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SPECUNDEF','fr','function or variable specified but never defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STACKREF','fr','external reference to stack-allocated storage is created');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATEMERGE','fr','control paths merge with storage in incompatible states');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATETRANSFER','fr','storage has been transfered with invalid state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATICINITTRANS','fr','static storage is used as an initial value in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STATICTRANS','fr','static storage is transferred in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTBRANCHSTATE','fr','storage through array fetch has inconsistent states of alternate paths through a branch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTLIB','fr','interpret standard library strictly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTOPS','fr','primitive operation does not type check strictly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRICTUSERELEASED','fr','element used after it may have been released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALLEN','fr','set maximum length of string literals (ANSI89 minimum is 509; ISO99 is 4095)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALNOROOM','fr','string literal leaves no room for null terminator');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALNOROOMFINALNULL','fr','string literal leaves no room for null terminator');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALSMALLER','fr','string literal is smaller than the char array it is assigned to');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_STRINGLITERALTOOLONG','fr','string literal too long for character array');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SUPERUSER','fr','function is restricted to superusers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SWITCHLOOPBREAK','fr','break in loop inside switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SWITCHSWITCHBREAK','fr','break in switch inside switch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SYNTAX','fr','syntax error in parsing');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SYSDIRS','fr','set directories for system files (default /usr/include). Separate directories with path separator (colons in Unix, semi-colons in Windows). Flag settings propagate to files in a system directory. If -sysdirerrors is set, no errors are reported for files in system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_SYSUNRECOG','fr','report unrecognized identifiers with system (__) prefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TAGPREFIX','fr','set namespace prefix for struct, union and enum tags');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TAGPREFIXEXCLUDE','fr','the tagprefix may not be used for non-tag identifiers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TEMPTRANS','fr','temp storage transferred to non-temporary reference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TOCTOU','fr','possible time of check, time of use vulnerability');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TOPUSE','fr','declaration at top level not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TRYTORECOVER','fr','try to recover from parse error');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPE','fr','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPEPREFIX','fr','set namespace prefix for user-defined types');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPEPREFIXEXCLUDE','fr','the typeprefix may not be used for identifiers that are not type names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_TYPEUSE','fr','type declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNCHECKEDGLOBALIAS','fr','function returns with an unchecked global aliasing external state');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNCHECKEDMACROPREFIX','fr','set namespace prefix for unchecked macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNCHECKEDMACROPREFIXEXCLUDE','fr','the uncheckmacroprefix may not be used for identifiers that are not unchecked macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIONDEF','fr','at least one field of a union must be defined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIXLIB','fr','use UNIX (sort-of) standard library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIXSTANDARD','fr','function is not required in Standard UNIX Specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNIXSTRICTLIB','fr','use strict version of UNIX (sort-of) library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNQUALIFIEDINITTRANS','fr','unqualified storage is used as an initial value in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNQUALIFIEDTRANS','fr','unqualified storage is transferred in an inconsistent way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNREACHABLE','fr','unreachable code detected');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOG','fr','unrecognized identifier');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOGCOMMENTS','fr','stylized comment is unrecognized');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOGDIRECTIVE','fr','unrecognized pre-processor directive');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNRECOGFLAGCOMMENTS','fr','stylized flag comment uses an unrecognized flag');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_UNSIGNEDCOMPARE','fr','comparison using <, <=, >= between an unsigned integral and zero constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_USEDEF','fr','use before definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_USERELEASED','fr','storage used after release');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_USEVARARGS','fr','non-standard <varargs.h> included');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_VARUSE','fr','variable declared but not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_VOIDABSTRACT','fr','void * matches pointers to abstract types, casting ok (dangerous)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNFLAGS','fr','warn when command line sets flag in abnormal way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNLINTCOMMENTS','fr','warn when a traditional lint comment is used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNMISSINGGLOBS','fr','global variable used in modifies clause is not listed in globals list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNMISSINGGLOBSNOGLOBS','fr','global variable used in modifies clause in a function with no globals list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNPOSIXHEADERS','fr','a POSIX header is included, but the POSIX library is not used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNRC','fr','warn when there are problems with reading the initialization files');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNSYSFILES','fr','Splint has been run on a system file, by default no errors are reported for system files.  Use +systemdirerrors if you want splint to report errors in system files.  A file is considered a system file if it is in a system directory or a subdirectory of a system directory.  The sysdirs flag can be used to control the directories treated as system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNUNIXLIB','fr','warn when the unix library is used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WARNUSE','fr','warn when declaration marked with warn is used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WHILEBLOCK','fr','the body of a while statement is not a block');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','SPLINT_WHILEEMPTY','fr','a while statement has no body');


INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ABSTRACT','fr','An abstraction barrier is broken. If necessary, use /*@access <type>@*/ to allow access to an abstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ABSTRACTCOMPARE','fr','An object comparison (== or !=) is used on operands of abstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSALL','fr','Sets accessmodule, accessfile and accessczech');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSCZECH','fr','The representation of an abstract type named <t> is accessible in the definition of a function or constant named <t>_<name>');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSCZECHOSLOVAK','fr','The representation of an abstract type named <t> is accessible in the definition of a function or constant named <t>_<name> or <t><Name>');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSFILE','fr','The representation of an abstract type named <t> is accessible anywhere in a file named <t>.<x>.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSMODULE','fr','The representation of an abstract type defined in <M>.<x> is accessible anywhere in a file named <M>.<y>.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ACCESSSLOVAK','fr','The representation of an abstract type named <t> is accessible in the definition of a function or constant named <t><Name>');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALIASUNIQUE','fr','A unique or only parameter is aliased by some other parameter or visible global.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALLBLOCK','fr','Body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALLEMPTY','fr','an if, while or for statement has no body (sets ifempty, whileempty and forempty');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALLOCMISMATCH','fr','type conversion involves storage of non-divisble size');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ALWAYSEXITS','fr','loop predicate always exits');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ANNOTATIONERROR','fr','A declaration uses an invalid annotation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ANSI89LIMITS','fr','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ANSI89 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ASSIGNEXPOSE','fr','Storage internal to the representation of an abstract type is assigned to an external pointer. This means clients may have access to a pointer into the abstract representation. If the external pointer is a parameter, the exposed qualifier can be used to allow the assignment, however, this is considered dangerous programming practice.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BADFLAG','fr','warn about bad command line flags');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BITWISESIGNED','fr','An operand to a bitwise operator is not an unsigned values.  This may have unexpected results depending on the signed representations.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOOLCOMPARE','fr','Two bool values are compared directly using a C primitive. This may produce unexpected results since all non-zero values are considered true, so different true values may not be equal. The file bool.h (included in splint/lib) provides bool_equal for safe bool comparisons.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOOLINT','fr','To make bool and int types equivalent, use +boolint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOOLOPS','fr','The operand of a boolean operator is not a boolean. Use +ptrnegate to allow ! to be used on pointers.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOUNDS','fr','Memory read or write may be out of bounds of allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOUNDSREAD','fr','A memory read references memory beyond the allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BOUNDSWRITE','fr','A memory write may write to an address beyond the allocated buffer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BRANCHSTATE','fr','The state of a variable is different depending on which branch is taken. This means no annotation can sensibly be applied to the storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BUFFEROVERFLOW','fr','Use of function that may lead to buffer overflow.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_BUFFEROVERFLOWHIGH','fr','Use of function that may lead to buffer overflow.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CASEBREAK','fr','Execution falls through from the previous case (use /*@fallthrough@*/ to mark fallthrough cases).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CASTEXPOSE','fr','Storage internal to the representation of an abstract type is exposed through a type cast. This means clients may have access to a pointer into the abstract representation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CASTFCNPTR','fr','A pointer to a function is cast to (or used as) a pointer to void (or vice versa).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARINDEX','fr','To allow char types to index arrays, use +charindex.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARINT','fr','To make char and int types equivalent, use +charint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARINTLITERAL','fr','A character constant is used as an int. Use +charintliteral to allow character constants to be used as ints.  (This is safe since the actual type of a char constant is int.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHARUNSIGNEDCHAR','fr','To allow char and unsigned char types to match use +charunsignedchar.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKEDGLOBALIAS','fr','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKMODGLOBALIAS','fr','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKPOST','fr','The function implementation may not satisfy a post condition given in an ensures clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CHECKSTRICTGLOBALIAS','fr','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMMENTCHAR','fr','Set the marker character for syntactic comments. Comments beginning with /*<char> are interpreted by Splint, where <char> is the comment marker character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMMENTERROR','fr','A syntactic comment is used inconsistently.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMPDEF','fr','Storage derivable from a parameter, return value or global is not defined. Use /*@out@*/ to denote passed or returned storage which need not be defined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMPDESTROY','fr','A storage leak due to incomplete deallocation of a structure or deep pointer is suspected. Unshared storage that is reachable from a reference that is being deallocated has not yet been deallocated. Splint assumes when an object is passed as an out only void pointer that the outer object will be deallocated, but the inner objects will not.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_COMPMEMPASS','fr','Storage derivable from a parameter does not match the alias kind expected for the formal parameter.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTMACROS','fr','Every non-parameterized macro (not preceded by /*@notfunction@*/) is checked as a constant.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTPREFIX','fr','A constant does not start with the constantprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTPREFIXEXCLUDE','fr','An identifier that is not a constant starts with the constantprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONSTUSE','fr','A constant is declared but not used. Use unused in the constant declaration to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONTINUECOMMENT','fr','A line continuation marker (\) appears inside a comment on the same line as the comment close. Preprocessors should handle this correctly, but it causes problems for some preprocessors.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CONTROLNESTDEPTH','fr','Maximum number of control levels exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CPPNAMES','fr','External name is a C++ keyword or reserved word. This could lead to problems if the code is compiled with a C++ compiler.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECH','fr','Name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHCONSTS','fr','Constant name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHFCNS','fr','Function or iterator name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHMACROS','fr','Expanded macro name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAK','fr','Name is not consistent with either Czech or Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKCONSTS','fr','Constant name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKFCNS','fr','Function name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKMACROS','fr','Expanded macro name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKTYPES','fr','Type name is not consistent with Czechoslovak naming convention. Czechoslovak type names may not include uppercase letters or the underscore character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHOSLOVAKVARS','fr','Variable name is not consistent with Czechoslovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHTYPES','fr','Type name is not consistent with Czech naming convention. Czech type names must not use the underscore character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_CZECHVARS','fr','Variable name is not consistent with Czech naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEBUGFCNCONSTRAINT','fr','Perform buffer overflow checking even if the errors would be surpressed.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DECLUNDEF','fr','A function or variable is declared, but not defined in any source code file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEEPBREAK','fr','A break statement appears inside the body of a nested while, for or switch statement. Sets looploopbreak, loopswitchbreak, switchloopbreak, switchswitchbreak, and looploopcontinue.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEPARRAYS','fr','When an element is fetched from an array, Splint analysis is not able to determine if the same element is reused. If +deparrays, Splint will mark local storage assigned from array fetches as dependent.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DEPENDENTTRANS','fr','Dependent storage is transferred to a non-dependent reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DISTINCTEXTERNALNAMES','fr','An external name is not distinguishable from another external name using the number of significant characters. According to ANSI Standard (3.1), an implementation may only consider the first 6 characters significant, and ignore alphabetical case distinctions (ISO C99 requires 31). The +externalnamelen <n> flag may be used to change the number of significant characters, and -externalnamecaseinsensitive to make alphabetical case significant in external names.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DISTINCTINTERNALNAMES','fr','An internal name is not distinguishable from another internal name using the number of significant characters. According to ANSI89 Standard (3.1), an implementation may only consider the first 31 characters significant (ISO C99 specified 63). The +internalnamelen <n> flag changes the number of significant characters, -internalnamecaseinsensitive to makes alphabetical case significant, and +internalnamelookalike to make similar-looking characters non-distinct.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DUPLICATECASES','fr','Duplicate cases in switch.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_DUPLICATEQUALS','fr','Duplicate type qualifiers not supported by ISO standard.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ELSEIFCOMPLETE','fr','There is no final else following an else if construct.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EMPTYRET','fr','empty return in function declared to return value');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMINDEX','fr','To allow enum types to index arrays, use +enumindex.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMINT','fr','To make enum and int types equivalent, use +enumint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMMEMBERS','fr','Type of initial values for enum members must be int.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMMEMUSE','fr','A member of an enum type is never used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMPREFIX','fr','An enum member does not start with the enumprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ENUMPREFIXEXCLUDE','fr','An identifier that is not an enum member starts with the enumprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EVALORDER','fr','Code has unspecified behavior. Order of evaluation of function parameters or subexpressions is not defined, so if a value is used and modified in different places not separated by a sequence point constraining evaluation order, then the result of the expression is unspecified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EVALORDERUNCON','fr','Code involving a call to function with no modifies or globals clause may have undefined or implementation-dependent behavior (Splint assumes the unconstrained call may modify any reachable state or use any global). Add a specification for the function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXITARG','fr','The argument to exit should be 0, EXIT_SUCCESS or EXIT_FAILURE');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTANY','fr','A variable, function or type is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTCONST','fr','A constant is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTFCN','fr','A function is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTHEADER','fr','A declaration is exported, but does not appear in a header file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTHEADERVAR','fr','A variable declaration is exported, but does not appear in a header file. (Used with exportheader.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTITER','fr','A constant is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTLOCAL','fr','A declaration is exported, but not used outside this module. Declaration can use static qualifier.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTMACRO','fr','A macro is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTTYPE','fr','A type is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPORTVAR','fr','A variable is exported, but not specified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXPOSETRANS','fr','Exposed storage is transferred to a non-exposed, non-observer reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALNAMECASEINSENSITIVE','fr','Make alphabetic case insignificant in external names. By ANSI89 standard, case need not be significant in an external name. If +distinctexternalnames is not set, sets +distinctexternalnames with unlimited external name length.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALNAMELEN','fr','Sets the number of significant characters in an external name (default is 6 for old ANSI89 limit, C99 requires 31). Sets +distinctexternalnames.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALPREFIX','fr','An external identifier does not start with the externalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_EXTERNALPREFIXEXCLUDE','fr','An identifier that is not external starts with the externalprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNDEREF','fr','A function type is dereferenced.  The ANSI standard allows this because of implicit conversion of function designators, however the dereference is unnecessary.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNMACROS','fr','Every parameterized macro (not preceded by /*@notfunction@*/) is checked as a function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNPOST','fr','Display function post conditions.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FCNUSE','fr','A function is declared but not used. Use /*@unused@*/ in front of function header to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FIELDUSE','fr','A field is present in a structure type but never used. Use /*@unused@*/ in front of field declaration to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FILESTATICPREFIX','fr','A file-static identifier does not start with the filestaticprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FILESTATICPREFIXEXCLUDE','fr','An identifier that is not file static starts with the filestaticprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FIRSTCASE','fr','The first statement after a switch is not a case.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FIXEDFORMALARRAY','fr','A formal parameter is declared as an array with size.  The size of the array is ignored in this context, since the array formal parameter is treated as a pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FLOATDOUBLE','fr','To make float and double types equivalent, use +floatdouble.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORBLOCK','fr','Loop body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORCEHINTS','fr','Provide a hint for every warning');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FOREMPTY','fr','For statement has no body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMALARRAY','fr','A formal parameter is declared as an array.  This can be confusing, since a formal array parameter is treated as a pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMATCODE','fr','Format code in a format string is not valid.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMATCONST','fr','Format parameter is not known at compile-time.  This can lead to security vulnerabilities because the arguments cannot be type checked.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FORMATTYPE','fr','Type of parameter is not consistent with corresponding code in format string.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FRESHTRANS','fr','Fresh storage (newly allocated in this function) is transferred in a way that the obligation to release storage is not propagated.  Use the /*@only@*/ annotation to indicate the a return value is the only reference to the returned storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_FULLINITBLOCK','fr','Initializer does not set every field in the structure.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBALIAS','fr','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBALPREFIX','fr','A global variable does not start with the globalprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBALPREFIXEXCLUDE','fr','An identifier that is not a global variable starts with the globalprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBNOGLOBS','fr','A specified global variable is used in the function, but not listed in its globals list. Without +globnoglobs, only globals declared with /*@checkedstrict@*/ will produce use errors in functions without globals lists. The /*@globals ... @*/ control comment can be used to give a globals list for an unspecified function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBS','fr','A checked global variable is used in the function, but not listed in its globals clause. By default, only globals specified in .lcl files are checked. To check all globals, use +allglobals. To check globals selectively use /*@checked@*/ in the global declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBSIMPMODSNOTHING','fr','An implicit modifies nothing clause is assumed for a function declared with a globals list but not modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBSTATE','fr','A global variable does not satisfy its annotations when control is transferred.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GLOBUSE','fr','A global variable listed in the function''s globals list is not used in the body of the function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_GNUEXTENSIONS','fr','ANSI C does not allow some language features supported by gcc and other compilers. Use +gnuextensions to allow some of these extensions.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IFBLOCK','fr','If body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IFEMPTY','fr','If statement has no body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IGNOREQUALS','fr','To ignore type qualifiers in type comparisons use +ignorequals.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IGNORESIGNS','fr','To ignore signs in type comparisons use +ignoresigns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IMMEDIATETRANS','fr','An immediate address (result of & operator) is transferred inconsistently.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IMPLEMENTATIONOPTIONAL','fr','Use of a declarator that is implementation optional, not required by ISO99.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_IMPTYPE','fr','A variable declaration has no explicit type.  The type is implicitly int.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCLUDENEST','fr','Maximum number of nested #include files exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCOMPLETETYPE','fr','A formal parameter is declared with an incomplete type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCONDEFS','fr','A function, variable or constant is redefined with a different type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INCONDEFSLIB','fr','A function, variable or constant previously defined in a library is redefined with a different type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INFLOOPS','fr','This appears to be an infinite loop. Nothing in the body of the loop or the loop test modifies the value of the loop test. Perhaps the specification of a function called in the loop body is missing a modification.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INFLOOPSUNCON','fr','This appears to be an infinite loop. Nothing in the body of the loop or the loop test modifies the value of the loop test. There may be a modification through a call to an unconstrained function, or an unconstrained function in the loop test may use a global variable modified by the loop body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INITALLELEMENTS','fr','Initializer does not define all elements of a declared array.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INITSIZE','fr','Initializer block contains more elements than the size of a declared array.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALGLOBS','fr','A called function uses internal state, but the globals list for the function being checked does not include internalState');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALGLOBSNOGLOBS','fr','A called function uses internal state, but the function being checked has no globals list');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALNAMECASEINSENSITIVE','fr','Set whether case is significant an internal names (-internalnamecaseinsensitive means case is significant). By ANSI89 default, case is not significant.  If +distinctinternalnames is not set, sets +distinctinternalnames with unlimited internal name length.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALNAMELEN','fr','Sets the number of significant characters in an internal name (ANSI89 default is 31.)  Sets +distinctinternalnames.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_INTERNALNAMELOOKALIKE','fr','Set whether similar looking characters (e.g., 1 and l) match in internal names.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISO99LIMITS','fr','check for violations of standard limits (controlnestdepth, stringliterallen, includenest, numstructfields, numenummembers) based on ISO99 standard');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISOLIB','fr','Library based on the ISO standard library specification is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISORESERVED','fr','External name is reserved for system use by ISO C99 standard.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ISORESERVEDINTERNAL','fr','Internal name is reserved for system in ISO C99 standard (this should not be necessary unless you are worried about C library implementations that violate the standard and use macros).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITERPREFIX','fr','An iter does not start with the iterator prefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITERPREFIXEXCLUDE','fr','An identifier that is not a iter starts with the iterprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4LOW','fr','Security vulnerability classified as risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4MODERATE','fr','Security vulnerability classified as moderate risk in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4MOSTRISKY','fr','Security vulnerability classified as most risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4RISKY','fr','Security vulnerability classified as risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ITS4VERYRISKY','fr','Security vulnerability classified as very risky in its4 database.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_KEEPTRANS','fr','Keep storage is transferred inconsistently --- either in a way that may add a new alias to it, or release it.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_KEPTTRANS','fr','storage is transferred to a non-temporary reference after being passed as keep parameter. The storage may be released or new aliases created.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LEGACY','fr','Use of a declarator that is marked as a legacy entry in the Unix Standard.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIBMACROS','fr','Every macro declared in the load library is checked.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOOL','fr','Use the -booltype, -boolfalse and -booltrue flags to change the name of the default boolean type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOUNDS','fr','Memory read or write may be out of bounds of allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOUNDSREAD','fr','A memory read references memory beyond the allocated storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LIKELYBOUNDSWRITE','fr','A memory write may write to an address beyond the allocated buffer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOCALPREFIX','fr','A local variable does not start with the localprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOCALPREFIXEXCLUDE','fr','An identifier that is not a local variable starts with the localprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGINT','fr','To make long int and int types equivalent, use +longint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGINTEGRAL','fr','To allow arbitrary integral types to match long unsigned, use +longintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGSIGNEDINTEGRAL','fr','To allow arbitrary signed integral types to match long unsigned, use +longsignedintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGUNSIGNEDINTEGRAL','fr','To allow arbitrary integral types to match long unsigned, use +longunsignedintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LONGUNSIGNEDUNSIGNEDINTEGRAL','fr','To allow arbitrary unsigned integral types to match long unsigned, use +longunsignedunsignedintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOOPLOOPBREAK','fr','A break statement appears inside the body of a nested while or for statement. This is perfectly reasonable code, but check that the break is intended to break only the inner loop. The break statement may be preceded by /*@innerbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOOPLOOPCONTINUE','fr','A continue statement appears inside a loop within a loop. This is perfectly reasonable code, but check that the continue is intended to continue only the inner loop. The continue statement may be preceded by /*@innercontinue@*/ to suppress the message for this continue only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_LOOPSWITCHBREAK','fr','A break statement appears inside a switch statement within a while or for loop. This is perfectly reasonable code, but check that the break is intended to break only the inner loop. The break statement may be preceded by /*@switchbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROASSIGN','fr','A macro parameter is used as the left side of an assignment expression. This exhibits behavior that could not be implemented by a function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROCONSTDECL','fr','Macro constant has no declaration. Use /*@constant ...@*/ to declare the macro.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROCONSTDISTANCE','fr','Macro constant name does matches name of a previous declaration, but they are not near each other.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACRODECL','fr','Argument checking cannot be done well for macros without prototypes or specifications, since the types of the arguments are unknown.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROEMPTY','fr','A macro definition has no body.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROFCNDECL','fr','Function macro has no declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROMATCHNAME','fr','A iter or constant macro is defined using a different name from the one used in the previous syntactic comment');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROPARAMS','fr','A macro parameter is not used exactly once in all possible invocations of the macro. To behave like a function, each macro parameter must be used exactly once on all invocations of the macro so that parameters with side-effects are evaluated exactly once. Use /*@sef@*/ to denote parameters that must be side-effect free.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROPARENS','fr','A macro parameter is used without parentheses. This could be dangerous if the macro is invoked with a complex expression and precedence rules will change the evaluation inside the macro.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROREDEF','fr','A macro is defined in more than one place.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACRORET','fr','The body of a macro declared as a function uses a return statement. This exhibits behavior that could not be implemented by a function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROSTMT','fr','A macro is defined in a way that may cause syntactic problems. If the macro returns a value, use commas to separate expressions; otherwise, use do { <macro body> } while (FALSE) construct.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROUNRECOG','fr','An unrecognized identifier appears in a macro. If the identifier is defined before the macro is used, then this is okay.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROVARPREFIX','fr','A variable declared in a macro body does not start with the macrovarprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MACROVARPREFIXEXCLUDE','fr','A variable declared outside a macro body starts with the macrovarprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MAINTYPE','fr','The function main does not match the expected type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MATCHANYINTEGRAL','fr','To allow arbitrary integral types to match any integral type, use +matchanyintegral.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MATCHFIELDS','fr','A struct, union or enum type is redefined with inconsistent fields or members.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MAYALIASUNIQUE','fr','A unique or only parameter may be aliased by some other parameter or visible global.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MEMTRANS','fr','Memory is transferred in a way that violates annotations.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MISPLACEDSHAREQUAL','fr','A declaration of an unsharable object uses a sharing annotation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MISSCASE','fr','Not all values in an enumeration are present as cases in the switch.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODGLOBS','fr','A checked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODGLOBSNOMODS','fr','A checked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODGLOBSUNCHECKED','fr','An unchecked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODINTERNALSTRICT','fr','A function that modifies internalState is called from a function that does not list internalState in its modifies clause');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODNOMODS','fr','An externally-visible object is modified by a function with no /*@modifies@*/ comment. The /*@modifies ... @*/ control comment can be used to give a modifies list for an unspecified function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODOBSERVER','fr','Storage declared with observer is possibly modified. Observer storage may not be modified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODOBSERVERUNCON','fr','Storage declared with observer may be modified through a call to an unconstrained function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODS','fr','An externally-visible object is modified by a function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODSIMPNOGLOBS','fr','An implicit empty globals list is assumed for a function declared with a modifies clause but no globals list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODSTRICTGLOBSNOMODS','fr','A checked global variable is modified by the function, but not listed in its modifies clause.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODUNCON','fr','An unconstrained function is called in a function body where modifications are checked. Since the unconstrained function may modify anything, there may be undetected modifications in the checked function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MODUNCONNOMODS','fr','An unconstrained function is called in a function body where modifications are checked. Since the unconstrained function may modify anything, there may be undetected modifications in the checked function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MULTITHREADED','fr','Non-reentrant function should not be used in multithreaded code.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTDEFINE','fr','An out parameter or global is not defined before control is transferred.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTFREE','fr','A memory leak has been detected.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTFREEFRESH','fr','A memory leak has been detected. Storage allocated locally is not released before the last reference to it is lost.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTFREEONLY','fr','A memory leak has been detected. Only-qualified storage is not released before the last reference to it is lost.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTMOD','fr','An object listed in the modifies clause is not modified by the implementation of the function. The modification may not be detected if it is done through a call to an unspecified function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUSTNOTALIAS','fr','An alias has been added to a temp-qualifier parameter or global that is visible externally when the function returns. If the aliasing is needed, use the /*@shared@*/ annotation to indicate that new aliases to the parameter may be created.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_MUTREP','fr','LCL semantics requires that a mutable type exhibits sharing semantics. In order for objects to be shared a indirection is necessary in the representation. A mutable type may be represented by a pointer or an abstract mutable type. Handles into static data are fine, too, but will generate this error message unless it is suppressed.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEEDSPEC','fr','There is information in the specification that is not duplicated in syntactic comments. Normally, this is not an error, but it may be useful to detect it to make sure checking incomplete systems without the specifications will still use this information.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NESTCOMMENT','fr','A comment open sequence (/*) appears within a comment.  This usually means an earlier comment was not closed.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NESTEDEXTERN','fr','An extern declaration is used inside a function scope.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEVERINCLUDE','fr','Ignore header includes. Only works if relevant information is loaded from a library.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEWDECL','fr','There is a new declaration that is not declared in a loaded library or earlier file.  (Use this flag to check for consistency against a library.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEWREFTRANS','fr','A new reference is transferred to a reference counted reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NEXTLINEMACROS','fr','A constant or iter declaration is not immediately followed by a macro definition.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NOEFFECT','fr','Statement has no visible effect --- no values are modified.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NOEFFECTUNCON','fr','Statement has no visible effect --- no values are modified. It may modify something through a call to an unconstrained function.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NOPARAMS','fr','A function declaration does not have a parameter list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NORET','fr','There is a path through a function declared to return a value on which there is no return statement. This means the execution may fall through without returning a meaningful result to the caller.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULL','fr','A possibly null pointer is misused (sets nullderef, nullpass, nullref, nullassign, and nullstate).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLASSIGN','fr','A reference with no null annotation is assigned or initialized to NULL.  Use /*@null@*/ to declare the reference as a possibly null pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLDEREF','fr','A possibly null pointer is dereferenced.  Value is either the result of a function which may return null (in which case, code should check it is not null), or a global, parameter or structure field declared with the null qualifier.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLINIT','fr','A reference with no null annotation is initialized to NULL.  Use /*@null@*/ to declare the reference as a possibly null pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLPASS','fr','A possibly null pointer is passed as a parameter corresponding to a formal parameter with no /*@null@*/ annotation.  If NULL may be used for this parameter, add a /*@null@*/ annotation to the function parameter declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLPTRARITH','fr','Pointer arithmetic using a possibly null pointer and integer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLRET','fr','Function returns a possibly null pointer, but is not declared using /*@null@*/ annotation of result.  If function may return NULL, add /*@null@*/ annotation to the return value declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLSTATE','fr','A possibly null pointer is reachable from a parameter or global variable that is not declared using a /*@null@*/ annotation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NULLTERMINATED','fr','A possibly non-nullterminated string/memory is used/referenced as a nullterminated one.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACT','fr','An abstraction barrier involving a numabstract type is broken. If necessary, use /*@access <type>@*/ to allow access to a numabstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTCAST','fr','A numeric literal is cast to a numabstract type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTINDEX','fr','To allow numabstract types to index arrays, use +numabstractindex.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTLIT','fr','To allow a numeric literal to be used as a numabstract type, use +numabstractlit.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMABSTRACTPRINT','fr','A numabstract value is printed usind %d format code in a printf.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMENUMMEMBERS','fr','Limit on maximum number of members of an enum is exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMLITERAL','fr','An int literal is used as any numeric type (including float and long long). Use +numliteral to allow int literals to be used as any numeric type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_NUMSTRUCTFIELDS','fr','Maximum number of fields in a struct or union exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OBSERVERTRANS','fr','Observer storage is transferred to a non-observer reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OLDSTYLE','fr','Function definition is in old style syntax. Standard prototype syntax is preferred.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ONLYTRANS','fr','The only reference to this storage is transferred to another reference (e.g., by returning it) that does not have the only annotation. This may lead to a memory leak, since the new reference is not necessarily released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_ONLYUNQGLOBALTRANS','fr','The only reference to this storage is transferred to another reference that does not have an aliasing annotation. This may lead to a memory leak, since the new reference is not necessarily released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OVERLOAD','fr','A function, variable or constant defined in the library is redefined with a different type.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_OWNEDTRANS','fr','The owned reference to this storage is transferred to another reference (e.g., by returning it) that does not have the owned annotation. This may lead to a memory leak, since the new reference is not necessarily released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PARAMUSE','fr','A function parameter is not used in the body of the function. If the argument is needed for type compatibility or future plans, use /*@unused@*/ in the argument declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PORTABILITY','fr','Use of function that may have implementation-dependent behavior.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_POSIXLIB','fr','POSIX version of the standard library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_POSIXSTRICTLIB','fr','POSIX version of the strict standard library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDASSIGN','fr','The condition test is an assignment expression. Probably, you mean to use == instead of =. If an assignment is intended, add an extra parentheses nesting (e.g., if ((a = b)) ...) to suppress this message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOL','fr','Test expression type is not boolean.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOLINT','fr','Test expression type is not boolean or int.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOLOTHERS','fr','Test expression type is not boolean.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREDBOOLPTR','fr','Test expression type is not boolean.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PREPROC','fr','Preprocessing error.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMMATCH','fr','A parameter in a function definition does not have the same name as the corresponding in the declaration of the function after removing the protoparamprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMNAME','fr','A parameter in a function prototype has a name.  This is dangerous, since a macro definition could be visible here.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMPREFIX','fr','A parameter name in a function prototype declaration does not start with the declaration parameter prefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PROTOPARAMPREFIXEXCLUDE','fr','An identifier that is not a parameter name in a function prototype starts with the protoparamprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PTRARITH','fr','Pointer arithmetic using pointer and integer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PTRCOMPARE','fr','A pointer is compared to a number.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_PTRNEGATE','fr','The operand of ! operator is a pointer.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_READONLYSTRINGS','fr','String literals are read-only. An error is reported if a string literal may be modified or released.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_READONLYTRANS','fr','A read-only string literal is assigned to a non-observer reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REALCOMPARE','fr','Two real (float, double, or long double) values are compared directly using == or != primitive. This may produce unexpected results since floating point representations are inexact. Instead, compare the difference to FLT_EPSILON or DBL_EPSILON.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REALRELATECOMPARE','fr','Two real (float, double, or long double) values are compared directly using < or >. This may produce unexpected results since floating point representations are inexact. Instead, compare the difference to FLT_EPSILON or DBL_EPSILON.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDECL','fr','A function or variable is declared in more than one place. This is not necessarily a problem, since the declarations are consistent.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDEF','fr','A function or variable is redefined. One of the declarations should use extern.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDUNDANTCONSTRAINTS','fr','Display seemingly redundant constraints');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REDUNDANTSHAREQUAL','fr','A declaration of an immutable object uses a redundant observer qualifier.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REFCOUNTTRANS','fr','Reference counted storage is transferred in a way that may not be consistent with the reference count.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RELAXQUALS','fr','To allow qualifier mismatches that are not dangerous, use +relaxquals.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RELAXTYPES','fr','To allow all numeric types to match, use +relaxtypes.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REPEATUNRECOG','fr','Identifier used in code has not been declared. (Message repeated for future uses in this file.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_REPEXPOSE','fr','The internal representation of an abstract type is visible to the caller. This means clients may have access to a pointer into the abstract representation.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETALIAS','fr','The returned value shares storage with a parameter or global. If a parameter is to be returned, use the returned qualifier. If the result is not modified, use the observer qualifier on the result type. Otherwise, exposed can be used, but limited checking is done.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETEXPOSE','fr','The return value shares storage with an instance of an abstract type. This means clients may have access to a pointer into the abstract representation. Use the observer qualifier to return exposed storage that may not be modified by the client. Use the exposed qualifier to return modifiable (but not deallocatable) exposed storage (dangerous).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVAL','fr','Result returned by function call is not used. If this is intended, cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVALBOOL','fr','Result returned by function call is not used. If this is intended, can cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVALINT','fr','Result returned by function call is not used. If this is intended, can cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_RETVALOTHER','fr','Result returned by function call is not used. If this is intended, can cast result to (void) to eliminate message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SEFPARAMS','fr','An actual parameter corresponding to a sef parameter may have a side-effect.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SEFUNCON','fr','An actual parameter corresponding to a sef parameter involves a call to a procedure with no modifies clause that may have a side-effect.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHADOW','fr','An outer declaration is shadowed by the local declaration.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHAREDTRANS','fr','Shared storage is transferred to a non-shared reference. The other reference may release storage needed by this reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHIFTIMPLEMENTATION','fr','The left operand to a shift operator may be negative (behavior is implementation-defined).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHIFTNEGATIVE','fr','The right operand to a shift operator may be negative (behavior undefined).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SHORTINT','fr','To make short int and int types equivalent, use +shortint.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SINGLEINCLUDE','fr','When checking multiple files, each header file is processed only once. This may change the meaning of the code, if the same header file is included in different contexts (e.g., the header file includes #if directives and the values are different when it is included in different places.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SIZEOFFORMALARRAY','fr','Operand of a sizeof operator is a function parameter declared as an array.  The value of sizeof will be the size of a pointer to the element type, not the number of elements in the array.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SIZEOFTYPE','fr','Operand of sizeof operator is a type. (Safer to use expression, int *x = sizeof (*x); instead of sizeof (int).)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLASHSLASHCOMMENT','fr','A // comment is used.  ISO C99 allows // comments, but earlier standards did not.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAK','fr','Name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKCONSTS','fr','Constant name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKFCNS','fr','Function or iterator name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKMACROS','fr','Expanded macro name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKTYPES','fr','Type name is not consistent with Slovak naming convention. Slovak type names may not include uppercase letters.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SLOVAKVARS','fr','Variable name is not consistent with Slovak naming convention.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SPECUNDECL','fr','A function or variable is declared in an .lcl file, but not declared in any source code file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SPECUNDEF','fr','A function or variable is declared in an .lcl file, but not defined in any source code file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STACKREF','fr','A stack reference is pointed to by an external reference when the function returns. The stack-allocated storage is destroyed after the call, leaving a dangling reference.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATEMERGE','fr','Control path merge violates user-defined state merge rules.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATETRANSFER','fr','Transfer violates user-defined state rules.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATICINITTRANS','fr','Static storage is used as an initial value in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STATICTRANS','fr','Static storage is transferred in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTBRANCHSTATE','fr','The state of a variable through an array fetch is different depending on which branch is taken. This means no annotation can sensibly be applied to the storage.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTLIB','fr','Stricter version of the standard library is used. (The default library is standard.lcd;  strict library is strict.lcd.)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTOPS','fr','A primitive operation does not type check strictly.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRICTUSERELEASED','fr','Memory (through fetch) is used after it may have been released (either by passing as an only param or assigning to an only global).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALLEN','fr','Maximum length of string literal exceeded.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALNOROOM','fr','A string literal is assigned to a char array that is not big enough to hold the null terminator.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALNOROOMFINALNULL','fr','A string literal is assigned to a char array that is not big enough to hold the final null terminator.  This may not be a problem because a null character has been explictedly included in the string literal using an escape sequence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALSMALLER','fr','A string literal is assigned to a char array that smaller than the string literal needs.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_STRINGLITERALTOOLONG','fr','A string literal is assigned to a char array too small to hold it.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SUPERUSER','fr','Call to function restricted to superusers.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SWITCHLOOPBREAK','fr','A break statement appears inside the body of a while or for statement within a switch. This is perfectly reasonable code, but check that the break is intended to break only the inner loop. The break statement may be preceded by /*@loopbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SWITCHSWITCHBREAK','fr','A break statement appears inside a switch statement within another switch statement. This is perfectly reasonable code, but check that the break is intended to break only the inner switch. The break statement may be preceded by /*@innerbreak@*/ to suppress the message for this break only.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SYNTAX','fr','Code cannot be parsed.  For help on parse errors, see splint -help parseerrors.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SYSDIRS','fr','set directories for system files (default /usr/include). Separate directories with path separator (colons in Unix, semi-colons in Windows). Flag settings propagate to files in a system directory. If -sysdirerrors is set, no errors are reported for files in system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_SYSUNRECOG','fr','Identifier used in code has not been declared. (Message repeated for future uses in this file.)  Use +gnuextensions to make Splint recognize some keywords that are gnu extensions.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TAGPREFIX','fr','A tag identifier does not start with the tagprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TAGPREFIXEXCLUDE','fr','An identifier that is not a tag starts with the tagprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TEMPTRANS','fr','Temp storage (associated with a formal parameter) is transferred to a non-temporary reference. The storage may be released or new aliases created.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TOCTOU','fr','Possible time of check, time of use vulnerability.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TOPUSE','fr','An external declaration not used in any source file.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TRYTORECOVER','fr','Try to recover from parse error.  It really means try - this doesn''t usually work.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPE','fr','Types are incompatible.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPEPREFIX','fr','A user-defined type does not start with the typeprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPEPREFIXEXCLUDE','fr','An identifier that is not a type name starts with the typeprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_TYPEUSE','fr','A type is declared but not used. Use /*@unused@*/ in front of typedef to suppress messages.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNCHECKEDGLOBALIAS','fr','A global variable aliases externally-visible state when the function returns.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNCHECKEDMACROPREFIX','fr','An unchecked macro name does not start with the uncheckedmacroprefix');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNCHECKEDMACROPREFIXEXCLUDE','fr','An identifier that is not the name of an unchecked macro starts with the uncheckedmacroprefix.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIONDEF','fr','No field of a union is defined. Generally, one field of a union is expected to be defined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIXLIB','fr','UNIX version of the standard library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIXSTANDARD','fr','Use of function that need not be provided by UNIX implementations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNIXSTRICTLIB','fr','strict version of the UNIX library is used.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNQUALIFIEDINITTRANS','fr','Unqualified storage is used as an initial value in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNQUALIFIEDTRANS','fr','Unqualified storage is transferred in an inconsistent way.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNREACHABLE','fr','This code will never be reached on any possible execution.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOG','fr','Identifier used in code has not been declared.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOGCOMMENTS','fr','Word after a stylized comment marker does not correspond to a stylized comment.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOGDIRECTIVE','fr','Pre-processor directive is not recognized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNRECOGFLAGCOMMENTS','fr','Semantic comment attempts to set a flag that is not recognized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_UNSIGNEDCOMPARE','fr','An unsigned value is used in a comparison with zero in a way that is either a bug or confusing.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_USEDEF','fr','An rvalue is used that may not be initialized to a value on some execution path.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_USERELEASED','fr','Memory is used after it has been released (either by passing as an only param or assigning to an only global).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_USEVARARGS','fr','Header <varargs.h> is not part of ANSI Standard. Should use <stdarg.h> instead.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_VARUSE','fr','A variable is declared but never used. Use /*@unused@*/ in front of declaration to suppress message.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_VOIDABSTRACT','fr','A pointer to void is cast to a pointer to an abstract type (or vice versa).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNFLAGS','fr','Command line sets flag in abnormal way');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNLINTCOMMENTS','fr','A traditional lint comment is used. Some traditional lint comments are interpreted by Splint to enable easier checking of legacy code. It is preferable to replace these comments with the suggested Splint alternative.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNMISSINGGLOBS','fr','A global variable is used in the modifies clause, but it is not listed in the globals list.  The variable will be added to the globals list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNMISSINGGLOBSNOGLOBS','fr','A global variable is used in the modifies clause, but the function has no globals list.  The variable will be added to the globals list.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNPOSIXHEADERS','fr','Header name matches a POSIX header, but the POSIX library is not selected.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNRC','fr','There was a problem reading an initialization file');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNSYSFILES','fr','Splint has been run on a system file, by default no errors are reported for system files.  Use +systemdirerrors if you want splint to report errors in system files.  A file is considered a system file if it is in a system directory or a subdirectory of a system directory.  The sysdirs flag can be used to control the directories treated as system directories.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNUNIXLIB','fr','Unix library may not be compatible with all platforms');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WARNUSE','fr','Declaration marked with warn clause is used (can be suppresed by more specific flags).');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WHILEBLOCK','fr','While body is a single statement, not a compound block.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','compl','SPLINT_WHILEEMPTY','fr','While statement has no body.');


-- Splint criteria
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_FORMAT','fr','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ABSTRACT','fr','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALIASING_MEMORY','fr','aliasing memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALLUSE_EXPORT','fr','Unused export');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALLUSE_PARAMETERS','fr','Unused parameters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ALLUSE','fr','Unused');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_HELP','fr','booleans help');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_OPERATIONS','fr','Unsafe boolean operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_POINTERS','fr','booleans pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_BOOLEANS_PREDICATES','fr','Condition test predicates');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_COMMENTS','fr','Comment declared inside another one');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_COMPLETE_SPECIFICATIONS','fr','complete specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_CONTROLFLOW_MEMORY','fr','control flow memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_CONTROLFLOW','fr','control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_DECLARATIONS_LIBRARIES','fr','declarations libraries');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_DECLARATIONS','fr','declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_DEFINITION','fr','definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_EFFECT_CONTROLFLOW','fr','effect control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_EXTENSIBLE_MEMORY','fr','extensible memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_ITERATORS','fr','iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_LIBRARIES_ANSI','fr','libraries ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MACROS','fr','macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_DEFINITION','fr','memory definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_IMPLICIT','fr','memory implicit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_LEAKS','fr','memory leaks');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY_RELEASED','fr','memory released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORY','fr','memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MEMORYBOUNDS_MEMORY','fr','memory bounds memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_MODIFICATION_SPECIFICATIONS','fr','modification specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES_ABSTRACT','fr','names abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES_ANSI','fr','names ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES_PREFIXES','fr','names prefixes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NAMES','fr','names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_NULL_MEMORY','fr','null memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_OPERATIONS_POINTERS','fr','operations pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_OPERATIONS','fr','operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_RETURNVALS_BOOLEANS','fr','return vals booleans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_RETURNVALS','fr','return vals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_SYSTEMFUNCTIONS_UNDEFINED','fr','system functions undefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_SYSTEMFUNCTIONS','fr','system functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_TYPEEQUIVALENCE_POINTERS','fr','type equivalence pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_TYPEEQUIVALENCE','fr','type equivalence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_TYPEMISMATCH','fr','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_UNDEFINED_ANSI','fr','undefined ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_UNRECOGNIZED_DISPLAY','fr','unrecognized display');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','SPLINT_WARNUSE_SECURITY','fr','warn use security');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_FORMAT','fr','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ABSTRACT','fr','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALIASING_MEMORY','fr','aliasing memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALLUSE_EXPORT','fr','Unused export');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALLUSE_PARAMETERS','fr','Unused parameters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ALLUSE','fr','Unused');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_HELP','fr','booleans help');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_OPERATIONS','fr','Unsafe boolean operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_POINTERS','fr','booleans pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_BOOLEANS_PREDICATES','fr','Condition test predicates');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_COMMENTS','fr','Comment declared inside another one');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_COMPLETE_SPECIFICATIONS','fr','complete specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_CONTROLFLOW_MEMORY','fr','control flow memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_CONTROLFLOW','fr','control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_DECLARATIONS_LIBRARIES','fr','declarations libraries');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_DECLARATIONS','fr','declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_DEFINITION','fr','definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_EFFECT_CONTROLFLOW','fr','effect control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_EXTENSIBLE_MEMORY','fr','extensible memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_ITERATORS','fr','iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_LIBRARIES_ANSI','fr','libraries ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MACROS','fr','macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_DEFINITION','fr','memory definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_IMPLICIT','fr','memory implicit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_LEAKS','fr','memory leaks');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY_RELEASED','fr','memory released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORY','fr','memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MEMORYBOUNDS_MEMORY','fr','memory bounds memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_MODIFICATION_SPECIFICATIONS','fr','modification specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES_ABSTRACT','fr','names abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES_ANSI','fr','names ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES_PREFIXES','fr','names prefixes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NAMES','fr','names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_NULL_MEMORY','fr','null memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_OPERATIONS_POINTERS','fr','operations pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_OPERATIONS','fr','operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_RETURNVALS_BOOLEANS','fr','return vals booleans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_RETURNVALS','fr','return vals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_SYSTEMFUNCTIONS_UNDEFINED','fr','system functions undefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_SYSTEMFUNCTIONS','fr','system functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_TYPEEQUIVALENCE_POINTERS','fr','type equivalence pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_TYPEEQUIVALENCE','fr','type equivalence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_TYPEMISMATCH','fr','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_UNDEFINED_ANSI','fr','undefined ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_UNRECOGNIZED_DISPLAY','fr','unrecognized display');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','SPLINT_WARNUSE_SECURITY','fr','warn use security');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_FORMAT','fr','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ABSTRACT','fr','abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALIASING_MEMORY','fr','aliasing memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALLUSE_EXPORT','fr','Unused export');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALLUSE_PARAMETERS','fr','Unused parameters');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ALLUSE','fr','Unused');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_HELP','fr','booleans help');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_OPERATIONS','fr','Unsafe boolean operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_POINTERS','fr','booleans pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_BOOLEANS_PREDICATES','fr','Condition test predicates');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_COMMENTS','fr','Comment declared inside another one');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_COMPLETE_SPECIFICATIONS','fr','complete specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_CONTROLFLOW_MEMORY','fr','control flow memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_CONTROLFLOW','fr','control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_DECLARATIONS_LIBRARIES','fr','declarations libraries');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_DECLARATIONS','fr','declarations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_DEFINITION','fr','definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_EFFECT_CONTROLFLOW','fr','effect control flow');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_EXTENSIBLE_MEMORY','fr','extensible memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_ITERATORS','fr','iterators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_LIBRARIES_ANSI','fr','libraries ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MACROS','fr','macros');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_DEFINITION','fr','memory definition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_IMPLICIT','fr','memory implicit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_LEAKS','fr','memory leaks');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY_RELEASED','fr','memory released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORY','fr','memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MEMORYBOUNDS_MEMORY','fr','memory bounds memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_MODIFICATION_SPECIFICATIONS','fr','modification specifications');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES_ABSTRACT','fr','names abstract');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES_ANSI','fr','names ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES_PREFIXES','fr','names prefixes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NAMES','fr','names');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_NULL_MEMORY','fr','null memory');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_OPERATIONS_POINTERS','fr','operations pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_OPERATIONS','fr','operations');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_RETURNVALS_BOOLEANS','fr','return vals booleans');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_RETURNVALS','fr','return vals');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_SYSTEMFUNCTIONS_UNDEFINED','fr','system functions undefined');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_SYSTEMFUNCTIONS','fr','system functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_TYPEEQUIVALENCE_POINTERS','fr','type equivalence pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_TYPEEQUIVALENCE','fr','type equivalence');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_TYPEMISMATCH','fr','type mismatch');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_UNDEFINED_ANSI','fr','undefined ansi');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_UNRECOGNIZED_DISPLAY','fr','unrecognized display');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','SPLINT_WARNUSE_SECURITY','fr','warn use security');


-- FLAWFINDER criteria
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_BUFFER','fr','buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_FORMAT','fr','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_RACE','fr','race');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_TMPFILE','fr','tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_MISC','fr','misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_ACCESS','fr','access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_SHELL','fr','shell');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_RANDOM','fr','random');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_CRYPTO','fr','crypto');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_OBSOLETE','fr','obsolete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_FREE','fr','free');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_INPUT','fr','input');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_BUFFER','fr','buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_FORMAT','fr','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_RACE','fr','race');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_TMPFILE','fr','tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_MISC','fr','misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_ACCESS','fr','access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_SHELL','fr','shell');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_RANDOM','fr','random');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_CRYPTO','fr','crypto');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_OBSOLETE','fr','obsolete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_FREE','fr','free');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_INPUT','fr','input');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_BUFFER','fr','buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_FORMAT','fr','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_RACE','fr','race');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_TMPFILE','fr','tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_MISC','fr','misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_ACCESS','fr','access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_SHELL','fr','shell');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_RANDOM','fr','random');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_CRYPTO','fr','crypto');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_OBSOLETE','fr','obsolete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_FREE','fr','free');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_INPUT','fr','input');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_BUFFER'  ,'en','buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_FORMAT'  ,'en','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_RACE'    ,'en','race');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_TMPFILE' ,'en','tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_MISC'    ,'en','misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_ACCESS'  ,'en','access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_SHELL'   ,'en','shell');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_RANDOM'  ,'en','random');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_CRYPTO'  ,'en','crypto');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_OBSOLETE','en','obsolete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_FREE'    ,'en','free');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','FF_INPUT'   ,'en','input');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_BUFFER'  ,'en','buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_FORMAT'  ,'en','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_RACE'    ,'en','race');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_TMPFILE' ,'en','tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_MISC'    ,'en','misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_ACCESS'  ,'en','access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_SHELL'   ,'en','shell');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_RANDOM'  ,'en','random');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_CRYPTO'  ,'en','crypto');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_OBSOLETE','en','obsolete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_FREE'    ,'en','free');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','FF_INPUT'   ,'en','input');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_BUFFER'  ,'en','buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_FORMAT'  ,'en','format');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_RACE'    ,'en','race');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_TMPFILE' ,'en','tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_MISC'    ,'en','misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_ACCESS'  ,'en','access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_SHELL'   ,'en','shell');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_RANDOM'  ,'en','random');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_CRYPTO'  ,'en','crypto');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_OBSOLETE','en','obsolete');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_FREE'    ,'en','free');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','compl','FF_INPUT'   ,'en','input');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_STRCPY','en','buffer_strcpy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_LSTRCPY','en','buffer_lstrcpy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_BUFFER_MEMCPY','en','buffer_memcpy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_STRCAT','en','buffer_strcat');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_LSTRCAT','en','buffer_lstrcat');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_STRNCPY','en','buffer_strncpy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_LSTRCPYN','en','buffer_lstrcpyn');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_STRNCAT','en','buffer_strncat');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_BUFFER_STRNCAT','en','buffer_strncat');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_LSTRCATN','en','buffer_lstrcatn');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_STRCCPY','en','buffer_strccpy');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_BUFFER_GETS','en','buffer_gets');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_SPRINTF','en','buffer_sprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_SPRINTF','en','buffer_sprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_BUFFER_SPRINTF','en','buffer_sprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_FORMAT_SPRINTF','en','format_sprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_FORMAT_PRINTF','en','format_printf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_FORMAT_FPRINTF','en','format_fprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_FORMAT_SYSLOG','en','format_syslog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_FORMAT_SNPRINTF','en','format_snprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_SCANF','en','buffer_scanf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_SCANF','en','buffer_scanf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_FSCANF','en','buffer_fscanf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_STRLEN','en','buffer_strlen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_BUFFER_MULTIBYTETOWIDECHAR','en','buffer_MultiByteToWideChar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_STREADD','en','buffer_streadd');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_STRTRNS','en','buffer_strtrns');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_REALPATH','en','buffer_realpath');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_GETOPT','en','buffer_getopt');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_GETPASS','en','buffer_getpass');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_GETWD','en','buffer_getwd');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_BUFFER_GETCHAR','en','buffer_getchar');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_RACE_ACCESS','en','race_access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_RACE_CHOWN','en','race_chown');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_RACE_CHGRP','en','race_chgrp');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_RACE_CHMOD','en','race_chmod');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_RACE_VFORK','en','race_vfork');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_RACE_READLINK','en','race_readlink');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_TMPFILE_TMPFILE','en','tmpfile_tmpfile');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_TMPFILE_TMPNAM','en','tmpfile_tmpnam');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_CRYPTO_EVP_RC4_40','en','crypto_EVP_rc40');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_MISC_CHROOT','en','misc_chroot');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_GETENV','en','buffer_getenv');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_G_GET_HOME_DIR','en','buffer_g_get_home_dir');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_BUFFER_G_GET_TMP_DIR','en','buffer_g_get_tmp_dir');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_ACCESS_RPCIMPERSONATECLIENT','en','access_RpcImpersonateClient');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_MISC_INITIALIZECRITICALSECTION','en','misc_InitializeCriticalSection');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_MISC_ENTERCRITICALSECTION','en','misc_EnterCriticalSection');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_MISC_LOADLIBRARY','en','misc_LoadLibrary');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','5_MISC_SETSECURITYDESCRIPTORDACL','en','misc_SetSecurityDescriptorDacl');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_MISC_ADDACCESSALLOWEDACE','en','misc_AddAccessAllowedAce');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_MISC_GETLOGIN','en','misc_getlogin');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_MISC_CUSERID','en','misc_cuserid');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_BUFFER_GETPW','en','buffer_getpw');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_MISC_GETPASS','en','misc_getpass');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_OBSOLETE_GSIGNAL','en','obsolete_gsignal');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_FREE_MEMALIGN','en','free_memalign');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_OBSOLETE_ULIMIT','en','obsolete_ulimit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_OBSOLETE_USLEEP','en','obsolete_usleep');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','0_INPUT_RECV','en','input_recv');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_SHELL_CREATEPROCESSASUSER','en','shell_CreateProcessAsUser');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_SHELL_CREATEPROCESS','en','shell_CreateProcess');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_RANDOM_DRAND48','en','random_drand48');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_CRYPTO_CRYPT','en','crypto_crypt');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_CRYPTO_EVP_DES_ECB','en','crypto_EVP_des_ecb');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_TMPFILE_MKTEMP','en','tmpfile_mktemp');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_TMPFILE_MKSTEMP','en','tmpfile_mkstemp');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','2_MISC_FOPEN','en','misc_fopen');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','1_ACCESS_UMASK','en','access_umask');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','3_TMPFILE_GETTEMPFILENAME','en','tmpfile_GetTempFileName');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','4_SHELL_EXECL','en','shell_execl');


INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_STRCPY','en','Does not check for buffer overflows when copying to destination - Consider using strncpy or strlcpy (warning, strncpy is easily misused)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_LSTRCPY','en','Does not check for buffer overflows when copying to destination - Consider using a function version that stops copying at the end of the buffer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_BUFFER_MEMCPY','en','Does not check for buffer overflows when copying to destination - Make sure destination can always hold the source data');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_STRCAT','en','Does not check for buffer overflows when concatenating to destination - Consider using strncat or strlcat (warning, strncat is easily misused)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_LSTRCAT','en','Does not check for buffer overflows when concatenating to destination');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_STRNCPY','en','Easily used incorrectly; doesn"t always \\0-terminate or check for invalid pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_LSTRCPYN','en','Easily used incorrectly; doesn"t always \\0-terminate or check for invalid pointers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_STRNCAT','en','Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) - Consider strlcat or automatically resizing strings');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_BUFFER_STRNCAT','en','Risk is high; the length parameter appears to be a constant, instead of computing the number of characters left.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_LSTRCATN','en','Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) - Consider strlcat or automatically resizing strings');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_STRCCPY','en','Subject to buffer overflow if buffer is not as big as claimed - Ensure that destination buffer is sufficiently large');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_BUFFER_GETS','en','Does not check for buffer overflows - Use fgets() instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_SPRINTF','en','Does not check for buffer overflows - Use snprintf or vsnprintf');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_SPRINTF','en','Risk is low because the source is a constant character.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_BUFFER_SPRINTF','en','Risk is low because the source has a constant maximum length.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_FORMAT_SPRINTF','en','Potential format string problem - Make format string constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_FORMAT_PRINTF','en','If format strings can be influenced by an attacker, they can be exploited - Use a constant for the format specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_FORMAT_FPRINTF','en','If format strings can be influenced by an attacker, they can be exploited - Use a constant for the format specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_FORMAT_SYSLOG','en','If syslog"s format strings can be influenced by an attacker, they can be exploited - Use a constant format string for syslog');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_FORMAT_SNPRINTF','en','If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \\0-terminate - Use a constant for the format specification');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_SCANF','en','The scanf() family"s %s operation, without a limit specification, permits buffer overflows - Specify a limit to %s, or use a different input function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_SCANF','en','it"s unclear if the %s limit in the format string is small enough - Check that the limit is sufficiently small, or use a different input function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_FSCANF','en','The scanf() family"s %s operation, without a limit specification, permits buffer overflows - Specify a limit to %s, or use a different input function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_STRLEN','en','Does not handle strings that are not \\0-terminated (it could cause a crash if unprotected)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_BUFFER_MULTIBYTETOWIDECHAR','en','Requires maximum length in CHARACTERS, not bytes');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_STREADD','en','This function does not protect against buffer overflows - Ensure the destination has 4 times the size of the source, to leave room for expansion');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_TMPFILE_MKSTEMP','en','Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_MISC_FOPEN','en','Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_ACCESS_UMASK','en','Ensure that umask is given most restrictive possible setting (e.g., 066 or 077)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_TMPFILE_GETTEMPFILENAME','en','Temporary file race condition in certain cases (e.g., if run as SYSTEM in many versions of Windows)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_SHELL_EXECL','en','This causes a new program to execute and is difficult to use safely - try using a library call that implements the same functionality if available');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_SHELL_CREATEPROCESSASUSER','en','This causes a new process to execute and is difficult to use safely - Especially watch out for embedded spaces');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_SHELL_CREATEPROCESS','en','This causes a new process to execute and is difficult to use safely - Specify the application path in the first argument, NOT as part of the second, or embedded spaces could allow an attacker to force a different program to run');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_RANDOM_DRAND48','en','This function is not sufficiently random for security-related functions such as key and nonce creation - use a more secure technique for acquiring random values');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_CRYPTO_CRYPT','en','Function crypt is a poor one-way hashing algorithm - since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today"s faster computing equipment - Use a different algorithm, such as SHA-1, with a larger non-repeating salt');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_CRYPTO_EVP_DES_ECB','en','DES only supports a 56-bit keysize, which is too small given today"s computers - Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_CRYPTO_EVP_RC4_40','en','These keysizes are too small given today"s computers - Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_MISC_CHROOT','en','chroot can be very helpful, but is hard to use correctly - Make sure the program immediately chdir(\""""/\""""), closes file descriptors, and drops root privileges, and that all necessary files (and no more!) are in the new root');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_GETENV','en','Environment variables are untrustable input if they can be it returns untrustable input if the environment can be set by an attacker.  It can have any content and length, and the same variable can be set more than once - Check environment variables carefully before using them');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_G_GET_HOME_DIR','en','"This function is synonymous with getenv(\""""HOME\"""") - it returns untrustable input if the environment can be set by an attacker.  It can have any content and length, and the same variable can be set more than once - Check environment variables carefully before using them"');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_G_GET_TMP_DIR','en','"This function is synonymous with getenv(\""""TMP\"""") - it returns untrustable input if the environment can be set by an attacker.  It can have any content and length, and the same variable can be set more than once - Check environment variables carefully before using them"');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_ACCESS_RPCIMPERSONATECLIENT','en','If this call fails, the program could fail to drop heightened privileges - Make sure the return value is checked, and do not continue if a failure is reported');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_MISC_INITIALIZECRITICALSECTION','en','Exceptions can be thrown in low-memory situations - Use InitializeCriticalSectionAndSpinCount instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_MISC_ENTERCRITICALSECTION','en','On some versions of Windows, exceptions can be thrown in low-memory situations - Use InitializeCriticalSectionAndSpinCount instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_MISC_LOADLIBRARY','en','Ensure that the full path to the library is specified, or current directory may be used - Use registry entry or GetWindowsDirectory to find library path, if you aren"t already');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_MISC_SETSECURITYDESCRIPTORDACL','en','Never create NULL ACLs - an attacker can set it to Everyone (Deny All Access), which would even forbid administrator access');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_STRTRNS','en','This function does not protect against buffer overflows - Ensure that destination is at least as long as the source');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_REALPATH','en','This function does not protect against buffer overflows, and some implementations can overflow internally - Ensure that the destination buffer is at least of size MAXPATHLEN, and to protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_GETOPT','en','Some older implementations do not protect against internal buffer overflows - Check implementation on installation, or limit the size of all string inputs');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_GETPASS','en','Some implementations may overflow buffers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_BUFFER_GETWD','en','This does not protect against buffer overflows by itself, so use with caution - Use getcwd instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_BUFFER_GETCHAR','en','Check buffer boundaries if used in a loop');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_RACE_ACCESS','en','This usually indicates a security flaw. If an attacker can change anything along the path between the call to access() and the file"s actual use (e.g., by moving files), the attacker can exploit the race condition - Set up the correct permissions (e.g., using setuid()) and try to open the file directly');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_RACE_CHOWN','en','This accepts filename arguments - if an attacker can move those files, a race condition results. - Use fchown( ) instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_RACE_CHGRP','en','This accepts filename arguments - if an attacker can move those files, a race condition results. - Use fchgrp( ) instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_RACE_CHMOD','en','This accepts filename arguments - if an attacker can move those files, a race condition results. - Use fchmod( ) instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_RACE_VFORK','en','On some old systems, vfork() permits race conditions, and it"s very difficult to use correctly - Use fork() instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','5_RACE_READLINK','en','This accepts filename arguments - if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL - Reconsider approach');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_TMPFILE_TMPFILE','en','Function tmpfile() has a security flaw on some systems (e.g., older System V systems)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_TMPFILE_TMPNAM','en','Temporary file race condition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_TMPFILE_MKTEMP','en','Temporary file race condition');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','3_MISC_ADDACCESSALLOWEDACE','en','This doesn"t set the inheritance bits in the access control entry (ACE) header - Make sure that you set inheritance by hand if you wish it to inherit');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_MISC_GETLOGIN','en','It"s often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it - Use getpwuid(geteuid()) and extract the desired information instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_MISC_CUSERID','en','Exactly what cuserid() does is poorly defined. Thus, you can"t trust what it does. It"s certainly not portable.  Also, if passed a non-null parameter, there"s a risk of a buffer overflow if the passed-in buffer is not at least L_cuserid characters long - Use getpwuid(geteuid()) and extract the desired information instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_BUFFER_GETPW','en','This function is dangerous - it may overflow the provided buffer. It extracts data from a "protected" area, but most systems have many commands to let users modify the protected area, and it"s not always clear what their limits are.  Best to avoid using this function altogether - Use getpwuid() instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','4_MISC_GETPASS','en','This function is obsolete and not portable. What it does varies between systems, particularly in where its prompt is displayed and where it gets its data - Make the specific calls to do exactly what you want.  If you write your own, be sure to zero the password as soon as possible to avoid leaving the cleartext password visible in the process address space');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','2_OBSOLETE_GSIGNAL','en','These functions are considered obsolete on most systems, and very non-portable (Linux-based systems handle them radically different, basically if gsignal/ssignal were the same as raise/signal respectively, while System V considers them a separate set and obsolete) - Switch to raise/signal, or some other signalling approach');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_FREE_MEMALIGN','en','On some systems an attempt to free() results from memalign() may fail. This may, on a few systems, be exploitable.  Also note that memalign() may not check that the boundary parameter is correct - Use posix_memalign instead. In some cases, malloc()"s alignment may be sufficient');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_OBSOLETE_ULIMIT','en','This C routine is considered obsolete (as opposed to the shell command by the same name, which is NOT obsolete) - Use getrlimit(2), setrlimit(2), and sysconf(3) instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','1_OBSOLETE_USLEEP','en','This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified - Use nanosleep(2) or setitimer(2) instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','0_INPUT_RECV','en','Function accepts input from outside program - Make sure input data is filtered, especially if an attacker could manipulate it');





-- CppCheck metrics
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPP_CHECK_AUTOVARIABLES','en','Return of the address of an auto-variable, invalid deallocationor wrong assignment of an auto-variable to an effective parameter of a function');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_RETURNLOCALVARIABLE','en','Returning pointer to local array variable');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ARRAYINDEXOUTOFBOUNDS','en','Array index out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_BUFFERACCESSOUTOFBOUNDS','en','Buffer access out-of-bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSSTDCIN','en','Dangerous usage of std::cin, possible buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STRNCATUSAGE','en','Dangerous usage of strncat. Tip: the 3rd parameter means maximum number of characters to append');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OUTOFBOUNDS','en','out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_SIZEARGUMENTASCHAR','en','The size argument is given as a char constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_TERMINATESTRNCPY','en','After a strncpy() the buffer should be zero-terminated');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_THISSUBTRACTION','en','Suspicious pointer subtraction');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_NOCONSTRUCTOR','en','Class has no constructor. Member variables not initialized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQVARERROR','en','Member variable is not assigned a value in ::operator=');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNUSEDPRIVATEFUNCTION','en','Unused private function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MEMSETCLASS','en','Using memset|memcpy|memmove on class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MEMSETSTRUCT','en','Using memset|memcpy|memmove on struct that contains a std::');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQ','en','operator= should return something');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_VIRTUALDESTRUCTOR','en','Class which is inherited does not have a virtual destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQRETREFTHIS','en','operator= should return reference to self');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQTOSELF','en','operator= should check for assignment to self');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSFUNCTIONMKTEMP','en','Found mktemp. You should use mkstemp instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSFUNCTIONGETS','en','Found ''gets''. You should use ''fgets'' instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSFUNCTIONSCANF','en','Found ''scanf''. You should use ''fgets'' instead');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTTHROWINDESTRUCTOR','en','Throwing exception in destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTNEW','en','Upon exception there is memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTREALLOC','en','Upon exception variable becomes a dead pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTDEALLOCTHROW','en','Throwing exception in invalid state, variable points at deallocated memory');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CSTYLECAST','en','C-style pointer casting');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_REDUNDANTIFDELETE0','en','Redundant condition. It is safe to deallocate a NULL pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_REDUNDANTIFREMOVE','en','Redundant condition. The remove function in the STL will not do anything if element doesn''t exist');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSUSAGESTRTOL','en','Invalid radix in call to strtol or strtoul. Must be 0 or 2-36');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_SPRINTFOVERLAPPINGDATA','en','Undefined behaviour: variable is used wrong in call to sprintf or snprintf. Quote: If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UDIVERROR','en','Unsigned division. The result will be wrong.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UDIVWARNING','en','Division with signed and unsigned operators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNUSEDSTRUCTMEMBER','en','struct or union member is never used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_PASSEDBYVALUE','en','Function parameter is passed by value. It could be passed by reference instead.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CONSTSTATEMENT','en','Redundant code: Found a statement that begins with string or numeric constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CHARARRAYINDEX','en','Warning - using char variable as array index');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CHARBITOP','en','Warning - using char variable in bit operation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_VARIABLESCOPE','en','The scope of the variable can be reduced');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CONDITIONALWAYSTRUEFALSE','en','Condition is always true(false)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STRPLUSCHAR','en','Unusual pointer arithmetic');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_NULLPOINTER','en','Possible null pointer dereference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNINITDATA','en','Data is allocated but not initialized');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNINITVAR','en','Uninitialized variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ZERODIV','en','Division by zero');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_POSTINCREMENTDECREMENT','en','Pre-decrementing/incrementing is preferred to Post-decrementing/incrementing');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ITERATORS','en','Same iterator is used with both containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ERASEDEREFERENCE','en','Dereferenced iterator has been erased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MISMATCHINGCONTAINERS','en','mismatching containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLOUTOFBOUNDS','en','When value==array.size(), array[value] is out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ERASE','en','Dangerous iterator usage. After erase the iterator is invalid so dereferencing it or comparing it with another iterator is invalid.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_INVALIDITERATOR','en','After call, the iterator may be invalid');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_INVALIDPOINTER','en','Invalid pointer after push_back / push_front');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLBOUNDRIES','en','container range check should use != and not < since the order of the pointers isn''t guaranteed');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLFIND','en','dangerous usage of find result');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLSIZE','en','Replace size() check against 0 with empty()');






INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_AUTOVARIABLES','en','Return of the address of an auto-variable, invalid deallocationor wrong assignment of an auto-variable to an effective parameter of a function');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_RETURNLOCALVARIABLE','en','Returning pointer to local array variable');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ARRAYINDEXOUTOFBOUNDS','en','Array index out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_BUFFERACCESSOUTOFBOUNDS','en','Buffer access out-of-bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSSTDCIN','en','Dangerous usage of std::cin, possible buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STRNCATUSAGE','en','Dangerous usage of strncat. Tip: the 3rd parameter means maximum number of characters to append');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OUTOFBOUNDS','en','out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_SIZEARGUMENTASCHAR','en','The size argument is given as a char constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_TERMINATESTRNCPY','en','After a strncpy() the buffer should be zero-terminated');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_THISSUBTRACTION','en','Suspicious pointer subtraction');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_NOCONSTRUCTOR','en','Class has no constructor. Member variables not initialized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQVARERROR','en','Member variable is not assigned a value in ::operator=');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNUSEDPRIVATEFUNCTION','en','Unused private function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MEMSETCLASS','en','Using memset|memcpy|memmove on class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MEMSETSTRUCT','en','Using memset|memcpy|memmove on struct that contains a std::');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQ','en','operator= should return something');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_VIRTUALDESTRUCTOR','en','Class which is inherited does not have a virtual destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQRETREFTHIS','en','operator= should return reference to self');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQTOSELF','en','operator= should check for assignment to self');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSFUNCTIONMKTEMP','en','Found mktemp. You should use mkstemp instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSFUNCTIONGETS','en','Found ''gets''. You should use ''fgets'' instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSFUNCTIONSCANF','en','Found ''scanf''. You should use ''fgets'' instead');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTTHROWINDESTRUCTOR','en','Throwing exception in destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTNEW','en','Upon exception there is memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTREALLOC','en','Upon exception variable becomes a dead pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTDEALLOCTHROW','en','Throwing exception in invalid state, variable points at deallocated memory');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CSTYLECAST','en','C-style pointer casting');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_REDUNDANTIFDELETE0','en','Redundant condition. It is safe to deallocate a NULL pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_REDUNDANTIFREMOVE','en','Redundant condition. The remove function in the STL will not do anything if element doesn''t exist');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSUSAGESTRTOL','en','Invalid radix in call to strtol or strtoul. Must be 0 or 2-36');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_SPRINTFOVERLAPPINGDATA','en','Undefined behaviour: variable is used wrong in call to sprintf or snprintf. Quote: If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UDIVERROR','en','Unsigned division. The result will be wrong.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UDIVWARNING','en','Division with signed and unsigned operators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNUSEDSTRUCTMEMBER','en','struct or union member is never used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_PASSEDBYVALUE','en','Function parameter is passed by value. It could be passed by reference instead.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CONSTSTATEMENT','en','Redundant code: Found a statement that begins with string or numeric constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CHARARRAYINDEX','en','Warning - using char variable as array index');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CHARBITOP','en','Warning - using char variable in bit operation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_VARIABLESCOPE','en','The scope of the variable can be reduced');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CONDITIONALWAYSTRUEFALSE','en','Condition is always true(false)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STRPLUSCHAR','en','Unusual pointer arithmetic');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_NULLPOINTER','en','Possible null pointer dereference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNINITDATA','en','Data is allocated but not initialized');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNINITVAR','en','Uninitialized variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ZERODIV','en','Division by zero');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_POSTINCREMENTDECREMENT','en','Pre-decrementing/incrementing is preferred to Post-decrementing/incrementing');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ITERATORS','en','Same iterator is used with both containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ERASEDEREFERENCE','en','Dereferenced iterator has been erased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MISMATCHINGCONTAINERS','en','mismatching containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLOUTOFBOUNDS','en','When value==array.size(), array[value] is out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ERASE','en','Dangerous iterator usage. After erase the iterator is invalid so dereferencing it or comparing it with another iterator is invalid.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_INVALIDITERATOR','en','After call, the iterator may be invalid');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_INVALIDPOINTER','en','Invalid pointer after push_back / push_front');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLBOUNDRIES','en','container range check should use != and not < since the order of the pointers isn''t guaranteed');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLFIND','en','dangerous usage of find result');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLSIZE','en','Replace size() check against 0 with empty()');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNUSEDFUNCTION','en','Unused function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNUSEDFUNCTION','en','Unused function');




INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MEMLEAK','en','Memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_RESOURCELEAK','en','Resource leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DEALLOCDEALLOC','en','Deallocating a deallocated pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DEALLOCUSE','en','Dereferencing a variable after it is deallocated / released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MISMATCHSIZE','en','The given size is mismatching');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MISMATCHALLOCDEALLOC','en','Mismatching allocation and deallocation');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MEMLEAK','en','Memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_RESOURCELEAK','en','Resource leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DEALLOCDEALLOC','en','Deallocating a deallocated pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DEALLOCUSE','en','Dereferencing a variable after it is deallocated / released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MISMATCHSIZE','en','The given size is mismatching');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MISMATCHALLOCDEALLOC','en','Mismatching allocation and deallocation');





INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPP_CHECK_AUTOVARIABLES','fr','Return of the address of an auto-variable, invalid deallocationor wrong assignment of an auto-variable to an effective parameter of a function');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_RETURNLOCALVARIABLE','fr','Returning pointer to local array variable');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ARRAYINDEXOUTOFBOUNDS','fr','Array index out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_BUFFERACCESSOUTOFBOUNDS','fr','Buffer access out-of-bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSSTDCIN','fr','Dangerous usage of std::cin, possible buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STRNCATUSAGE','fr','Dangerous usage of strncat. Tip: the 3rd parameter means maximum number of characters to append');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OUTOFBOUNDS','fr','out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_SIZEARGUMENTASCHAR','fr','The size argument is given as a char constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_TERMINATESTRNCPY','fr','After a strncpy() the buffer should be zero-terminated');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_THISSUBTRACTION','fr','Suspicious pointer subtraction');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_NOCONSTRUCTOR','fr','Class has no constructor. Member variables not initialized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQVARERROR','fr','Member variable is not assigned a value in ::operator=');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNUSEDPRIVATEFUNCTION','fr','Unused private function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MEMSETCLASS','fr','Using memset|memcpy|memmove on class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MEMSETSTRUCT','fr','Using memset|memcpy|memmove on struct that contains a std::');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQ','fr','operator= should return something');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_VIRTUALDESTRUCTOR','fr','Class which is inherited does not have a virtual destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQRETREFTHIS','fr','operator= should return reference to self');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_OPERATOREQTOSELF','fr','operator= should check for assignment to self');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSFUNCTIONMKTEMP','fr','Found mktemp. You should use mkstemp instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSFUNCTIONGETS','fr','Found ''gets''. You should use ''fgets'' instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSFUNCTIONSCANF','fr','Found ''scanf''. You should use ''fgets'' instead');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTTHROWINDESTRUCTOR','fr','Throwing exception in destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTNEW','fr','Upon exception there is memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTREALLOC','fr','Upon exception variable becomes a dead pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_EXCEPTDEALLOCTHROW','fr','Throwing exception in invalid state, variable points at deallocated memory');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CSTYLECAST','fr','C-style pointer casting');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_REDUNDANTIFDELETE0','fr','Redundant condition. It is safe to deallocate a NULL pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_REDUNDANTIFREMOVE','fr','Redundant condition. The remove function in the STL will not do anything if element doesn''t exist');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DANGEROUSUSAGESTRTOL','fr','Invalid radix in call to strtol or strtoul. Must be 0 or 2-36');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_SPRINTFOVERLAPPINGDATA','fr','Undefined behaviour: variable is used wrong in call to sprintf or snprintf. Quote: If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UDIVERROR','fr','Unsigned division. The result will be wrong.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UDIVWARNING','fr','Division with signed and unsigned operators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNUSEDSTRUCTMEMBER','fr','struct or union member is never used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_PASSEDBYVALUE','fr','Function parameter is passed by value. It could be passed by reference instead.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CONSTSTATEMENT','fr','Redundant code: Found a statement that begins with string or numeric constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CHARARRAYINDEX','fr','Warning - using char variable as array index');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CHARBITOP','fr','Warning - using char variable in bit operation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_VARIABLESCOPE','fr','The scope of the variable can be reduced');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_CONDITIONALWAYSTRUEFALSE','fr','Condition is always true(false)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STRPLUSCHAR','fr','Unusual pointer arithmetic');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_NULLPOINTER','fr','Possible null pointer dereference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNINITDATA','fr','Data is allocated but not initialized');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNINITVAR','fr','Uninitialized variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ZERODIV','fr','Division by zero');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_POSTINCREMENTDECREMENT','fr','Pre-decrementing/incrementing is preferred to Post-decrementing/incrementing');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ITERATORS','fr','Same iterator is used with both containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ERASEDEREFERENCE','fr','Dereferenced iterator has been erased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MISMATCHINGCONTAINERS','fr','mismatching containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLOUTOFBOUNDS','fr','When value==array.size(), array[value] is out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_ERASE','fr','Dangerous iterator usage. After erase the iterator is invalid so dereferencing it or comparing it with another iterator is invalid.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_INVALIDITERATOR','fr','After call, the iterator may be invalid');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_INVALIDPOINTER','fr','Invalid pointer after push_back / push_front');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLBOUNDRIES','fr','container range check should use != and not < since the order of the pointers isn''t guaranteed');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLFIND','fr','dangerous usage of find result');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_STLSIZE','fr','Replace size() check against 0 with empty()');






INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_AUTOVARIABLES','fr','Return of the address of an auto-variable, invalid deallocationor wrong assignment of an auto-variable to an effective parameter of a function');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_RETURNLOCALVARIABLE','fr','Returning pointer to local array variable');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ARRAYINDEXOUTOFBOUNDS','fr','Array index out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_BUFFERACCESSOUTOFBOUNDS','fr','Buffer access out-of-bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSSTDCIN','fr','Dangerous usage of std::cin, possible buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STRNCATUSAGE','fr','Dangerous usage of strncat. Tip: the 3rd parameter means maximum number of characters to append');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OUTOFBOUNDS','fr','out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_SIZEARGUMENTASCHAR','fr','The size argument is given as a char constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_TERMINATESTRNCPY','fr','After a strncpy() the buffer should be zero-terminated');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_THISSUBTRACTION','fr','Suspicious pointer subtraction');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_NOCONSTRUCTOR','fr','Class has no constructor. Member variables not initialized.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQVARERROR','fr','Member variable is not assigned a value in ::operator=');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNUSEDPRIVATEFUNCTION','fr','Unused private function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MEMSETCLASS','fr','Using memset|memcpy|memmove on class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MEMSETSTRUCT','fr','Using memset|memcpy|memmove on struct that contains a std::');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQ','fr','operator= should return something');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_VIRTUALDESTRUCTOR','fr','Class which is inherited does not have a virtual destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQRETREFTHIS','fr','operator= should return reference to self');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_OPERATOREQTOSELF','fr','operator= should check for assignment to self');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSFUNCTIONMKTEMP','fr','Found mktemp. You should use mkstemp instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSFUNCTIONGETS','fr','Found ''gets''. You should use ''fgets'' instead');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSFUNCTIONSCANF','fr','Found ''scanf''. You should use ''fgets'' instead');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTTHROWINDESTRUCTOR','fr','Throwing exception in destructor');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTNEW','fr','Upon exception there is memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTREALLOC','fr','Upon exception variable becomes a dead pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_EXCEPTDEALLOCTHROW','fr','Throwing exception in invalid state, variable points at deallocated memory');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CSTYLECAST','fr','C-style pointer casting');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_REDUNDANTIFDELETE0','fr','Redundant condition. It is safe to deallocate a NULL pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_REDUNDANTIFREMOVE','fr','Redundant condition. The remove function in the STL will not do anything if element doesn''t exist');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DANGEROUSUSAGESTRTOL','fr','Invalid radix in call to strtol or strtoul. Must be 0 or 2-36');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_SPRINTFOVERLAPPINGDATA','fr','Undefined behaviour: variable is used wrong in call to sprintf or snprintf. Quote: If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UDIVERROR','fr','Unsigned division. The result will be wrong.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UDIVWARNING','fr','Division with signed and unsigned operators');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNUSEDSTRUCTMEMBER','fr','struct or union member is never used');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_PASSEDBYVALUE','fr','Function parameter is passed by value. It could be passed by reference instead.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CONSTSTATEMENT','fr','Redundant code: Found a statement that begins with string or numeric constant');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CHARARRAYINDEX','fr','Warning - using char variable as array index');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CHARBITOP','fr','Warning - using char variable in bit operation');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_VARIABLESCOPE','fr','The scope of the variable can be reduced');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_CONDITIONALWAYSTRUEFALSE','fr','Condition is always true(false)');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STRPLUSCHAR','fr','Unusual pointer arithmetic');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_NULLPOINTER','fr','Possible null pointer dereference');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNINITDATA','fr','Data is allocated but not initialized');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNINITVAR','fr','Uninitialized variable');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ZERODIV','fr','Division by zero');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_POSTINCREMENTDECREMENT','fr','Pre-decrementing/incrementing is preferred to Post-decrementing/incrementing');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ITERATORS','fr','Same iterator is used with both containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ERASEDEREFERENCE','fr','Dereferenced iterator has been erased');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MISMATCHINGCONTAINERS','fr','mismatching containers');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLOUTOFBOUNDS','fr','When value==array.size(), array[value] is out of bounds');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_ERASE','fr','Dangerous iterator usage. After erase the iterator is invalid so dereferencing it or comparing it with another iterator is invalid.');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_INVALIDITERATOR','fr','After call, the iterator may be invalid');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_INVALIDPOINTER','fr','Invalid pointer after push_back / push_front');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLBOUNDRIES','fr','container range check should use != and not < since the order of the pointers isn''t guaranteed');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLFIND','fr','dangerous usage of find result');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_STLSIZE','fr','Replace size() check against 0 with empty()');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_UNUSEDFUNCTION','fr','Unused function');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_UNUSEDFUNCTION','fr','Unused function');




INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MEMLEAK','fr','Memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_RESOURCELEAK','fr','Resource leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DEALLOCDEALLOC','fr','Deallocating a deallocated pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_DEALLOCUSE','fr','Dereferencing a variable after it is deallocated / released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MISMATCHSIZE','fr','The given size is mismatching');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','lib','CPPCHECK_MISMATCHALLOCDEALLOC','fr','Mismatching allocation and deallocation');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MEMLEAK','fr','Memory leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_RESOURCELEAK','fr','Resource leak');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DEALLOCDEALLOC','fr','Deallocating a deallocated pointer');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_DEALLOCUSE','fr','Dereferencing a variable after it is deallocated / released');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MISMATCHSIZE','fr','The given size is mismatching');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('metrique','desc','CPPCHECK_MISMATCHALLOCDEALLOC','fr','Mismatching allocation and deallocation');





-- CppCheck criteria
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_AUTOVARIABLES'   ,'en','Auto vriables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_BUFFEROVERRUN'   ,'en','Buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_CLASS'   ,'en','Class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_DANGEROUSFUNCTIONS'   ,'en','Dangerous functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_EXCEPTIONSAFETY'   ,'en','Exception safety');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_MISC'   ,'en','Misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_STL'   ,'en','Standard Template Library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_DEADCODE'   ,'en','Dead code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_MEMORYLEAK'   ,'en','Memory leak');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_AUTOVARIABLES'   ,'en','Auto vriables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_BUFFEROVERRUN'   ,'en','Buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_CLASS'   ,'en','Class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_DANGEROUSFUNCTIONS'   ,'en','Dangerous functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_EXCEPTIONSAFETY'   ,'en','Exception safety');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_MISC'   ,'en','Misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_STL'   ,'en','Standard Template Library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_DEADCODE'   ,'en','Dead code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_MEMORYLEAK'   ,'en','Memory leak');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_AUTOVARIABLES'   ,'fr','Auto vriables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_BUFFEROVERRUN'   ,'fr','Buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_CLASS'   ,'fr','Class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_DANGEROUSFUNCTIONS'   ,'fr','Dangerous functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_EXCEPTIONSAFETY'   ,'fr','Exception safety');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_MISC'   ,'fr','Misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_STL'   ,'fr','Standard Template Library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_DEADCODE'   ,'fr','Dead code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','lib','CPPCHECK_MEMORYLEAK'   ,'fr','Memory leak');

INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_AUTOVARIABLES'   ,'fr','Auto vriables');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_BUFFEROVERRUN'   ,'fr','Buffer overrun');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_CLASS'   ,'fr','Class');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_DANGEROUSFUNCTIONS'   ,'fr','Dangerous functions');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_EXCEPTIONSAFETY'   ,'fr','Exception safety');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_MISC'   ,'fr','Misc');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_STL'   ,'fr','Standard Template Library');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_DEADCODE'   ,'fr','Dead code');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('critere','desc','CPPCHECK_MEMORYLEAK'   ,'fr','Memory leak');


INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('modele','lib','C-RULES','fr','C-RULES');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('modele','desc','C-RULES','fr','C-RULES');
INSERT INTO "I18N" (TABLE_NAME,COLUMN_NAME,ID_TABLE,ID_LANGUE,TEXT) VALUES ('modele','compl','C-RULES','fr','C-RULES');

commit;

