/*
 * JFreeApplet.java
 *
 * Created on 29 juillet 2004, 10:50
 */
package com.compuware.caqs.presentation.applets.evolution;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xml.DatasetReader;
import org.jfree.ui.Layer;
import org.jfree.ui.RectangleAnchor;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author  cwfr-fdubois
 */
public class EvolutionApplet extends javax.swing.JApplet implements EntryModifiable, ActionListener, ItemListener {
    
    private static final long serialVersionUID = -8459447952463056854L;
	
	private static final Color REJET_COLOR = new Color(255, 226, 226);
    private static final Color RESERVE_COLOR = new Color(255, 255, 204);
    private static final Color ACCEPTE_COLOR = new Color(226, 255, 226);
    
    // Variables declaration - do not modify
    private ChartPanel jFreePanel;
    
    private Map<String, CategoryDatasetEntryCollection> mVisibleData = null;
    private Map<String, CategoryDatasetEntryCollection> mHiddenData = null;
    
    private SelectionFrame mSelectionFrame = null;
    
    private String m_action = "LINE";
    private String m_target = "FACT";
    
    private JButton mHiddenGraphButton ;

    /* 2005-03-24 Attributs précédement en static. */
    private JButton mBarButton = null;
    private JButton mLineButton = null;
    private JButton mSelectButton = null;

    private Vector<String> mTargetNames = new Vector<String>();
    private JComboBox mTargetList = new JComboBox(mTargetNames);
    /* Fin des attributs précédement en static. */

    private String mServletUrl;
    private String mImagesUrl;
    // End of variables declaration

    /** Initializes the applet JFreeApplet */
    public void init() {
        initParameters();
        initComponents();
    }
    
    private void initParameters() {
        String servletStr = this.getParameter("SERVLET");
        mBarButton = new JButton(this.getParameter("BARRES"));
        mLineButton = new JButton(this.getParameter("COURBES"));
        mSelectButton = new JButton(this.getParameter("SELECT"));

        this.mServletUrl = this.getCodeBase() + "/"+ servletStr;
        this.mImagesUrl = this.getCodeBase() + "/images/";
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        retrieveData();
        initToolBar();
        jFreePanel.setMouseZoomable(true, false);
        //jFreePanel.setMinimumDrawWidth(800);
        getContentPane().add(new JScrollPane(jFreePanel), java.awt.BorderLayout.CENTER);
    }
    
    private void initToolBar() {
        try {
            mBarButton.setIcon(new ImageIcon(new java.net.URL(mImagesUrl+"barchart.gif")));
            mLineButton.setIcon(new ImageIcon(new java.net.URL(mImagesUrl+"linechart.gif")));
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        mBarButton.addActionListener(this);
        mLineButton.addActionListener(this);
        mSelectButton.addActionListener(this);
        JToolBar toolBar = new JToolBar();
        mLineButton.setVisible(false);
        mHiddenGraphButton = mLineButton;
        toolBar.add(mBarButton);
        toolBar.add(mLineButton);
        toolBar.add(mSelectButton);
        initTarget(toolBar);
        getContentPane().add(toolBar, java.awt.BorderLayout.SOUTH);
    }
    
    private void initTarget(JToolBar toolBar) {
        this.mTargetNames.add(0, this.getParameter("OBJS"));
        if((this.getParameter("TELT") != null) && this.getParameter("TELT").equals("EA")) {
            this.mTargetNames.add(1, this.getParameter("CRIT"));
        }
        toolBar.addSeparator();
        toolBar.add(new JLabel(this.getParameter("EVO")));
        this.mTargetList.setMaximumSize(new java.awt.Dimension(100, 30));
        this.mTargetList.setSelectedIndex(0);
        this.mTargetList.addItemListener(this);
        toolBar.add(this.mTargetList);
    }
    
    private void retrieveData() {
        String title = this.getParameter("EVOS");
        java.io.InputStream stream = null;
        InputStream str = null;
        try {
            java.net.URL servletUrl = new java.net.URL(mServletUrl+"?type="+m_action+"&target="+m_target);
            java.net.URLConnection servletConnection = servletUrl.openConnection();
            stream = servletConnection.getInputStream();
            java.io.InputStreamReader reader = new java.io.InputStreamReader(stream);
            java.io.BufferedReader br = new java.io.BufferedReader(reader);
            String type = br.readLine();
            
            String xmlFile = "";
            String line;
            while ((line = br.readLine()) != null) {
                xmlFile += line+"\n";
            }

            str = new ByteArrayInputStream(xmlFile.getBytes());
            
            CategoryDataset pds = DatasetReader.readCategoryDatasetFromXML(str);
            JFreeChart lineChart = null;
            if (type.equals("LINE")) {
                initAddRemoveStructure(pds);
                lineChart = ChartFactory.createLineChart(title, this.getParameter("BAS"),
                this.getParameter("NOTE"),                   // range axis label
                pds,                        // data
                PlotOrientation.VERTICAL,  // orientation
                true,                      // include legend
                true,                      // tooltips
                false);
                CategoryPlot plot = lineChart.getCategoryPlot();
                plot.getRangeAxis(0).setLowerBound(1);

                addIntervalMarker(plot, 1.0, 2.0, this.getParameter("REJ"), REJET_COLOR);
                addIntervalMarker(plot, 2.0, 3.0, this.getParameter("RES"), RESERVE_COLOR);
                addIntervalMarker(plot, 3.0, 4.1, this.getParameter("ACC"), ACCEPTE_COLOR);
                
                LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
                renderer.setShapesVisible(true);
                renderer.setShapesFilled(true);
            }
            else {
                initAddRemoveStructure(pds);
                lineChart = ChartFactory.createBarChart3D(
                    title,      // chart title
                    this.getParameter("BAS"),               // domain axis label
                    this.getParameter("NOTE"),                  // range axis label
                    pds,                  // data
                    PlotOrientation.VERTICAL, // orientation
                    true,                     // include legend
                    true,                     // tooltips
                    false                     // urls
                );

                CategoryPlot plot = lineChart.getCategoryPlot();
                CategoryAxis axis = plot.getDomainAxis();
                axis.setCategoryLabelPositions(
                    CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 8.0)
                );
                axis.setCategoryMargin(0.4);
                BarRenderer3D renderer = (BarRenderer3D) plot.getRenderer();
                renderer.setDrawBarOutline(true);
            }
            lineChart.setBackgroundPaint(Color.WHITE);
            lineChart.getCategoryPlot().getRangeAxis(0).setUpperBound(4.1);
            if (jFreePanel == null) {
                jFreePanel = new ChartPanel(lineChart);
            }
            else {
                jFreePanel.setChart(lineChart);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            try {
                stream.close();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
            try {
                str.close();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    private void initAddRemoveStructure(CategoryDataset ds) {
        mVisibleData = new HashMap<String, CategoryDatasetEntryCollection>();
        mHiddenData = new HashMap<String, CategoryDatasetEntryCollection>();
        
        if(mSelectionFrame!=null) {
        	mSelectionFrame.setVisible(false);
        	mSelectionFrame.dispose();
        }
        
        mSelectionFrame = new SelectionFrame();
        mSelectionFrame.setEntryModifiable(this);
        mSelectionFrame.init();
        if (this.m_action.equals("BAR")) {
            initAddRemoveStructureForColumns(ds);
        }
        else {
            initAddRemoveStructureForRows(ds);
        }
        
        //mSelectionFrame.init();
        mSelectionFrame.pack();
    }
    
    private void initAddRemoveStructureForRows(CategoryDataset ds) {
        List columns = ds.getColumnKeys();
        List rows = ds.getRowKeys();
        List hiddenRows = new ArrayList();
        mSelectionFrame.setKeys(rows);
        Iterator i = rows.iterator();
        while (i.hasNext()) {
            Comparable r = (Comparable)i.next();
            CategoryDatasetRow cdsr = new CategoryDatasetRow(r);
            Iterator j = columns.iterator();
            double n = 4;
            while (j.hasNext()) {
                Comparable c = (Comparable)j.next();
                Number v = ds.getValue(r, c);
                if (v != null) {
                	n = Math.min(n, v.doubleValue());
                }
                cdsr.add(new CategoryDatasetEntry(c, v));
            }
            if (this.m_target.equalsIgnoreCase("CRIT")) {
            	if (n < 4) {
                	this.mVisibleData.put(r.toString(), cdsr);
            	}
            	else {
            		hiddenRows.add(r);
                	this.mHiddenData.put(r.toString(), cdsr);
            	}
            }
            else {
            	this.mVisibleData.put(r.toString(), cdsr);
            }
        }
        i = hiddenRows.iterator();
        Comparable r = null;
        while (i.hasNext()) {
        	r = (Comparable)i.next();
    		((DefaultCategoryDataset)ds).removeRow(r);
        }
    }
    
    private void initAddRemoveStructureForColumns(CategoryDataset ds) {
        List columns = ds.getColumnKeys();
        List rows = ds.getRowKeys();
        List hiddenColumns = new ArrayList();
        mSelectionFrame.setKeys(columns);
        Iterator i = columns.iterator();
        while (i.hasNext()) {
            Comparable c = (Comparable)i.next();
            CategoryDatasetColumn cdsc = new CategoryDatasetColumn(c);
            Iterator j = rows.iterator();
            double n = 4;
            while (j.hasNext()) {
                Comparable r = (Comparable)j.next();
                Number v = ds.getValue(r, c);
                if (v != null) {
                	n = Math.min(n, v.doubleValue());
                }
                cdsc.add(new CategoryDatasetEntry(r, v));
            }
            if (this.m_target.equalsIgnoreCase("CRIT")) {
            	if (n < 4) {
                	this.mVisibleData.put(c.toString(), cdsc);
            	}
            	else {
            		hiddenColumns.add(c);
                	this.mHiddenData.put(c.toString(), cdsc);
            	}
            }
            else {
            	this.mVisibleData.put(c.toString(), cdsc);
            }
        }
        i = hiddenColumns.iterator();
        Comparable c = null;
        while (i.hasNext()) {
        	c = (Comparable)i.next();
    		((DefaultCategoryDataset)ds).removeColumn(c);
        }
    }
    
    public void removeEntry(Comparable c) {
        DefaultCategoryDataset ds = (DefaultCategoryDataset)(this.jFreePanel.getChart().getCategoryPlot().getDataset());
        CategoryDatasetEntryCollection o = this.mVisibleData.get(c.toString());
        if(o!=null) {
        	this.mHiddenData.put(c.toString(), o);
        	this.mVisibleData.remove(c.toString());
        	if (this.m_action.equals("BAR")) {
        		ds.removeColumn(c);
        	}
        	else {
        		ds.removeRow(c);
        	}
        }
    }
    
    public void addEntry(Comparable c) {
        CategoryDatasetEntryCollection coll = (CategoryDatasetEntryCollection)this.mHiddenData.get(c.toString());
        DefaultCategoryDataset ds = (DefaultCategoryDataset)(this.jFreePanel.getChart().getCategoryPlot().getDataset());
        this.mVisibleData.put(c.toString(), coll);
        this.mHiddenData.remove(c.toString());
        coll.addCollection(ds);
    }
    
    private void addIntervalMarker(CategoryPlot plot, double min, double max, String label, Color c) {
        IntervalMarker target = new IntervalMarker(min, max);
        target.setLabel(label);
        target.setLabelFont(new Font("SansSerif", Font.ITALIC, 11));
        target.setLabelAnchor(RectangleAnchor.LEFT);
        target.setLabelTextAnchor(TextAnchor.CENTER_LEFT);
        target.setPaint(c);
        plot.addRangeMarker(target, Layer.BACKGROUND);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton bt = (JButton)e.getSource();
            if (bt.equals(this.mSelectButton)) {
                mSelectionFrame.show();
            } else {
                if (bt.equals(mBarButton)) {
                    this.m_action = "BAR";
                }
                else {
                    this.m_action = "LINE";
                }
                retrieveData();
                bt.setVisible(false);
                if (this.mHiddenGraphButton != null) {
                    this.mHiddenGraphButton.setVisible(true);
                }
                this.mHiddenGraphButton = bt;
            }
            /*
            System.out.println(this.jFreePanel.getChart().getCategoryPlot().getDataset());
            DefaultCategoryDataset ds = (DefaultCategoryDataset)(this.jFreePanel.getChart().getCategoryPlot().getDataset());
            ds.removeColumn(1);
             */
        }
        repaint();
    }
    
    public void itemStateChanged(ItemEvent e) {
        String selected = (String)this.mTargetList.getSelectedItem();
        if (selected.equals((String)this.mTargetNames.get(1)))  {
            this.m_target = "CRIT";
        }
        else {
            this.m_target = "FACT";
        }
        retrieveData();
        repaint();
    }
    
}
