<project name="Web Console example application" default="compile" basedir="../.">

<property file="./build/build.properties"/>

<!--
  app.name             Base name of this application, used to
                       construct filenames and directories.

  app.version          Version identifier for this application.

  build.home           Main build folder, a folder webconsole_example is
                       created within it.

  catalina.home        Taken from the build.properties file.

  deploy.home          The name of the directory into which the
                       deployment hierarchy will be created, and into
                       which the build directory will be copied.
                       Defaults to "${catalina.home}/webapps/${app.name}".

  dist.dir             The name of the base directory in which
                       distribution files are created.
  optimalflow.jar      Taken from build.properties, path that has
                       optimalflow.jar

  unet.jar             Taken from build.properties, path that has unet.jar

  mifdoclet.jar        Taken from build.properties path that has mifdoclet.jar

  extjars.dir          Path that has external jar files that are required.

-->
  <property name="app.name"      value="webconsole"/>
  <property name="app.version"   value="1.0"/>
  <property name="build.dir"     value="${build.home}/webconsole_build"/>
  <property name="deploy.home"   value="${catalina.home}/OptimalFlow/webapps/${app.name}"/>
  <property name="package.name"  value="com.compuware.optimal.flow.webconsole"/>
  <property name="dist.dir"      value="${build.home}/webconsole_build_dist"/>
  <property name="extjars.dir"   value="./lib"/>


<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?
-->

  <property name="compile.debug"       value="false"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== External Dependencies =========================== -->
<!--
  Property values that define the locations of external JAR files on which
  the application depends. These values are used for two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  optimalflow.jar  Required property from build.properties that has the location
                   of this jar file.

  unet.jar         Required property from build.properties that has the location
                   of this jar file.

  struts.jar       is expected to exist in the extjars dir.
-->

<!-- ==================== Compilation Classpath =========================== -->
  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <pathelement location="${optimalflow.jar}/optimalflow.jar"/>
    <pathelement location="${unet.jar}/unet.jar"/>
    <pathelement location="${extjars.dir}/struts.jar"/>

    <!-- Include all elements that Tomcat exposes to applications -->
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/classes"/>
    <fileset dir="${catalina.home}/server/lib">
      <include name="*.jar"/>
    </fileset>

  </path>

<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.
-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist, then compile"/>

<!-- ==================== Clean Target ==================================== -->
<!--
  The "clean" target deletes any previous "build" and "dist" directory.
-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

<!-- ==================== Compile Target ================================== -->
<!--
  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".
-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.dir}/WEB-INF/classes"/>
    <javac srcdir="src"
          destdir="${build.dir}/WEB-INF/classes"
           debug="${compile.debug}"
     deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy associated resource files -->
    <copy  todir="${build.dir}/WEB-INF/classes">
    <fileset dir="src" includes="**/*.properties"/>
    </copy>

  </target>

<!-- ==================== Deploy Target =================================== -->
<!--
  The "deploy" target copies the contents of the build directory into a
  location required by our servlet container, and picks up any external
  dependencies along the way.  After restarting the servlet container, you
  can now test your web application.
-->

  <target name="deploy" depends="compile"
   description="Deploy application to servlet container">

    <!-- Copy the contents of the build directory -->
    <mkdir     dir="${deploy.home}"/>
    <copy    todir="${deploy.home}">
      <fileset dir="${build.dir}"/>
    </copy>

  </target>

<!-- ==================== Dist Target ===================================== -->
<!--
  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "deploy" so that the entire web application (including external
    dependencies) will have been assembled
  * "javadoc" so that the application Javadocs will have been created
-->

  <target name="dist" depends="deploy,javadoc"
   description="Create binary distribution">

    <!-- Copy documentation subdirectory -->
    <copy    todir="${dist.dir}/docs">
      <fileset dir="docs"/>
    </copy>

    <!-- Create application JAR file -->
    <jar jarfile="${dist.dir}/${app.name}.war"
         basedir="${deploy.home}"/>

    <!-- Copy additional files to ${dist.dir} as necessary -->

  </target>



<!-- ==================== Javadoc Target ================================== -->
<!--
  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.
-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc documentation">

    <mkdir          dir="${dist.dir}/docs/javadoc"/>
    <javadoc sourcepath="src"
                destdir="${dist.dir}/docs/javadoc"
           packagenames="${package.name}">
      <classpath refid="compile.classpath"/>
    </javadoc>

  </target>

<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">

    <!-- Create build directory and copy static content -->
    <mkdir  dir="${build.dir}"/>
    <copy todir="${build.dir}">
      <fileset dir="web">
        <exclude name="**/web_inf"/>
        <exclude name="**/web_inf/*.*"/>
      </fileset>
    </copy>

    <copy file="web/web_inf/web.xml" todir="${build.dir}/WEB-INF" overwrite="yes"/>
    <copy file="web/web_inf/app.tld" todir="${build.dir}/WEB-INF" overwrite="yes"/>

    <copy file="web/web_inf/struts_bean.tld"
          tofile="${build.dir}/WEB-INF/struts-bean.tld"
          overwrite="yes">
    </copy>

    <copy file="web/web_inf/struts_html.tld"
          tofile="${build.dir}/WEB-INF/struts-html.tld"
          overwrite="yes">
    </copy>

    <copy file="web/web_inf/struts_logic.tld"
          tofile="${build.dir}/WEB-INF/struts-logic.tld"
          overwrite="yes">
    </copy>

    <copy file="web/web_inf/struts_config.xml"
          tofile="${build.dir}/WEB-INF/struts-config.xml"
          overwrite="yes">
    </copy>

    <!-- Copy external dependencies -->
    <mkdir  dir="${build.dir}/WEB-INF/lib"/>
    <copy todir="${build.dir}/WEB-INF/lib" file="${extjars.dir}/struts.jar"/>
    <copy todir="${build.dir}/WEB-INF/lib" file="${optimalflow.jar}/optimalflow.jar"/>
    <copy todir="${build.dir}/WEB-INF/lib" file="${unet.jar}/unet.jar"/>

  </target>

<!-- ==================== mifdoc Target ================================== -->
<!--
  The "mifdoc" target creates mifdoc documentation for the Java
  classes included in your application.
-->

  <target name="mifdoc" depends="compile"
   description="Create mifdoc documentation">

    <mkdir          dir="${dist.dir}/docs/mifdoc"/>
    <javadoc doclet="com.sun.tools.doclets.mif.MIFDoclet"
             docletpath="${mifdoclet.jar}/mifdoclet.jar"
             sourcepath="src"
             destdir="${dist.dir}/docs/mifdoc"
             packagenames="${package.name}">
             <classpath refid="compile.classpath"/>
    </javadoc>

  </target>

</project>
