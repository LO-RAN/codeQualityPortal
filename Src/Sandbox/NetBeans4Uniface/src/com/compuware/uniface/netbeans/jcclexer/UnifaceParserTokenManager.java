/* Generated By:JavaCC: Do not edit this line. UnifaceParserTokenManager.java */
package com.compuware.uniface.netbeans.jcclexer;

/** Token Manager. */
public class UnifaceParserTokenManager implements UnifaceParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffff00000000000L) != 0L || (active1 & 0x207ffffffffdfffL) != 0L)
         {
            jjmatchedKind = 122;
            return 32;
         }
         if ((active0 & 0x20L) != 0L)
            return 3;
         if ((active0 & 0x40L) != 0L)
            return 34;
         return -1;
      case 1:
         if ((active0 & 0xfffef00000000000L) != 0L || (active1 & 0x202ffffffffdfffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x5000000000000L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0xfffef00000000000L) != 0L || (active1 & 0x204bffefdfeddbfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active1 & 0x2400102010240L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x99f8f00000000000L) != 0L || (active1 & 0x4bc3ebcffdcbfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 3;
            }
            return 32;
         }
         if ((active0 & 0x6606000000000000L) != 0L || (active1 & 0x20003c041000100L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x5d62f00000000000L) != 0L || (active1 & 0x382eac7fdcbdL) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active0 & 0x8098000000000000L) != 0L || (active1 & 0x4841010800002L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x5d20e00000000000L) != 0L || (active1 & 0x182a8c5dd83cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 5;
            }
            return 32;
         }
         if ((active0 & 0x42100000000000L) != 0L || (active1 & 0x200420220481L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x4d20e00000000000L) != 0L || (active1 & 0x10028c47d81cL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 6;
            }
            return 32;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x82800180020L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x900e00000000000L) != 0L || (active1 & 0xc57d81cL) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x4420000000000000L) != 0L || (active1 & 0x100280000000L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 0x900800000000000L) != 0L || (active1 & 0x413c81cL) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active0 & 0x600000000000L) != 0L || (active1 & 0x8441000L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x800800000000000L) != 0L || (active1 & 0x411c000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 9;
            }
            return 32;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2081cL) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active0 & 0x800800000000000L) != 0L || (active1 & 0x4114008L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 10;
            return 32;
         }
         if ((active1 & 0x8000L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x4104008L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 11;
            return 32;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 32;
         return -1;
      case 12:
         if ((active1 & 0x4004008L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 12;
            return 32;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 32;
         return -1;
      case 13:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 13;
            return 32;
         }
         if ((active1 & 0x4008L) != 0L)
            return 32;
         return -1;
      case 14:
         if ((active1 & 0x4000000L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L);
      case 36:
         return jjStartNfaWithStates_0(0, 6, 34);
      case 37:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 38:
         return jjStopAtPos(0, 31);
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 42:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 3);
      case 45:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x1f8000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 4);
      case 59:
         return jjStartNfaWithStates_0(0, 5, 3);
      case 60:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x7fcL);
      case 61:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 11);
      case 91:
         return jjStopAtPos(0, 9);
      case 93:
         return jjStopAtPos(0, 10);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00040200L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x1000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x30080000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x6000104000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc2ea00000000000L, 0x18000020400L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x200000000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x5000000000002L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60001cL, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8020L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000040000800L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x180000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x600080800040L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x800107010080L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 30);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x7fcL);
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x6200500000000000L, active1, 0x30040000000041L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x201000800L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000040000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000000000L, active1, 0x280002a1c000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 32);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200010011cL, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8406000000000000L, active1, 0x10000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1002L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8a8a00000000000L, active1, 0x84000000020600L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x240a0480000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x140800c48000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200001000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000080L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2500000000020L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800001000002L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000800L, active2, 0x1cL);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x828a00000000000L, active1, 0x40000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80001440000000L, active2, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x18000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x100080005000L, active2, 0x80L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20080120L, active2, 0x100L);
      case 78:
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400020001dL, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000000000000L, active1, 0x204000010000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x8000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000L, active1, 0x140080004000080L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x606000000000000L, active1, 0x10002800900000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x6080000000000000L, active1, 0x20220200030400L, active2, 0x600L);
      case 87:
      case 119:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x408000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000100000000000L, active1, 0x1000000000L, active2, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 32);
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 32);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x4542000000000000L, active1, 0x40000008c0403cL, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000010000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200002L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x88400000000000L, active1, 0x100000204028480L, active2, 0xc0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1010000000000000L, active1, 0x100080000000L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20040000L, active2, 0x4L);
      case 78:
      case 110:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 32);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0x20L);
      case 79:
      case 111:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x118L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x2000180000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0x400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x10001000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 32);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000800000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4200000000800L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x800000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000400000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40e00000000000L, active1, 0x2000080008001cL, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0x280L);
      case 67:
      case 99:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 115);
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0x100L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 32);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 32);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000000L, active1, 0L, active2, 0x40L);
      case 70:
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 32);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x420000000L, active2, 0x400L);
      case 75:
      case 107:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 32);
         break;
      case 76:
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000100001L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L, active2, 0x18L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x110000000008080L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000050000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200008400820L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 32);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 32);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 32);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 119);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x225400L, active2, 0x20L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000200000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000000000000L, active1, 0x2284100000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(5, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000008400000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0x100L);
      case 70:
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 32);
         break;
      case 71:
      case 103:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 72:
      case 104:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 32);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4020000000000000L, active1, 0x40000000000020L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0x240L);
      case 78:
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x18L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000000L, active1, 0x8080009181cL, active2, 0x80L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L, active2, 0x4L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 32);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 32);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 32);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 120);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x8400000L, active2, 0xa0L);
      case 67:
      case 99:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x80020000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xcL, active2, 0x40L);
      case 69:
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x1800L, active2, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x4000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20400000000000L, active1, 0L, active2, 0x100L);
      case 77:
      case 109:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 32);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0x18L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x204048010L, active2, 0x4L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100800000000000L, active1, 0x900cL, active2, 0x4L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 32);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 32);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 32);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x20000000000000L, active2, 0x400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 95, 32);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L, active2, 0x20L);
      case 78:
      case 110:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4800L, active2, 0x358L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8400000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x340L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(8, 117);
         break;
      case 69:
      case 101:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 86, 32);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0x38L);
      case 77:
      case 109:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000L, active2, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 32);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 32);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 32);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(8, 118);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0x4000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0xcL, active2, 0x4L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(9, 133);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0x18000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 32);
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 32);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 75, 32);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L, active2, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x340L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0x98L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 81, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x4000L, active2, 0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000L, active2, 0x400L);
      case 69:
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 79, 32);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L, active2, 0x340L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L, active2, 0x18L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(11, 134);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(11, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(11, 137);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000L, active2, 0x8L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 47, 32);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 32);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L, active2, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 59, 32);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 72:
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 84, 32);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(13, 135);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(13, 138);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4L);
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(13, 67, 32);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(13, 78, 32);
         return jjMoveStringLiteralDfa14_0(active1, 0x4000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x18L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x4L);
      case 83:
      case 115:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(14, 90, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(15, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(15, 132);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active2, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2);
      return 16;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active2, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2);
      return 17;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa18_0(active2, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2);
      return 18;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa19_0(active2, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2);
      return 19;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(19, 130);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjstateSet[jjnewStateCnt++] = 37;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 36)
                     jjAddStates(7, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 39)
                     jjAddStates(14, 15);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 59)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(3);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAddStates(16, 20);
                  }
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar != 59)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(21, 23);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(14, 15);
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 26:
                  if (curChar == 34 && kind > 43)
                     kind = 43;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 32:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if (curChar == 36)
                     jjAddStates(7, 10);
                  break;
               case 35:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L && kind > 127)
                     kind = 127;
                  break;
               case 38:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 43:
                  if (curChar == 36 && kind > 129)
                     kind = 129;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(0, 6);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 12);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(52, 12);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar != 46)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(33, 35);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(33, 35);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(58, 12);
                  break;
               case 59:
                  if (curChar != 48)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(16, 20);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(61, 6);
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(62, 6);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 65:
                  if (curChar == 46)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(69, 12);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(73);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(75, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(35);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(32);
                  break;
               case 3:
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 17:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 25:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(35);
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(61, 6);
                  break;
               case 63:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 67:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 70:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 73:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   45, 46, 12, 49, 50, 53, 54, 34, 36, 38, 41, 23, 24, 26, 14, 16, 
   60, 62, 6, 63, 70, 8, 9, 12, 23, 24, 28, 26, 42, 43, 45, 46, 
   12, 55, 56, 12, 64, 65, 71, 72, 73, 10, 11, 17, 18, 20, 25, 27, 
   29, 47, 48, 51, 52, 57, 58, 66, 67, 68, 69, 74, 75, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\54", "\72", "\73", "\44", "\50", "\51", "\133", "\135", 
"\100", "\52", "\57", "\45", "\53", "\55", "\75", "\74", "\76", "\75\75", "\74\75", 
"\76\75", "\41\75", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\41", "\174", 
"\46", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[76];
private final int[] jjstateSet = new int[152];
protected char curChar;
/** Constructor. */
public UnifaceParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public UnifaceParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 76; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
