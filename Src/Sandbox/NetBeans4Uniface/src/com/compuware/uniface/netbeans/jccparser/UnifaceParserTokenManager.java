/* Generated By:JJTree&JavaCC: Do not edit this line. UnifaceParserTokenManager.java */
/*
Beware : continuation markers (aka "%\") should be removed before parsing
         as they will not be handled by this grammar.
         In the context of Proc code compiling,
         this special construct is handled by some pre-processing,
         before actual compilation occurs.
*/

package com.compuware.uniface.netbeans.jccparser;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
public class UnifaceParserTokenManager implements UnifaceParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffff000000100000L) != 0L || (active1 & 0xffffffffffdffffL) != 0L || (active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 135;
            return 31;
         }
         if ((active0 & 0x40L) != 0L)
            return 2;
         if ((active0 & 0x80L) != 0L)
            return 33;
         if ((active0 & 0x4000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0xffef000000100000L) != 0L || (active1 & 0x5fffffffffdffffL) != 0L || (active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0xa00000000000000L) != 0L)
            return 31;
         return -1;
      case 2:
         if ((active1 & 0x404001020102400L) != 0L)
            return 31;
         if ((active0 & 0xffef000000100000L) != 0L || (active1 & 0x9fbffefdfeddbffL) != 0L || (active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 2;
            }
            return 31;
         }
         return -1;
      case 3:
         if ((active0 & 0x6060000000000000L) != 0L || (active1 & 0x3c0410001006L) != 0L || (active2 & 0x40L) != 0L)
            return 31;
         if ((active0 & 0x9f8f000000100000L) != 0L || (active1 & 0x9fbc3ebcffdcbf9L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 3;
            }
            return 31;
         }
         return -1;
      case 4:
         if ((active0 & 0xd62f000000100000L) != 0L || (active1 & 0xf382eac7fdcbd5L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 4;
            return 31;
         }
         if ((active0 & 0x980000000000000L) != 0L || (active1 & 0x908410108000028L) != 0L)
            return 31;
         return -1;
      case 5:
         if ((active0 & 0x421000000000000L) != 0L || (active1 & 0x2004202204810L) != 0L)
            return 31;
         if ((active0 & 0xd20e000000100000L) != 0L || (active1 & 0xf182a8c5dd83c5L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 5;
            }
            return 31;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000L) != 0L || (active1 & 0xf0828001800201L) != 0L)
            return 31;
         if ((active0 & 0xd20e000000000000L) != 0L || (active1 & 0x10028c47d81c4L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 6;
            }
            return 31;
         }
         return -1;
      case 7:
         if ((active0 & 0x900e000000000000L) != 0L || (active1 & 0xc57d81c0L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
            return 31;
         }
         if ((active0 & 0x4200000000000000L) != 0L || (active1 & 0x1002800000004L) != 0L)
            return 31;
         return -1;
      case 8:
         if ((active0 & 0x9008000000000000L) != 0L || (active1 & 0x413c81c0L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 8;
            return 31;
         }
         if ((active0 & 0x6000000000000L) != 0L || (active1 & 0x84410000L) != 0L)
            return 31;
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x2081c0L) != 0L)
            return 31;
         if ((active0 & 0x8008000000000000L) != 0L || (active1 & 0x411c0000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 9;
            }
            return 31;
         }
         return -1;
      case 10:
         if ((active1 & 0x80000L) != 0L)
            return 31;
         if ((active0 & 0x8008000000000000L) != 0L || (active1 & 0x41140080L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 10;
            return 31;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 31;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x41040080L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 11;
            return 31;
         }
         return -1;
      case 12:
         if ((active1 & 0x40040080L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 12;
            return 31;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1000000L) != 0L)
            return 31;
         return -1;
      case 13:
         if ((active1 & 0x40080L) != 0L)
            return 31;
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 13;
            return 31;
         }
         return -1;
      case 14:
         if ((active1 & 0x40000000L) != 0L)
            return 31;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0x0L);
      case 36:
         return jjStartNfaWithStates_0(0, 7, 33);
      case 37:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x0L);
      case 38:
         return jjStopAtPos(0, 35);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 4);
      case 45:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 14, 7);
      case 47:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0xf000000000000000L, 0x3fL);
      case 58:
         return jjStopAtPos(0, 5);
      case 59:
         return jjStartNfaWithStates_0(0, 6, 2);
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x3fe000L);
      case 61:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 12);
      case 91:
         return jjStopAtPos(0, 10);
      case 93:
         return jjStopAtPos(0, 11);
      case 95:
         return jjStopAtPos(0, 13);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000e000402000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000001L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000000100000L, 0x10000300800000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100060001040006L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc2ea000000000000L, 0x180000204000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x40L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0xa00000000000020L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60001c0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40400000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80200L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000400008000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x81800000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x6000808000400L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x8001070100800L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x80000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 34);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3fe000L);
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2005000000000000L, active1, 0x6000400000000416L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2010008000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000400000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000000000000L, active1, 0x14280002a1c0000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 31);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200010011c0L, active2, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4060000000000000L, active1, 0x10000100000008L, active2, 0x8L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10020L, active2, 0x20L);
      case 78:
      case 110:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8a8a000000000000L, active1, 0x800000000206000L, active2, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x240a04800001L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800800c480000000L, active2, 0x2L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0x40L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1020000000000000L, active2, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000800L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x485000000000200L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000010000020L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000008000L, active2, 0xe000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x828a000000000000L, active1, 0x400000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x14400000000L, active2, 0x10021L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x180000000000L, active2, 0x8L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x1000800050000L, active2, 0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0x200801200L, active2, 0x80000L);
      case 78:
      case 110:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400020001d0L, active2, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000100000009L, active2, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x80000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000000000L, active1, 0x8010800040000800L, active2, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x6060000000000000L, active1, 0x2040028009000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x4082202000304006L, active2, 0x300010L);
      case 87:
      case 119:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4080000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x10000000008L, active2, 0x100010L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 31);
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 31);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x5420000000000000L, active1, 0x800000008c0403c4L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000100000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000020L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x884000000000000L, active1, 0x2040284800L, active2, 0x60006L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x1000800000001L, active2, 0L);
      case 77:
      case 109:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xb0000200400000L, active2, 0x2000L);
      case 78:
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 31);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x10020L);
      case 79:
      case 111:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8c000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000100000L, active1, 0x20001800000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0x200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x40000100010000L, active2, 0x8L);
      case 84:
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 31);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000008000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x902000000008000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x8000000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L, active2, 0x1L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40e000000000000L, active1, 0x40400080008001c0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0x140000L);
      case 67:
      case 99:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L, active2, 0x80000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 31);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 31);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0xb0000000000001L, active2, 0x20000L);
      case 70:
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 31);
         break;
      case 71:
      case 103:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 31);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x4200000000L, active2, 0x200000L);
      case 75:
      case 107:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 31);
         break;
      case 76:
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20001000010L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active2, 0xc000L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000080800L, active2, 0x2L);
      case 79:
      case 111:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000500000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000084008200L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 31);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 31);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 31);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(4, 128);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(4, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(4, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2254004L, active2, 0x10010L);
      case 85:
      case 117:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(4, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000002000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x22841000001L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(5, 125);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000084000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0x80010L);
      case 70:
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 31);
         break;
      case 71:
      case 103:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000000L, active2, 0x200000L);
      case 72:
      case 104:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 31);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x8000000000000204L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x120000L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0x10000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000000000L, active1, 0x8080009181c0L, active2, 0x40000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xb0000000080000L, active2, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 31);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 31);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 31);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(5, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000100000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x84000000L, active2, 0x50000L);
      case 67:
      case 99:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x800200000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc0L, active2, 0x20000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 31);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 31);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x18000L, active2, 0x100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x40000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000000000000L, active1, 0L, active2, 0x80010L);
      case 77:
      case 109:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100004L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 31);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc000L);
      case 83:
      case 115:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 31);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 31);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2040480100L, active2, 0x2000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000000000000L, active1, 0x900c0L, active2, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 31);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 31);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 31);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0x4000000000000000L, active2, 0x200010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 99, 31);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L, active2, 0x10000L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x48000L, active2, 0x1ac000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x84000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1a0000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 126);
         break;
      case 69:
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 90, 31);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L, active2, 0x1c000L);
      case 77:
      case 109:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0x200000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 31);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 31);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 86, 31);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 127);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x40000L, active2, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0xc0L, active2, 0x2000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(9, 144);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0x180000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 31);
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 72, 31);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 79, 31);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L, active2, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1a0000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L, active2, 0x4c000L);
      case 83:
      case 115:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(9, 132);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x40000L, active2, 0x40000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000L, active2, 0x200000L);
      case 69:
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 83, 31);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L, active2, 0x1a0000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L, active2, 0xc000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(11, 145);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(11, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(11, 148);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L, active2, 0x4000L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 31);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 84, 31);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000L, active2, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 63, 31);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 72:
      case 104:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(12, 88, 31);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(13, 146);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(13, 149);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2000L);
      case 69:
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 71, 31);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 82, 31);
         return jjMoveStringLiteralDfa14_0(active1, 0x40000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xc000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x2000L);
      case 83:
      case 115:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(14, 94, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(15, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(15, 143);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2);
      return 16;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2);
      return 17;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa18_0(active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2);
      return 18;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa19_0(active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2);
      return 19;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(19, 141);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 36)
                     jjAddStates(7, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 39)
                     jjAddStates(14, 15);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 59)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(2);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(16, 20);
                  }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     jjstateSet[jjnewStateCnt++] = 36;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 0:
                  if ((0x2400L & l) == 0L)
                     break;
                  kind = 3;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(21, 23);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(14, 15);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 46)
                     kind = 46;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if (curChar == 34 && kind > 47)
                     kind = 47;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 31:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 36)
                     jjAddStates(7, 10);
                  break;
               case 34:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L && kind > 138)
                     kind = 138;
                  break;
               case 37:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 42:
                  if (curChar == 36 && kind > 140)
                     kind = 140;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAddStates(0, 6);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 11);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(51, 11);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar != 46)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(33, 35);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(33, 35);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(57, 11);
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(16, 20);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(60, 5);
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(61, 5);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(68, 11);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 71:
                  if (curChar == 46)
                     jjCheckNAdd(72);
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(74, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(31);
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(34);
                  }
                  break;
               case 2:
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 16:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 24:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(31);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(34);
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(60, 5);
                  break;
               case 62:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 66:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 72:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   44, 45, 11, 48, 49, 52, 53, 33, 35, 37, 40, 22, 23, 25, 13, 15, 
   59, 61, 5, 62, 69, 7, 8, 11, 22, 23, 27, 25, 41, 42, 44, 45, 
   11, 54, 55, 11, 63, 64, 70, 71, 72, 9, 10, 16, 17, 19, 24, 26, 
   28, 46, 47, 50, 51, 56, 57, 65, 66, 67, 68, 73, 74, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\54", "\72", "\73", "\44", "\50", "\51", "\133", 
"\135", "\100", "\137", "\56", "\52", "\57", "\45", "\53", "\55", null, "\75", "\74", 
"\76", "\75\75", "\74\75", "\76\75", "\41\75", "\53\75", "\55\75", "\52\75", 
"\57\75", "\45\75", "\41", "\174", "\46", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffc23ffffffff9L, 0xffffffffffffffffL, 0x7ffeffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[75];
private final int[] jjstateSet = new int[150];
protected char curChar;
/** Constructor. */
public UnifaceParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public UnifaceParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 75; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 150)
   {
      jjmatchedKind = 150;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
