/* Generated By:JJTree&JavaCC: Do not edit this line. UnifaceParser.java */
/*
Beware : continuation markers (aka "%\") should be removed before parsing
         as they will not be handled by this grammar.
         In the context of Proc code compiling,
         this special construct is handled by some pre-processing,
         before actual compilation occurs.
*/

package com.compuware.pmd.uniface.ast;

/** A Uniface 9.4.01 Grammar. */
public class UnifaceParser/*@bgen(jjtree)*/implements UnifaceParserTreeConstants, UnifaceParserConstants {/*@bgen(jjtree)*/
  protected JJTUnifaceParserState jjtree = new JJTUnifaceParserState();

/** Main production. */
  final public ASTCompilationUnit CompilationUnit() throws ParseException {
                                        /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        CommentLine();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMS:
        ParameterBlock();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
        CommentLine();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLES:
        VariableBlock();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
        case COMPUTE:
        case COMMENT:
        case IF:
        case WHILE:
        case REPEAT:
        case SELECTCASE:
        case FUNCTION:
        case DELETEINSTANCE:
        case NEWINSTANCE:
        case SETFORMFOCUS:
        case ENTITYCOPY:
        case ADDMONTHS:
        case COMPARE:
        case DISPLAYLENGTH:
        case LENGTH:
        case LOWERCASE:
        case RESET:
        case SCAN:
        case SET:
        case STRIPATTRIBUTES:
        case UPPERCASE:
        case CLOSE:
        case COMMIT:
        case OPEN:
        case ROLLBACK:
        case SQL:
        case ACTIVATE:
        case DISPLAY:
        case GOTO:
        case CLRMESS:
        case DEBUG:
        case IDENTIFIER:
        case REGISTER:
        case GLOBALVARIABLE:
        case COMPONENTVARIABLE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        Instruction();
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new RuntimeException("Missing return statement in function");
  }

/**            */
  final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_4:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        Argument();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        LogicalExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          break;
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        LogicalExpression();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CompileTimeConstant() throws ParseException {
                              /*@bgen(jjtree) CompileTimeConstant */
  ASTCompileTimeConstant jjtn000 = new ASTCompileTimeConstant(this, JJTCOMPILETIMECONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CMPSTATEMANAGEDBY:
        jj_consume_token(CMPSTATEMANAGEDBY);
        break;
      case COMPONENTNAME:
        jj_consume_token(COMPONENTNAME);
        break;
      case COMPONENTTYPE:
        jj_consume_token(COMPONENTTYPE);
        break;
      case ENTNAME:
        jj_consume_token(ENTNAME);
        break;
      case FIELDNAME:
        jj_consume_token(FIELDNAME);
        break;
      case LIBRARYNAME:
        jj_consume_token(LIBRARYNAME);
        break;
      case MODELNAME:
        jj_consume_token(MODELNAME);
        break;
      case TABLENAME:
        jj_consume_token(TABLENAME);
        break;
      case TRIGGERABBR:
        jj_consume_token(TRIGGERABBR);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Constant() throws ParseException {
                   /*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(this, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(GT);
        break;
      case CMPSTATEMANAGEDBY:
      case COMPONENTNAME:
      case COMPONENTTYPE:
      case ENTNAME:
      case FIELDNAME:
      case LIBRARYNAME:
      case MODELNAME:
      case TABLENAME:
      case TRIGGERABBR:
        CompileTimeConstant();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ExpressionList() throws ParseException {
                         /*@bgen(jjtree) ExpressionList */
  ASTExpressionList jjtn000 = new ASTExpressionList(this, JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A logical Expression. */
  final public void LogicalExpression() throws ParseException {
                            /*@bgen(jjtree) LogicalExpression */
  ASTLogicalExpression jjtn000 = new ASTLogicalExpression(this, JJTLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case OR:
        case AND:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          break;
        case AND:
          jj_consume_token(AND);
          break;
        case OR:
          jj_consume_token(OR);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An relational Expression. */
  final public void RelationalExpression() throws ParseException {
                               /*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
        case LT:
        case GT:
        case EQ:
        case LE:
        case GE:
        case NE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        case EQUAL:
          jj_consume_token(EQUAL);
          break;
        case EQ:
          jj_consume_token(EQ);
          break;
        case NE:
          jj_consume_token(NE);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An Additive Expression. */
  final public void AdditiveExpression() throws ParseException {
                             /*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A Multiplicative Expression. */
  final public void MultiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(this, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MODULO:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case MODULO:
          jj_consume_token(MODULO);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A Unary Expression. */
  final public void UnaryExpression() throws ParseException {
                          /*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      case LT:
      case CMPSTATEMANAGEDBY:
      case COMPONENTNAME:
      case COMPONENTTYPE:
      case ENTNAME:
      case FIELDNAME:
      case LIBRARYNAME:
      case MODELNAME:
      case TABLENAME:
      case TRIGGERABBR:
        Constant();
        break;
      case INTEGER_LITERAL:
        Integer();
        break;
      case IDENTIFIER:
        UserDefinedFunction();
        break;
      case SYNTAX_STRING_LITERAL:
      case STRING_LITERAL:
        String();
        break;
      case FUNCTION:
        Function();
        break;
      case REGISTER:
        Register();
        break;
      case GLOBALVARIABLE:
        GlobalVariable();
        break;
      case COMPONENTVARIABLE:
        ComponentVariable();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UserDefinedFunction() throws ParseException {
                              /*@bgen(jjtree) UserDefinedFunction */
  ASTUserDefinedFunction jjtn000 = new ASTUserDefinedFunction(this, JJTUSERDEFINEDFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      if (jj_2_4(2)) {
        jj_consume_token(LPAREN);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          Expression();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A String. */
  final public void String() throws ParseException {
                 /*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(this, JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case SYNTAX_STRING_LITERAL:
        jj_consume_token(SYNTAX_STRING_LITERAL);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An Identifier. */
  final public void Identifier() throws ParseException {
                     /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Register() throws ParseException {
                   /*@bgen(jjtree) Register */
  ASTRegister jjtn000 = new ASTRegister(this, JJTREGISTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REGISTER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GlobalVariable() throws ParseException {
                         /*@bgen(jjtree) GlobalVariable */
  ASTGlobalVariable jjtn000 = new ASTGlobalVariable(this, JJTGLOBALVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GLOBALVARIABLE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ComponentVariable() throws ParseException {
                            /*@bgen(jjtree) ComponentVariable */
  ASTComponentVariable jjtn000 = new ASTComponentVariable(this, JJTCOMPONENTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMPONENTVARIABLE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IdentifierList() throws ParseException {
                         /*@bgen(jjtree) IdentifierList */
  ASTIdentifierList jjtn000 = new ASTIdentifierList(this, JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        Identifier();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An Integer. */
  final public void Integer() throws ParseException {
                  /*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(this, JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER_LITERAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A Datatype. */
  final public void Datatype() throws ParseException {
                   /*@bgen(jjtree) Datatype */
  ASTDatatype jjtn000 = new ASTDatatype(this, JJTDATATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case DATE:
        jj_consume_token(DATE);
        break;
      case DATETIME:
        jj_consume_token(DATETIME);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case HANDLE:
        jj_consume_token(HANDLE);
        break;
      case IMAGE:
        jj_consume_token(IMAGE);
        break;
      case LINEARDATE:
        jj_consume_token(LINEARDATE);
        break;
      case LINEARDATETIME:
        jj_consume_token(LINEARDATETIME);
        break;
      case LINEARTIME:
        jj_consume_token(LINEARTIME);
        break;
      case NUMERIC:
        jj_consume_token(NUMERIC);
        break;
      case RAW:
        jj_consume_token(RAW);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case TIME:
        jj_consume_token(TIME);
        break;
      case ANY:
        jj_consume_token(ANY);
        break;
      case ENTITY:
        jj_consume_token(ENTITY);
        break;
      case OCCURRENCE:
        jj_consume_token(OCCURRENCE);
        break;
      case XMLSTREAM:
        jj_consume_token(XMLSTREAM);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A Direction. */
  final public void Direction() throws ParseException {
                    /*@bgen(jjtree) Direction */
  ASTDirection jjtn000 = new ASTDirection(this, JJTDIRECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        break;
      case OUT:
        jj_consume_token(OUT);
        break;
      case INOUT:
        jj_consume_token(INOUT);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A variable definition*/
  final public void VariableDefinition() throws ParseException {
                             /*@bgen(jjtree) VariableDefinition */
  ASTVariableDefinition jjtn000 = new ASTVariableDefinition(this, JJTVARIABLEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Datatype();
      Identifier();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        Identifier();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A parameter */
  final public void Parameter() throws ParseException {
                    /*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(this, JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Datatype();
      Identifier();
      jj_consume_token(COLON);
      Direction();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A parameter block */
  final public void ParameterBlock() throws ParseException {
                         /*@bgen(jjtree) ParameterBlock */
  ASTParameterBlock jjtn000 = new ASTParameterBlock(this, JJTPARAMETERBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PARAMS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(BR);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
        case BOOLEAN:
        case DATE:
        case DATETIME:
        case FLOAT:
        case HANDLE:
        case IMAGE:
        case LINEARDATE:
        case LINEARDATETIME:
        case LINEARTIME:
        case NUMERIC:
        case RAW:
        case STRING:
        case TIME:
        case ANY:
        case ENTITY:
        case OCCURRENCE:
        case XMLSTREAM:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case DATE:
        case DATETIME:
        case FLOAT:
        case HANDLE:
        case IMAGE:
        case LINEARDATE:
        case LINEARDATETIME:
        case LINEARTIME:
        case NUMERIC:
        case RAW:
        case STRING:
        case TIME:
        case ANY:
        case ENTITY:
        case OCCURRENCE:
        case XMLSTREAM:
          Parameter();
          break;
        case COMMENT:
          CommentLine();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ENDPARAMS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

/** A variable block */
  final public void VariableBlock() throws ParseException {
                        /*@bgen(jjtree) VariableBlock */
  ASTVariableBlock jjtn000 = new ASTVariableBlock(this, JJTVARIABLEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VARIABLES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(BR);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
        case BOOLEAN:
        case DATE:
        case DATETIME:
        case FLOAT:
        case HANDLE:
        case IMAGE:
        case LINEARDATE:
        case LINEARDATETIME:
        case LINEARTIME:
        case NUMERIC:
        case RAW:
        case STRING:
        case TIME:
        case ANY:
        case ENTITY:
        case OCCURRENCE:
        case XMLSTREAM:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case DATE:
        case DATETIME:
        case FLOAT:
        case HANDLE:
        case IMAGE:
        case LINEARDATE:
        case LINEARDATETIME:
        case LINEARTIME:
        case NUMERIC:
        case RAW:
        case STRING:
        case TIME:
        case ANY:
        case ENTITY:
        case OCCURRENCE:
        case XMLSTREAM:
          VariableDefinition();
          break;
        case COMMENT:
          CommentLine();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ENDVARIABLES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Comment() throws ParseException {
                  /*@bgen(jjtree) Comment */
  ASTComment jjtn000 = new ASTComment(this, JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMENT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CommentLine() throws ParseException {
                      /*@bgen(jjtree) CommentLine */
  ASTCommentLine jjtn000 = new ASTCommentLine(this, JJTCOMMENTLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Comment();
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An Instruction. */
  final public void Instruction() throws ParseException {
                      /*@bgen(jjtree) Instruction */
  ASTInstruction jjtn000 = new ASTInstruction(this, JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        ProcStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          Comment();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(BR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          IfStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case REPEAT:
          RepeatStatement();
          break;
        case SELECTCASE:
          SelectCaseStatement();
          break;
        case IDENTIFIER:
          LabelStatement();
          break;
        case COMMENT:
          CommentLine();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ProcStatement() throws ParseException {
                        /*@bgen(jjtree) ProcStatement */
  ASTProcStatement jjtn000 = new ASTProcStatement(this, JJTPROCSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETEINSTANCE:
      case NEWINSTANCE:
      case SETFORMFOCUS:
      case ENTITYCOPY:
      case ADDMONTHS:
      case COMPARE:
      case DISPLAYLENGTH:
      case LENGTH:
      case LOWERCASE:
      case RESET:
      case SCAN:
      case SET:
      case STRIPATTRIBUTES:
      case UPPERCASE:
      case CLOSE:
      case COMMIT:
      case OPEN:
      case ROLLBACK:
      case SQL:
      case ACTIVATE:
      case DISPLAY:
      case GOTO:
      case CLRMESS:
      case DEBUG:
        Statement();
        break;
      case AT:
      case COMPUTE:
      case FUNCTION:
      case IDENTIFIER:
      case REGISTER:
      case GLOBALVARIABLE:
      case COMPONENTVARIABLE:
        Assignment();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Indirection() throws ParseException {
                      /*@bgen(jjtree) Indirection */
  ASTIndirection jjtn000 = new ASTIndirection(this, JJTINDIRECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Compute() throws ParseException {
                  /*@bgen(jjtree) Compute */
  ASTCompute jjtn000 = new ASTCompute(this, JJTCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMPUTE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An assignment. */
  final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPUTE:
        Compute();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        Indirection();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Identifier();
        break;
      case REGISTER:
        Register();
        break;
      case GLOBALVARIABLE:
        GlobalVariable();
        break;
      case COMPONENTVARIABLE:
        ComponentVariable();
        break;
      case FUNCTION:
        Function();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT_SWITCH:
        jj_consume_token(INIT_SWITCH);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(EQUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        Indirection();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      Expression();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

/** A function. */
  final public void Function() throws ParseException {
                   /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(this, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      if (jj_2_6(2)) {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LT:
        case INTEGER_LITERAL:
        case SYNTAX_STRING_LITERAL:
        case STRING_LITERAL:
        case FUNCTION:
        case IDENTIFIER:
        case REGISTER:
        case GLOBALVARIABLE:
        case COMPONENTVARIABLE:
        case CMPSTATEMANAGEDBY:
        case COMPONENTNAME:
        case COMPONENTTYPE:
        case ENTNAME:
        case FIELDNAME:
        case LIBRARYNAME:
        case MODELNAME:
        case TABLENAME:
        case TRIGGERABBR:
          ExpressionList();
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      if (jj_2_7(3)) {
        Instruction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BR:
        case COMMENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMENT:
            Comment();
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
          jj_consume_token(BR);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AT:
            case COMPUTE:
            case COMMENT:
            case IF:
            case WHILE:
            case REPEAT:
            case SELECTCASE:
            case FUNCTION:
            case DELETEINSTANCE:
            case NEWINSTANCE:
            case SETFORMFOCUS:
            case ENTITYCOPY:
            case ADDMONTHS:
            case COMPARE:
            case DISPLAYLENGTH:
            case LENGTH:
            case LOWERCASE:
            case RESET:
            case SCAN:
            case SET:
            case STRIPATTRIBUTES:
            case UPPERCASE:
            case CLOSE:
            case COMMIT:
            case OPEN:
            case ROLLBACK:
            case SQL:
            case ACTIVATE:
            case DISPLAY:
            case GOTO:
            case CLRMESS:
            case DEBUG:
            case IDENTIFIER:
            case REGISTER:
            case GLOBALVARIABLE:
            case COMPONENTVARIABLE:
              ;
              break;
            default:
              jj_la1[43] = jj_gen;
              break label_14;
            }
            Instruction();
          }
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ELSEIF:
              ;
              break;
            default:
              jj_la1[44] = jj_gen;
              break label_15;
            }
            jj_consume_token(ELSEIF);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMENT:
              Comment();
              break;
            default:
              jj_la1[45] = jj_gen;
              ;
            }
            jj_consume_token(BR);
            label_16:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case AT:
              case COMPUTE:
              case COMMENT:
              case IF:
              case WHILE:
              case REPEAT:
              case SELECTCASE:
              case FUNCTION:
              case DELETEINSTANCE:
              case NEWINSTANCE:
              case SETFORMFOCUS:
              case ENTITYCOPY:
              case ADDMONTHS:
              case COMPARE:
              case DISPLAYLENGTH:
              case LENGTH:
              case LOWERCASE:
              case RESET:
              case SCAN:
              case SET:
              case STRIPATTRIBUTES:
              case UPPERCASE:
              case CLOSE:
              case COMMIT:
              case OPEN:
              case ROLLBACK:
              case SQL:
              case ACTIVATE:
              case DISPLAY:
              case GOTO:
              case CLRMESS:
              case DEBUG:
              case IDENTIFIER:
              case REGISTER:
              case GLOBALVARIABLE:
              case COMPONENTVARIABLE:
                ;
                break;
              default:
                jj_la1[46] = jj_gen;
                break label_16;
              }
              Instruction();
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            jj_consume_token(ELSE);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMENT:
              Comment();
              break;
            default:
              jj_la1[47] = jj_gen;
              ;
            }
            jj_consume_token(BR);
            label_17:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case AT:
              case COMPUTE:
              case COMMENT:
              case IF:
              case WHILE:
              case REPEAT:
              case SELECTCASE:
              case FUNCTION:
              case DELETEINSTANCE:
              case NEWINSTANCE:
              case SETFORMFOCUS:
              case ENTITYCOPY:
              case ADDMONTHS:
              case COMPARE:
              case DISPLAYLENGTH:
              case LENGTH:
              case LOWERCASE:
              case RESET:
              case SCAN:
              case SET:
              case STRIPATTRIBUTES:
              case UPPERCASE:
              case CLOSE:
              case COMMIT:
              case OPEN:
              case ROLLBACK:
              case SQL:
              case ACTIVATE:
              case DISPLAY:
              case GOTO:
              case CLRMESS:
              case DEBUG:
              case IDENTIFIER:
              case REGISTER:
              case GLOBALVARIABLE:
              case COMPONENTVARIABLE:
                ;
                break;
              default:
                jj_la1[48] = jj_gen;
                break label_17;
              }
              Instruction();
            }
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          jj_consume_token(ENDIF);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMENT:
            Comment();
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          jj_consume_token(BR);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(BR);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
        case COMPUTE:
        case COMMENT:
        case IF:
        case WHILE:
        case REPEAT:
        case SELECTCASE:
        case FUNCTION:
        case DELETEINSTANCE:
        case NEWINSTANCE:
        case SETFORMFOCUS:
        case ENTITYCOPY:
        case ADDMONTHS:
        case COMPARE:
        case DISPLAYLENGTH:
        case LENGTH:
        case LOWERCASE:
        case RESET:
        case SCAN:
        case SET:
        case STRIPATTRIBUTES:
        case UPPERCASE:
        case CLOSE:
        case COMMIT:
        case OPEN:
        case ROLLBACK:
        case SQL:
        case ACTIVATE:
        case DISPLAY:
        case GOTO:
        case CLRMESS:
        case DEBUG:
        case IDENTIFIER:
        case REGISTER:
        case GLOBALVARIABLE:
        case COMPONENTVARIABLE:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_18;
        }
        Instruction();
      }
      jj_consume_token(ENDWHILE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void RepeatStatement() throws ParseException {
 /*@bgen(jjtree) RepeatStatement */
  ASTRepeatStatement jjtn000 = new ASTRepeatStatement(this, JJTREPEATSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPEAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(BR);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
        case COMPUTE:
        case COMMENT:
        case IF:
        case WHILE:
        case REPEAT:
        case SELECTCASE:
        case FUNCTION:
        case DELETEINSTANCE:
        case NEWINSTANCE:
        case SETFORMFOCUS:
        case ENTITYCOPY:
        case ADDMONTHS:
        case COMPARE:
        case DISPLAYLENGTH:
        case LENGTH:
        case LOWERCASE:
        case RESET:
        case SCAN:
        case SET:
        case STRIPATTRIBUTES:
        case UPPERCASE:
        case CLOSE:
        case COMMIT:
        case OPEN:
        case ROLLBACK:
        case SQL:
        case ACTIVATE:
        case DISPLAY:
        case GOTO:
        case CLRMESS:
        case DEBUG:
        case IDENTIFIER:
        case REGISTER:
        case GLOBALVARIABLE:
        case COMPONENTVARIABLE:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_19;
        }
        Instruction();
      }
      jj_consume_token(UNTIL);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void SelectCaseStatement() throws ParseException {
 /*@bgen(jjtree) SelectCaseStatement */
  ASTSelectCaseStatement jjtn000 = new ASTSelectCaseStatement(this, JJTSELECTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECTCASE);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(BR);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
        case COMPUTE:
        case COMMENT:
        case IF:
        case WHILE:
        case REPEAT:
        case SELECTCASE:
        case FUNCTION:
        case DELETEINSTANCE:
        case NEWINSTANCE:
        case SETFORMFOCUS:
        case ENTITYCOPY:
        case ADDMONTHS:
        case COMPARE:
        case DISPLAYLENGTH:
        case LENGTH:
        case LOWERCASE:
        case RESET:
        case SCAN:
        case SET:
        case STRIPATTRIBUTES:
        case UPPERCASE:
        case CLOSE:
        case COMMIT:
        case OPEN:
        case ROLLBACK:
        case SQL:
        case ACTIVATE:
        case DISPLAY:
        case GOTO:
        case CLRMESS:
        case DEBUG:
        case IDENTIFIER:
        case REGISTER:
        case GLOBALVARIABLE:
        case COMPONENTVARIABLE:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_20;
        }
        Instruction();
      }
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_21;
        }
        jj_consume_token(CASE);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          Comment();
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        jj_consume_token(BR);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
          case COMPUTE:
          case COMMENT:
          case IF:
          case WHILE:
          case REPEAT:
          case SELECTCASE:
          case FUNCTION:
          case DELETEINSTANCE:
          case NEWINSTANCE:
          case SETFORMFOCUS:
          case ENTITYCOPY:
          case ADDMONTHS:
          case COMPARE:
          case DISPLAYLENGTH:
          case LENGTH:
          case LOWERCASE:
          case RESET:
          case SCAN:
          case SET:
          case STRIPATTRIBUTES:
          case UPPERCASE:
          case CLOSE:
          case COMMIT:
          case OPEN:
          case ROLLBACK:
          case SQL:
          case ACTIVATE:
          case DISPLAY:
          case GOTO:
          case CLRMESS:
          case DEBUG:
          case IDENTIFIER:
          case REGISTER:
          case GLOBALVARIABLE:
          case COMPONENTVARIABLE:
            ;
            break;
          default:
            jj_la1[62] = jj_gen;
            break label_22;
          }
          Instruction();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSECASE:
        jj_consume_token(ELSECASE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          Comment();
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        jj_consume_token(BR);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
          case COMPUTE:
          case COMMENT:
          case IF:
          case WHILE:
          case REPEAT:
          case SELECTCASE:
          case FUNCTION:
          case DELETEINSTANCE:
          case NEWINSTANCE:
          case SETFORMFOCUS:
          case ENTITYCOPY:
          case ADDMONTHS:
          case COMPARE:
          case DISPLAYLENGTH:
          case LENGTH:
          case LOWERCASE:
          case RESET:
          case SCAN:
          case SET:
          case STRIPATTRIBUTES:
          case UPPERCASE:
          case CLOSE:
          case COMMIT:
          case OPEN:
          case ROLLBACK:
          case SQL:
          case ACTIVATE:
          case DISPLAY:
          case GOTO:
          case CLRMESS:
          case DEBUG:
          case IDENTIFIER:
          case REGISTER:
          case GLOBALVARIABLE:
          case COMPONENTVARIABLE:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            break label_23;
          }
          Instruction();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      jj_consume_token(ENDSELECTCASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void LabelStatement() throws ParseException {
 /*@bgen(jjtree) LabelStatement */
  ASTLabelStatement jjtn000 = new ASTLabelStatement(this, JJTLABELSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        Comment();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      jj_consume_token(BR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

/** A Statement. */
  final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETEINSTANCE:
        Deleteinstance();
        break;
      case NEWINSTANCE:
        Newinstance();
        break;
      case SETFORMFOCUS:
        Setformfocus();
        break;
      case ENTITYCOPY:
        Entitycopy();
        break;
      case ADDMONTHS:
        Addmonths();
        break;
      case COMPARE:
        Compare();
        break;
      case DISPLAYLENGTH:
        Displaylength();
        break;
      case LENGTH:
        Length();
        break;
      case LOWERCASE:
        Lowercase();
        break;
      case RESET:
        Reset();
        break;
      case SCAN:
        Scan();
        break;
      case SET:
        Set();
        break;
      case STRIPATTRIBUTES:
        Stripattributes();
        break;
      case UPPERCASE:
        Uppercase();
        break;
      case CLOSE:
        Close();
        break;
      case COMMIT:
        Commit();
        break;
      case OPEN:
        Open();
        break;
      case ROLLBACK:
        Rollback();
        break;
      case SQL:
        Sql();
        break;
      case GOTO:
        Goto();
        break;
      case CLRMESS:
        Clrmess();
        break;
      case DEBUG:
        Debug();
        break;
      case ACTIVATE:
        Activate();
        break;
      case DISPLAY:
        Display();
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** Statements */
  final public void Deleteinstance() throws ParseException {
                         /*@bgen(jjtree) Deleteinstance */
  ASTDeleteinstance jjtn000 = new ASTDeleteinstance(this, JJTDELETEINSTANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DELETEINSTANCE);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Newinstance() throws ParseException {
                      /*@bgen(jjtree) Newinstance */
  ASTNewinstance jjtn000 = new ASTNewinstance(this, JJTNEWINSTANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEWINSTANCE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYNC_SWITCH:
      case ASYNC_SWITCH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYNC_SWITCH:
          jj_consume_token(SYNC_SWITCH);
          break;
        case ASYNC_SWITCH:
          jj_consume_token(ASYNC_SWITCH);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTACHED_SWITCH:
        jj_consume_token(ATTACHED_SWITCH);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      Expression();
      jj_consume_token(COMMA);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        Expression();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Setformfocus() throws ParseException {
                       /*@bgen(jjtree) Setformfocus */
  ASTSetformfocus jjtn000 = new ASTSetformfocus(this, JJTSETFORMFOCUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SETFORMFOCUS);
      if (jj_2_8(2)) {
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Entitycopy() throws ParseException {
                     /*@bgen(jjtree) Entitycopy */
  ASTEntitycopy jjtn000 = new ASTEntitycopy(this, JJTENTITYCOPY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENTITYCOPY);
      Expression();
      jj_consume_token(COMMA);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        Expression();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Addmonths() throws ParseException {
                    /*@bgen(jjtree) Addmonths */
  ASTAddmonths jjtn000 = new ASTAddmonths(this, JJTADDMONTHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ADDMONTHS);
      Expression();
      jj_consume_token(COMMA);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        Expression();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Compare() throws ParseException {
                  /*@bgen(jjtree) Compare */
  ASTCompare jjtn000 = new ASTCompare(this, JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMPARE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREVIOUS_SWITCH:
      case NEXT_SWITCH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PREVIOUS_SWITCH:
          jj_consume_token(PREVIOUS_SWITCH);
          break;
        case NEXT_SWITCH:
          jj_consume_token(NEXT_SWITCH);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Identifier();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        IdentifierList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        jj_consume_token(FROM);
        Expression();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Displaylength() throws ParseException {
                        /*@bgen(jjtree) Displaylength */
  ASTDisplaylength jjtn000 = new ASTDisplaylength(this, JJTDISPLAYLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DISPLAYLENGTH);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Length() throws ParseException {
                 /*@bgen(jjtree) Length */
  ASTLength jjtn000 = new ASTLength(this, JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LENGTH);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Lowercase() throws ParseException {
                    /*@bgen(jjtree) Lowercase */
  ASTLowercase jjtn000 = new ASTLowercase(this, JJTLOWERCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOWERCASE);
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Reset() throws ParseException {
                /*@bgen(jjtree) Reset */
  ASTReset jjtn000 = new ASTReset(this, JJTRESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESET);
      Function();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Scan() throws ParseException {
               /*@bgen(jjtree) Scan */
  ASTScan jjtn000 = new ASTScan(this, JJTSCAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SCAN);
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Set() throws ParseException {
              /*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(this, JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SET);
      Function();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Stripattributes() throws ParseException {
                          /*@bgen(jjtree) Stripattributes */
  ASTStripattributes jjtn000 = new ASTStripattributes(this, JJTSTRIPATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRIPATTRIBUTES);
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Uppercase() throws ParseException {
                    /*@bgen(jjtree) Uppercase */
  ASTUppercase jjtn000 = new ASTUppercase(this, JJTUPPERCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(UPPERCASE);
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Close() throws ParseException {
                /*@bgen(jjtree) Close */
  ASTClose jjtn000 = new ASTClose(this, JJTCLOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLOSE);
      if (jj_2_9(2)) {
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Commit() throws ParseException {
                 /*@bgen(jjtree) Commit */
  ASTCommit jjtn000 = new ASTCommit(this, JJTCOMMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMIT);
      if (jj_2_10(2)) {
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Open() throws ParseException {
               /*@bgen(jjtree) Open */
  ASTOpen jjtn000 = new ASTOpen(this, JJTOPEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN);
      if (jj_2_11(2)) {
        Expression();
        jj_consume_token(COMMA);
      } else {
        ;
      }
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Rollback() throws ParseException {
                   /*@bgen(jjtree) Rollback */
  ASTRollback jjtn000 = new ASTRollback(this, JJTROLLBACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROLLBACK);
      if (jj_2_12(2)) {
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Sql() throws ParseException {
              /*@bgen(jjtree) Sql */
  ASTSql jjtn000 = new ASTSql(this, JJTSQL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SQL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT_SWITCH:
        jj_consume_token(PRINT_SWITCH);
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Activate() throws ParseException {
                   /*@bgen(jjtree) Activate */
  ASTActivate jjtn000 = new ASTActivate(this, JJTACTIVATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ACTIVATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYNC_SWITCH:
      case ASYNC_SWITCH:
      case LIST_SWITCH:
      case STATELESS_SWITCH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIST_SWITCH:
          jj_consume_token(LIST_SWITCH);
          break;
        case SYNC_SWITCH:
          jj_consume_token(SYNC_SWITCH);
          break;
        case ASYNC_SWITCH:
          jj_consume_token(ASYNC_SWITCH);
          break;
        case STATELESS_SWITCH:
          jj_consume_token(STATELESS_SWITCH);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        Identifier();
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LT:
        case INTEGER_LITERAL:
        case SYNTAX_STRING_LITERAL:
        case STRING_LITERAL:
        case FUNCTION:
        case IDENTIFIER:
        case REGISTER:
        case GLOBALVARIABLE:
        case COMPONENTVARIABLE:
        case CMPSTATEMANAGEDBY:
        case COMPONENTNAME:
        case COMPONENTTYPE:
        case ENTNAME:
        case FIELDNAME:
        case LIBRARYNAME:
        case MODELNAME:
        case TABLENAME:
        case TRIGGERABBR:
          ExpressionList();
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Display() throws ParseException {
                  /*@bgen(jjtree) Display */
  ASTDisplay jjtn000 = new ASTDisplay(this, JJTDISPLAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DISPLAY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENU_SWITCH:
        jj_consume_token(MENU_SWITCH);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Goto() throws ParseException {
               /*@bgen(jjtree) Goto */
  ASTGoto jjtn000 = new ASTGoto(this, JJTGOTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GOTO);
      Identifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Clrmess() throws ParseException {
                  /*@bgen(jjtree) Clrmess */
  ASTClrmess jjtn000 = new ASTClrmess(this, JJTCLRMESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLRMESS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Debug() throws ParseException {
                /*@bgen(jjtree) Debug */
  ASTDebug jjtn000 = new ASTDebug(this, JJTDEBUG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEBUG);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(SCAN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(RESET)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LOWERCASE)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(DISPLAYLENGTH)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(COMPARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(ADDMONTHS)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(ENTITYCOPY)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(SETFORMFOCUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(NEWINSTANCE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(126)) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(DELETEINSTANCE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_87()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    if (jj_scan_token(BR)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(SELECTCASE)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(BR)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(REPEAT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(BR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(130)) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(COMPUTE)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(BR)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(BR)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(COMPONENTVARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(GLOBALVARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(DEBUG)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(CLRMESS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(DISPLAY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(133)) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(ACTIVATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(SQL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(129)) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(ROLLBACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(COMMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(CLOSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(UPPERCASE)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(STRIPATTRIBUTES)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public UnifaceParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[85];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x101000,0x30,0x400,0x0,0x400000,0x10,0x0,0x0,0xfe00000,0xfe00000,0xc0000,0xc0000,0x38000,0x38000,0x400100,0x10,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101000,0x100000,0x1000,0x0,0x0,0x1000,0x400100,0x0,0x101000,0x0,0x0,0x101000,0x0,0x101000,0x0,0x0,0x8,0x0,0x101000,0x0,0x0,0x101000,0x0,0x0,0x101000,0x0,0x0,0x101000,0x0,0x101000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x10,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x400100,0x4000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10000,0x40000,0x15100010,0x0,0x0,0x0,0x0,0x0,0xe,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0xc020,0x0,0xc000,0x0,0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x15100010,0x0,0x0,0x0,0x0,0x0,0x0,0xc020,0x10,0x15100010,0x200000,0x10,0x15100010,0x10,0x15100010,0x400000,0x10,0x10,0x10,0x15100010,0x10,0x10,0x15100010,0x10,0x10,0x15100010,0x20000000,0x10,0x15100010,0x10,0x15100010,0x40000000,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc020,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0xfffe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x1ffff,0x0,0x0,0x0,0x0,0x0,0x1ffff,0x1ffff,0x0,0x0,0x1ffff,0x1ffff,0x0,0x0,0x0,0xfffe0000,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0xfffe0000,0x0,0x0,0xfffe0000,0x0,0xfffe0000,0x0,0x0,0x0,0x0,0xfffe0000,0x0,0x0,0xfffe0000,0x0,0x0,0xfffe0000,0x0,0x0,0xfffe0000,0x0,0xfffe0000,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x110223f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x110223f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x110223f,0x0,0x0,0x110223f,0x0,0x110223f,0x0,0x0,0x0,0x0,0x110223f,0x0,0x0,0x110223f,0x0,0x0,0x110223f,0x0,0x0,0x110223f,0x0,0x110223f,0x0,0x0,0x0,0x110223f,0x30000000,0x30000000,0x40000000,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x30000000,0x30000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x1c80,0x0,0x0,0x3fe000,0x3fe000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffc80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x1c80,0x0,0x0,0x1c80,0x4,0x0,0x3ffc80,0x0,0x1c80,0x0,0x0,0x1c80,0x0,0x1c80,0x0,0x0,0x0,0x0,0x1c80,0x0,0x0,0x1c80,0x0,0x0,0x1c80,0x0,0x0,0x1c80,0x0,0x1c80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x80,0x40,0x2,0x18,0x18,0x3ffc80,0x0,0x20,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public UnifaceParser(CharStream stream) {
    token_source = new UnifaceParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public UnifaceParser(UnifaceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(UnifaceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[150];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 85; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 150; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  /** Main entry point. */
/*
  public static void main(String args[]) {
    UnifaceParser parser;
    if (args.length == 0) {
          System.out.println("Reading from standard input...");
          parser = new UnifaceParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Reading from file " + args[0] + " . . .");
      try {
        parser = new UnifaceParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Usage is one of:");
      System.out.println("         java UnifaceParser < inputfile");
      System.out.println("OR");
      System.out.println("         java UnifaceParser inputfile");
      return;
    }
    try {
      SimpleNode node = parser.Start();
      node.dump("");
      System.out.println("Uniface program parsed successfully.");
    } catch (Exception e) {
      System.out.println("Encountered errors during parse.");
      //System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
  */
}
